
Ro_Bo_Rho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb60  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  0800fce8  0800fce8  00010ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fff8  0800fff8  00012168  2**0
                  CONTENTS
  4 .ARM          00000008  0800fff8  0800fff8  00010ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010000  08010000  00012168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010000  08010000  00011000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010004  08010004  00011004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  08010008  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012168  2**0
                  CONTENTS
 10 .bss          00002498  20000168  20000168  00012168  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002600  20002600  00012168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012168  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fc04  00000000  00000000  00012198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004aa4  00000000  00000000  00031d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c98  00000000  00000000  00036840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001642  00000000  00000000  000384d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027dd0  00000000  00000000  00039b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002656b  00000000  00000000  000618ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1921  00000000  00000000  00087e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00169776  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f9c  00000000  00000000  001697bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00171758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000168 	.word	0x20000168
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800fcd0 	.word	0x0800fcd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000016c 	.word	0x2000016c
 80001c4:	0800fcd0 	.word	0x0800fcd0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96a 	b.w	8000e7c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14e      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bcc:	4694      	mov	ip, r2
 8000bce:	458c      	cmp	ip, r1
 8000bd0:	4686      	mov	lr, r0
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	d962      	bls.n	8000c9e <__udivmoddi4+0xde>
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0320 	rsb	r3, r2, #32
 8000bde:	4091      	lsls	r1, r2
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	4319      	orrs	r1, r3
 8000bea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f f68c 	uxth.w	r6, ip
 8000bf6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb04 f106 	mul.w	r1, r4, r6
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c16:	f080 8112 	bcs.w	8000e3e <__udivmoddi4+0x27e>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 810f 	bls.w	8000e3e <__udivmoddi4+0x27e>
 8000c20:	3c02      	subs	r4, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	fa1f f38e 	uxth.w	r3, lr
 8000c2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb00 f606 	mul.w	r6, r0, r6
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x94>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c46:	f080 80fc 	bcs.w	8000e42 <__udivmoddi4+0x282>
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	f240 80f9 	bls.w	8000e42 <__udivmoddi4+0x282>
 8000c50:	4463      	add	r3, ip
 8000c52:	3802      	subs	r0, #2
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11d      	cbz	r5, 8000c66 <__udivmoddi4+0xa6>
 8000c5e:	40d3      	lsrs	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9c5 3200 	strd	r3, r2, [r5]
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d905      	bls.n	8000c7a <__udivmoddi4+0xba>
 8000c6e:	b10d      	cbz	r5, 8000c74 <__udivmoddi4+0xb4>
 8000c70:	e9c5 0100 	strd	r0, r1, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4608      	mov	r0, r1
 8000c78:	e7f5      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d146      	bne.n	8000d10 <__udivmoddi4+0x150>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xcc>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	f0c0 80f0 	bcc.w	8000e6c <__udivmoddi4+0x2ac>
 8000c8c:	1a86      	subs	r6, r0, r2
 8000c8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d0e6      	beq.n	8000c66 <__udivmoddi4+0xa6>
 8000c98:	e9c5 6300 	strd	r6, r3, [r5]
 8000c9c:	e7e3      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	f040 8090 	bne.w	8000dc4 <__udivmoddi4+0x204>
 8000ca4:	eba1 040c 	sub.w	r4, r1, ip
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb08 4416 	mls	r4, r8, r6, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb07 f006 	mul.w	r0, r7, r6
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x11c>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x11a>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000cda:	4626      	mov	r6, r4
 8000cdc:	1a1c      	subs	r4, r3, r0
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb00 f707 	mul.w	r7, r0, r7
 8000cf2:	429f      	cmp	r7, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x148>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x146>
 8000d00:	429f      	cmp	r7, r3
 8000d02:	f200 80b0 	bhi.w	8000e66 <__udivmoddi4+0x2a6>
 8000d06:	4620      	mov	r0, r4
 8000d08:	1bdb      	subs	r3, r3, r7
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0x9c>
 8000d10:	f1c1 0620 	rsb	r6, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d20:	fa04 f301 	lsl.w	r3, r4, r1
 8000d24:	ea43 030c 	orr.w	r3, r3, ip
 8000d28:	40f4      	lsrs	r4, r6
 8000d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2e:	0c38      	lsrs	r0, r7, #16
 8000d30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d34:	fbb4 fef0 	udiv	lr, r4, r0
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d44:	fb0e f90c 	mul.w	r9, lr, ip
 8000d48:	45a1      	cmp	r9, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x1a6>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d56:	f080 8084 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000d5a:	45a1      	cmp	r9, r4
 8000d5c:	f240 8081 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	eba4 0409 	sub.w	r4, r4, r9
 8000d6a:	fa1f f983 	uxth.w	r9, r3
 8000d6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d72:	fb00 4413 	mls	r4, r0, r3, r4
 8000d76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x1d2>
 8000d82:	193c      	adds	r4, r7, r4
 8000d84:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d88:	d267      	bcs.n	8000e5a <__udivmoddi4+0x29a>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0x29a>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d96:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	46ce      	mov	lr, r9
 8000da2:	469c      	mov	ip, r3
 8000da4:	d351      	bcc.n	8000e4a <__udivmoddi4+0x28a>
 8000da6:	d04e      	beq.n	8000e46 <__udivmoddi4+0x286>
 8000da8:	b155      	cbz	r5, 8000dc0 <__udivmoddi4+0x200>
 8000daa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dae:	eb64 040c 	sbc.w	r4, r4, ip
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	40cb      	lsrs	r3, r1
 8000db8:	431e      	orrs	r6, r3
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e750      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000dc4:	f1c2 0320 	rsb	r3, r2, #32
 8000dc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd4:	4094      	lsls	r4, r2
 8000dd6:	430c      	orrs	r4, r1
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dec:	0c23      	lsrs	r3, r4, #16
 8000dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df2:	fb00 f107 	mul.w	r1, r0, r7
 8000df6:	4299      	cmp	r1, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x24c>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e02:	d22c      	bcs.n	8000e5e <__udivmoddi4+0x29e>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d92a      	bls.n	8000e5e <__udivmoddi4+0x29e>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e14:	fb08 3311 	mls	r3, r8, r1, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb01 f307 	mul.w	r3, r1, r7
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x276>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e2c:	d213      	bcs.n	8000e56 <__udivmoddi4+0x296>
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	d911      	bls.n	8000e56 <__udivmoddi4+0x296>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4464      	add	r4, ip
 8000e36:	1ae4      	subs	r4, r4, r3
 8000e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e3c:	e739      	b.n	8000cb2 <__udivmoddi4+0xf2>
 8000e3e:	4604      	mov	r4, r0
 8000e40:	e6f0      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e706      	b.n	8000c54 <__udivmoddi4+0x94>
 8000e46:	45c8      	cmp	r8, r9
 8000e48:	d2ae      	bcs.n	8000da8 <__udivmoddi4+0x1e8>
 8000e4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e52:	3801      	subs	r0, #1
 8000e54:	e7a8      	b.n	8000da8 <__udivmoddi4+0x1e8>
 8000e56:	4631      	mov	r1, r6
 8000e58:	e7ed      	b.n	8000e36 <__udivmoddi4+0x276>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e799      	b.n	8000d92 <__udivmoddi4+0x1d2>
 8000e5e:	4630      	mov	r0, r6
 8000e60:	e7d4      	b.n	8000e0c <__udivmoddi4+0x24c>
 8000e62:	46d6      	mov	lr, sl
 8000e64:	e77f      	b.n	8000d66 <__udivmoddi4+0x1a6>
 8000e66:	4463      	add	r3, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e74d      	b.n	8000d08 <__udivmoddi4+0x148>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4623      	mov	r3, r4
 8000e70:	4608      	mov	r0, r1
 8000e72:	e70f      	b.n	8000c94 <__udivmoddi4+0xd4>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	e730      	b.n	8000cdc <__udivmoddi4+0x11c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f001 fecc 	bl	8002c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 fb0e 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8c:	f001 f858 	bl	8001f40 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e90:	f000 fc82 	bl	8001798 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e94:	f000 fd28 	bl	80018e8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000e98:	f000 fb70 	bl	800157c <MX_ADC1_Init>
  MX_SPI2_Init();
 8000e9c:	f000 fbee 	bl	800167c <MX_SPI2_Init>
  MX_TIM1_Init();
 8000ea0:	f000 fc22 	bl	80016e8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000ea4:	f000 fdc8 	bl	8001a38 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000ea8:	f000 fe1e 	bl	8001ae8 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000eac:	f000 fe6c 	bl	8001b88 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000eb0:	f000 feb8 	bl	8001c24 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000eb4:	f000 ff04 	bl	8001cc0 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000eb8:	f000 ff52 	bl	8001d60 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000ebc:	f000 ff9e 	bl	8001dfc <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8000ec0:	f001 f814 	bl	8001eec <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000ec4:	f00c fd9a 	bl	800d9fc <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000ec8:	f000 ffe6 	bl	8001e98 <MX_UART4_Init>
  MX_I2C2_Init();
 8000ecc:	f000 fba8 	bl	8001620 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000ed0:	f000 fcb6 	bl	8001840 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ed4:	f000 fd5c 	bl	8001990 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
   Motor_setup_LF(&htim14   ,&htim5    ,"PC05");
 8000ed8:	4a4c      	ldr	r2, [pc, #304]	@ (800100c <main+0x18c>)
 8000eda:	494d      	ldr	r1, [pc, #308]	@ (8001010 <main+0x190>)
 8000edc:	484d      	ldr	r0, [pc, #308]	@ (8001014 <main+0x194>)
 8000ede:	f008 feff 	bl	8009ce0 <Motor_setup_LF>
   Motor_setup_LB(&htim12   ,&htim1    ,"PE12");
 8000ee2:	4a4d      	ldr	r2, [pc, #308]	@ (8001018 <main+0x198>)
 8000ee4:	494d      	ldr	r1, [pc, #308]	@ (800101c <main+0x19c>)
 8000ee6:	484e      	ldr	r0, [pc, #312]	@ (8001020 <main+0x1a0>)
 8000ee8:	f008 ff28 	bl	8009d3c <Motor_setup_LB>
   Motor_setup_RF(&htim11   ,&htim8    ,"PE01");
 8000eec:	4a4d      	ldr	r2, [pc, #308]	@ (8001024 <main+0x1a4>)
 8000eee:	494e      	ldr	r1, [pc, #312]	@ (8001028 <main+0x1a8>)
 8000ef0:	484e      	ldr	r0, [pc, #312]	@ (800102c <main+0x1ac>)
 8000ef2:	f008 ff51 	bl	8009d98 <Motor_setup_RF>
   Motor_setup_RB(&htim12   ,&htim4    ,"PD09");
 8000ef6:	4a4e      	ldr	r2, [pc, #312]	@ (8001030 <main+0x1b0>)
 8000ef8:	494e      	ldr	r1, [pc, #312]	@ (8001034 <main+0x1b4>)
 8000efa:	4849      	ldr	r0, [pc, #292]	@ (8001020 <main+0x1a0>)
 8000efc:	f008 ff7a 	bl	8009df4 <Motor_setup_RB>

   Motor_setup_EXTRA1(&htim9,&htim3    ,"PC13");
 8000f00:	4a4d      	ldr	r2, [pc, #308]	@ (8001038 <main+0x1b8>)
 8000f02:	494e      	ldr	r1, [pc, #312]	@ (800103c <main+0x1bc>)
 8000f04:	484e      	ldr	r0, [pc, #312]	@ (8001040 <main+0x1c0>)
 8000f06:	f008 ffa3 	bl	8009e50 <Motor_setup_EXTRA1>
   Motor_setup_EXTRA2(&htim10,&htim2   ,"PE00");
 8000f0a:	4a4e      	ldr	r2, [pc, #312]	@ (8001044 <main+0x1c4>)
 8000f0c:	494e      	ldr	r1, [pc, #312]	@ (8001048 <main+0x1c8>)
 8000f0e:	484f      	ldr	r0, [pc, #316]	@ (800104c <main+0x1cc>)
 8000f10:	f008 ffcc 	bl	8009eac <Motor_setup_EXTRA2>

   Setup_Gear_Ratio(27);
 8000f14:	201b      	movs	r0, #27
 8000f16:	f009 f817 	bl	8009f48 <Setup_Gear_Ratio>
   Setup_CPR(68);
 8000f1a:	2044      	movs	r0, #68	@ 0x44
 8000f1c:	f009 f804 	bl	8009f28 <Setup_CPR>
   Setup_frequency_Motor(100);
 8000f20:	2064      	movs	r0, #100	@ 0x64
 8000f22:	f009 f821 	bl	8009f68 <Setup_frequency_Motor>

   Setup_PID_LF(0.8 ,0.0 ,0.1 ,0 ,300);
 8000f26:	ed9f 2a4a 	vldr	s4, [pc, #296]	@ 8001050 <main+0x1d0>
 8000f2a:	eddf 1a4a 	vldr	s3, [pc, #296]	@ 8001054 <main+0x1d4>
 8000f2e:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 8001058 <main+0x1d8>
 8000f32:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8001054 <main+0x1d4>
 8000f36:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 800105c <main+0x1dc>
 8000f3a:	f009 f8ad 	bl	800a098 <Setup_PID_LF>
   Setup_PID_LB(0.8 ,0.0 ,0.1 ,0 ,300);
 8000f3e:	ed9f 2a44 	vldr	s4, [pc, #272]	@ 8001050 <main+0x1d0>
 8000f42:	eddf 1a44 	vldr	s3, [pc, #272]	@ 8001054 <main+0x1d4>
 8000f46:	ed9f 1a44 	vldr	s2, [pc, #272]	@ 8001058 <main+0x1d8>
 8000f4a:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8001054 <main+0x1d4>
 8000f4e:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 800105c <main+0x1dc>
 8000f52:	f009 f8cd 	bl	800a0f0 <Setup_PID_LB>
   Setup_PID_RF(0.8 ,0.0 ,0.1 ,0 ,300);
 8000f56:	ed9f 2a3e 	vldr	s4, [pc, #248]	@ 8001050 <main+0x1d0>
 8000f5a:	eddf 1a3e 	vldr	s3, [pc, #248]	@ 8001054 <main+0x1d4>
 8000f5e:	ed9f 1a3e 	vldr	s2, [pc, #248]	@ 8001058 <main+0x1d8>
 8000f62:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8001054 <main+0x1d4>
 8000f66:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 800105c <main+0x1dc>
 8000f6a:	f009 f8ed 	bl	800a148 <Setup_PID_RF>
   Setup_PID_RB(0.8 ,0.0 ,0.1 ,0 ,300);
 8000f6e:	ed9f 2a38 	vldr	s4, [pc, #224]	@ 8001050 <main+0x1d0>
 8000f72:	eddf 1a38 	vldr	s3, [pc, #224]	@ 8001054 <main+0x1d4>
 8000f76:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 8001058 <main+0x1d8>
 8000f7a:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8001054 <main+0x1d4>
 8000f7e:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 800105c <main+0x1dc>
 8000f82:	f009 f90d 	bl	800a1a0 <Setup_PID_RB>

//   Setup_PID_EXTRA1(0.5 ,0.1 ,0 ,0 ,280);
//   Setup_PID_EXTRA2(0.5 ,0.1 ,0 ,0 ,280);

   Setup_frequency_Forward_Kinematic(100);
 8000f86:	2064      	movs	r0, #100	@ 0x64
 8000f88:	f00a f944 	bl	800b214 <Setup_frequency_Forward_Kinematic>
   Setup_Forward_Kinematic(0.23f ,0.23f ,0.06f);
 8000f8c:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 8001060 <main+0x1e0>
 8000f90:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8001064 <main+0x1e4>
 8000f94:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8001064 <main+0x1e4>
 8000f98:	f00a f91e 	bl	800b1d8 <Setup_Forward_Kinematic>

   Setup_Inverse_Kinematic(0.23f ,0.23f ,0.06f);
 8000f9c:	ed9f 1a30 	vldr	s2, [pc, #192]	@ 8001060 <main+0x1e0>
 8000fa0:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8001064 <main+0x1e4>
 8000fa4:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8001064 <main+0x1e4>
 8000fa8:	f00a f9d0 	bl	800b34c <Setup_Inverse_Kinematic>

   //UAST2 esp_s3_zero to STM32
//   HAL_UART_Receive_IT(&huart2, (uint8_t *)&temp_buffer, 1);

   HAL_UART_Receive_IT(&huart2, (uint8_t*)&Str_PS2, sizeof(Str_PS2));
 8000fac:	2208      	movs	r2, #8
 8000fae:	492e      	ldr	r1, [pc, #184]	@ (8001068 <main+0x1e8>)
 8000fb0:	482e      	ldr	r0, [pc, #184]	@ (800106c <main+0x1ec>)
 8000fb2:	f006 fc29 	bl	8007808 <HAL_UART_Receive_IT>

   Setup_MPU6050(&hi2c2);
 8000fb6:	482e      	ldr	r0, [pc, #184]	@ (8001070 <main+0x1f0>)
 8000fb8:	f00a fb6c 	bl	800b694 <Setup_MPU6050>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if ((uwTick - PastTime) > 10) {
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <main+0x1f4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8001078 <main+0x1f8>)
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	1a9b      	subs	r3, r3, r2
 8000fc6:	2b0a      	cmp	r3, #10
 8000fc8:	d9f8      	bls.n	8000fbc <main+0x13c>
	    PastTime = uwTick;
 8000fca:	4b2a      	ldr	r3, [pc, #168]	@ (8001074 <main+0x1f4>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4b29      	ldr	r3, [pc, #164]	@ (8001078 <main+0x1f8>)
 8000fd2:	601a      	str	r2, [r3, #0]
//	        digitalWrite("PE08", 0);  // LED OFF
//	    }else{
//	    	digitalWrite("PE08", 1);  // LED ON
//	    }

	    if (((uwTick - last_uart_data_time) < UART_TIMEOUT_MS) && (Str_PS2.Header[0] == 'R') && (Str_PS2.Header[1] == 'B')) {
 8000fd4:	4b27      	ldr	r3, [pc, #156]	@ (8001074 <main+0x1f4>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b28      	ldr	r3, [pc, #160]	@ (800107c <main+0x1fc>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fe2:	d24f      	bcs.n	8001084 <main+0x204>
 8000fe4:	4b20      	ldr	r3, [pc, #128]	@ (8001068 <main+0x1e8>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b52      	cmp	r3, #82	@ 0x52
 8000fea:	d14b      	bne.n	8001084 <main+0x204>
 8000fec:	4b1e      	ldr	r3, [pc, #120]	@ (8001068 <main+0x1e8>)
 8000fee:	785b      	ldrb	r3, [r3, #1]
 8000ff0:	2b42      	cmp	r3, #66	@ 0x42
 8000ff2:	d147      	bne.n	8001084 <main+0x204>
	    	      digitalWrite("PE15", 1);
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	4822      	ldr	r0, [pc, #136]	@ (8001080 <main+0x200>)
 8000ff8:	f009 fd88 	bl	800ab0c <digitalWrite>

	    	      Str_PS2.Header[0] = 0;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <main+0x1e8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
	    	      Str_PS2.Header[1] = 0;
 8001002:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <main+0x1e8>)
 8001004:	2200      	movs	r2, #0
 8001006:	705a      	strb	r2, [r3, #1]
 8001008:	e073      	b.n	80010f2 <main+0x272>
 800100a:	bf00      	nop
 800100c:	0800fce8 	.word	0x0800fce8
 8001010:	20000398 	.word	0x20000398
 8001014:	20000590 	.word	0x20000590
 8001018:	0800fcf0 	.word	0x0800fcf0
 800101c:	20000278 	.word	0x20000278
 8001020:	20000500 	.word	0x20000500
 8001024:	0800fcf8 	.word	0x0800fcf8
 8001028:	200003e0 	.word	0x200003e0
 800102c:	200004b8 	.word	0x200004b8
 8001030:	0800fd00 	.word	0x0800fd00
 8001034:	20000350 	.word	0x20000350
 8001038:	0800fd08 	.word	0x0800fd08
 800103c:	20000308 	.word	0x20000308
 8001040:	20000428 	.word	0x20000428
 8001044:	0800fd10 	.word	0x0800fd10
 8001048:	200002c0 	.word	0x200002c0
 800104c:	20000470 	.word	0x20000470
 8001050:	43960000 	.word	0x43960000
 8001054:	00000000 	.word	0x00000000
 8001058:	3dcccccd 	.word	0x3dcccccd
 800105c:	3f4ccccd 	.word	0x3f4ccccd
 8001060:	3d75c28f 	.word	0x3d75c28f
 8001064:	3e6b851f 	.word	0x3e6b851f
 8001068:	200006a8 	.word	0x200006a8
 800106c:	20000620 	.word	0x20000620
 8001070:	200001cc 	.word	0x200001cc
 8001074:	200006b0 	.word	0x200006b0
 8001078:	2000068c 	.word	0x2000068c
 800107c:	20000684 	.word	0x20000684
 8001080:	0800fd18 	.word	0x0800fd18
	    	    } else {
	    	      if (!uart_resetting && ((uwTick - last_uart_data_time) > UART_TIMEOUT_MS)) {
 8001084:	4b7e      	ldr	r3, [pc, #504]	@ (8001280 <main+0x400>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d120      	bne.n	80010ce <main+0x24e>
 800108c:	4b7d      	ldr	r3, [pc, #500]	@ (8001284 <main+0x404>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b7d      	ldr	r3, [pc, #500]	@ (8001288 <main+0x408>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800109a:	d918      	bls.n	80010ce <main+0x24e>
	    	        uart_resetting = 1;  // ตั้ง flag เพื่อป้อง�?ัน reset ซ้ำซ้อน
 800109c:	4b78      	ldr	r3, [pc, #480]	@ (8001280 <main+0x400>)
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]

	    	        HAL_UART_DeInit(&huart2);
 80010a2:	487a      	ldr	r0, [pc, #488]	@ (800128c <main+0x40c>)
 80010a4:	f006 fb7e 	bl	80077a4 <HAL_UART_DeInit>
	    	        HAL_Delay(10);
 80010a8:	200a      	movs	r0, #10
 80010aa:	f001 fe2b 	bl	8002d04 <HAL_Delay>
	    	        MX_USART2_UART_Init();
 80010ae:	f000 ff1d 	bl	8001eec <MX_USART2_UART_Init>

	    	        HAL_UART_Receive_IT(&huart2, (uint8_t *)&Str_PS2, sizeof(Str_PS2));
 80010b2:	2208      	movs	r2, #8
 80010b4:	4976      	ldr	r1, [pc, #472]	@ (8001290 <main+0x410>)
 80010b6:	4875      	ldr	r0, [pc, #468]	@ (800128c <main+0x40c>)
 80010b8:	f006 fba6 	bl	8007808 <HAL_UART_Receive_IT>
//	    	        HAL_UART_Receive_IT(&huart2, (uint8_t *)&temp_buffer, 1);

	    	        memset(&Str_PS2, 0, sizeof(Str_PS2));
 80010bc:	2208      	movs	r2, #8
 80010be:	2100      	movs	r1, #0
 80010c0:	4873      	ldr	r0, [pc, #460]	@ (8001290 <main+0x410>)
 80010c2:	f00d f9d7 	bl	800e474 <memset>

	    	        digitalWrite("PE15", 0);
 80010c6:	2100      	movs	r1, #0
 80010c8:	4872      	ldr	r0, [pc, #456]	@ (8001294 <main+0x414>)
 80010ca:	f009 fd1f 	bl	800ab0c <digitalWrite>
	    	      }
	    	      // หยุดมอเตอร์เพื่อความปลอดภัย
	    	      Motor_DutyCycle_LF(0);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f009 f93c 	bl	800a34c <Motor_DutyCycle_LF>
	    	      Motor_DutyCycle_LB(0);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f009 f991 	bl	800a3fc <Motor_DutyCycle_LB>
	    	      Motor_DutyCycle_RF(0);
 80010da:	2000      	movs	r0, #0
 80010dc:	f009 f9ea 	bl	800a4b4 <Motor_DutyCycle_RF>
	    	      Motor_DutyCycle_RB(0);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f009 fa43 	bl	800a56c <Motor_DutyCycle_RB>

	    	      Motor_DutyCycle_EXTRA1(0);
 80010e6:	2000      	movs	r0, #0
 80010e8:	f009 fa98 	bl	800a61c <Motor_DutyCycle_EXTRA1>
	    	      Motor_DutyCycle_EXTRA2(0);
 80010ec:	2000      	movs	r0, #0
 80010ee:	f009 faed 	bl	800a6cc <Motor_DutyCycle_EXTRA2>
	    }
//	    addr = Scan_I2C(&hi2c2);
	    ReadMPU6050();
 80010f2:	f00a fb23 	bl	800b73c <ReadMPU6050>
	    // count[2] = getCount(&htim8);
	    // count[3] = getCount(&htim4);
	    // count[4] = getCount(&htim2);
	    // count[5] = getCount(&htim3);

	    RPM[0] = getRPM_TIM_Wheel(&htim5, LF);
 80010f6:	2100      	movs	r1, #0
 80010f8:	4867      	ldr	r0, [pc, #412]	@ (8001298 <main+0x418>)
 80010fa:	f008 ff5f 	bl	8009fbc <getRPM_TIM_Wheel>
 80010fe:	eef0 7a40 	vmov.f32	s15, s0
 8001102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001106:	ee17 3a90 	vmov	r3, s15
 800110a:	b21a      	sxth	r2, r3
 800110c:	4b63      	ldr	r3, [pc, #396]	@ (800129c <main+0x41c>)
 800110e:	801a      	strh	r2, [r3, #0]
	    RPM[1] = -getRPM_TIM_Wheel(&htim1, LB);
 8001110:	2101      	movs	r1, #1
 8001112:	4863      	ldr	r0, [pc, #396]	@ (80012a0 <main+0x420>)
 8001114:	f008 ff52 	bl	8009fbc <getRPM_TIM_Wheel>
 8001118:	eef0 7a40 	vmov.f32	s15, s0
 800111c:	eef1 7a67 	vneg.f32	s15, s15
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	ee17 3a90 	vmov	r3, s15
 8001128:	b21a      	sxth	r2, r3
 800112a:	4b5c      	ldr	r3, [pc, #368]	@ (800129c <main+0x41c>)
 800112c:	805a      	strh	r2, [r3, #2]
	    RPM[2] = getRPM_TIM_Wheel(&htim8, RF);
 800112e:	2102      	movs	r1, #2
 8001130:	485c      	ldr	r0, [pc, #368]	@ (80012a4 <main+0x424>)
 8001132:	f008 ff43 	bl	8009fbc <getRPM_TIM_Wheel>
 8001136:	eef0 7a40 	vmov.f32	s15, s0
 800113a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800113e:	ee17 3a90 	vmov	r3, s15
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b55      	ldr	r3, [pc, #340]	@ (800129c <main+0x41c>)
 8001146:	809a      	strh	r2, [r3, #4]
	    RPM[3] = getRPM_TIM_Wheel(&htim4, RB);
 8001148:	2103      	movs	r1, #3
 800114a:	4857      	ldr	r0, [pc, #348]	@ (80012a8 <main+0x428>)
 800114c:	f008 ff36 	bl	8009fbc <getRPM_TIM_Wheel>
 8001150:	eef0 7a40 	vmov.f32	s15, s0
 8001154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001158:	ee17 3a90 	vmov	r3, s15
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b4f      	ldr	r3, [pc, #316]	@ (800129c <main+0x41c>)
 8001160:	80da      	strh	r2, [r3, #6]
	    // RPM[5] = getRPM_TIM_Wheel(&htim2, EXTRA2);

	    // Odometry_Forward_Kinematic(getRPM_to_Rad_s(RPM[0]), getRPM_to_Rad_s(RPM[1]), getRPM_to_Rad_s(RPM[2]), getRPM_to_Rad_s(RPM[3]));
	    // x = get_Vz();
#ifdef ROBOT_1
        if(Str_PS2.attackBtnBit.attack1 == 1){
 8001162:	4b4b      	ldr	r3, [pc, #300]	@ (8001290 <main+0x410>)
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80a3 	beq.w	80012b8 <main+0x438>
        	app_ros_comm_runner();
 8001172:	f00a fb79 	bl	800b868 <app_ros_comm_runner>

        	PID[0] = Motor_Speed_LF((motor_cmdvel_ptr_t.v1/Gear_Ratio), RPM[0]);
 8001176:	4b4d      	ldr	r3, [pc, #308]	@ (80012ac <main+0x42c>)
 8001178:	edd3 6a00 	vldr	s13, [r3]
 800117c:	4b4c      	ldr	r3, [pc, #304]	@ (80012b0 <main+0x430>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800118c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001190:	ee17 3a90 	vmov	r3, s15
 8001194:	b21b      	sxth	r3, r3
 8001196:	4a41      	ldr	r2, [pc, #260]	@ (800129c <main+0x41c>)
 8001198:	f9b2 2000 	ldrsh.w	r2, [r2]
 800119c:	ee07 2a90 	vmov	s15, r2
 80011a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a4:	eeb0 0a67 	vmov.f32	s0, s15
 80011a8:	4618      	mov	r0, r3
 80011aa:	f009 fae7 	bl	800a77c <Motor_Speed_LF>
 80011ae:	eef0 7a40 	vmov.f32	s15, s0
 80011b2:	4b40      	ldr	r3, [pc, #256]	@ (80012b4 <main+0x434>)
 80011b4:	edc3 7a00 	vstr	s15, [r3]
        	PID[1] = Motor_Speed_LB((motor_cmdvel_ptr_t.v2/Gear_Ratio), RPM[1]);
 80011b8:	4b3c      	ldr	r3, [pc, #240]	@ (80012ac <main+0x42c>)
 80011ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80011be:	4b3c      	ldr	r3, [pc, #240]	@ (80012b0 <main+0x430>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d2:	ee17 3a90 	vmov	r3, s15
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4a30      	ldr	r2, [pc, #192]	@ (800129c <main+0x41c>)
 80011da:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80011de:	ee07 2a90 	vmov	s15, r2
 80011e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ea:	4618      	mov	r0, r3
 80011ec:	f009 fb38 	bl	800a860 <Motor_Speed_LB>
 80011f0:	eef0 7a40 	vmov.f32	s15, s0
 80011f4:	4b2f      	ldr	r3, [pc, #188]	@ (80012b4 <main+0x434>)
 80011f6:	edc3 7a01 	vstr	s15, [r3, #4]
        	PID[2] = Motor_Speed_RF((motor_cmdvel_ptr_t.v4/Gear_Ratio), RPM[2]);
 80011fa:	4b2c      	ldr	r3, [pc, #176]	@ (80012ac <main+0x42c>)
 80011fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8001200:	4b2b      	ldr	r3, [pc, #172]	@ (80012b0 <main+0x430>)
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001214:	ee17 3a90 	vmov	r3, s15
 8001218:	b21b      	sxth	r3, r3
 800121a:	4a20      	ldr	r2, [pc, #128]	@ (800129c <main+0x41c>)
 800121c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001220:	ee07 2a90 	vmov	s15, r2
 8001224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001228:	eeb0 0a67 	vmov.f32	s0, s15
 800122c:	4618      	mov	r0, r3
 800122e:	f009 fb89 	bl	800a944 <Motor_Speed_RF>
 8001232:	eef0 7a40 	vmov.f32	s15, s0
 8001236:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <main+0x434>)
 8001238:	edc3 7a02 	vstr	s15, [r3, #8]
        	PID[3] = Motor_Speed_RB((motor_cmdvel_ptr_t.v3/Gear_Ratio), RPM[3]);
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <main+0x42c>)
 800123e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001242:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <main+0x430>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001256:	ee17 3a90 	vmov	r3, s15
 800125a:	b21b      	sxth	r3, r3
 800125c:	4a0f      	ldr	r2, [pc, #60]	@ (800129c <main+0x41c>)
 800125e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001262:	ee07 2a90 	vmov	s15, r2
 8001266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126a:	eeb0 0a67 	vmov.f32	s0, s15
 800126e:	4618      	mov	r0, r3
 8001270:	f009 fbda 	bl	800aa28 <Motor_Speed_RB>
 8001274:	eef0 7a40 	vmov.f32	s15, s0
 8001278:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <main+0x434>)
 800127a:	edc3 7a03 	vstr	s15, [r3, #12]
 800127e:	e0f9      	b.n	8001474 <main+0x5f4>
 8001280:	20000688 	.word	0x20000688
 8001284:	200006b0 	.word	0x200006b0
 8001288:	20000684 	.word	0x20000684
 800128c:	20000620 	.word	0x20000620
 8001290:	200006a8 	.word	0x200006a8
 8001294:	0800fd18 	.word	0x0800fd18
 8001298:	20000398 	.word	0x20000398
 800129c:	20000668 	.word	0x20000668
 80012a0:	20000278 	.word	0x20000278
 80012a4:	200003e0 	.word	0x200003e0
 80012a8:	20000350 	.word	0x20000350
 80012ac:	2000089c 	.word	0x2000089c
 80012b0:	2000000e 	.word	0x2000000e
 80012b4:	20000690 	.word	0x20000690
        }else{
        	Vx = map(Str_PS2.stickValue[0], 100.0f, -100.0f, 2.3f, -2.3f);
 80012b8:	4b70      	ldr	r3, [pc, #448]	@ (800147c <main+0x5fc>)
 80012ba:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c6:	ed9f 2a6e 	vldr	s4, [pc, #440]	@ 8001480 <main+0x600>
 80012ca:	eddf 1a6e 	vldr	s3, [pc, #440]	@ 8001484 <main+0x604>
 80012ce:	ed9f 1a6e 	vldr	s2, [pc, #440]	@ 8001488 <main+0x608>
 80012d2:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 800148c <main+0x60c>
 80012d6:	eeb0 0a67 	vmov.f32	s0, s15
 80012da:	f00a f9ad 	bl	800b638 <map>
 80012de:	eef0 7a40 	vmov.f32	s15, s0
 80012e2:	4b6b      	ldr	r3, [pc, #428]	@ (8001490 <main+0x610>)
 80012e4:	edc3 7a00 	vstr	s15, [r3]
        	Vy = map(Str_PS2.stickValue[1], 100.0f, -100.0f, 2.3f, -2.3f);
 80012e8:	4b64      	ldr	r3, [pc, #400]	@ (800147c <main+0x5fc>)
 80012ea:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f6:	ed9f 2a62 	vldr	s4, [pc, #392]	@ 8001480 <main+0x600>
 80012fa:	eddf 1a62 	vldr	s3, [pc, #392]	@ 8001484 <main+0x604>
 80012fe:	ed9f 1a62 	vldr	s2, [pc, #392]	@ 8001488 <main+0x608>
 8001302:	eddf 0a62 	vldr	s1, [pc, #392]	@ 800148c <main+0x60c>
 8001306:	eeb0 0a67 	vmov.f32	s0, s15
 800130a:	f00a f995 	bl	800b638 <map>
 800130e:	eef0 7a40 	vmov.f32	s15, s0
 8001312:	4b60      	ldr	r3, [pc, #384]	@ (8001494 <main+0x614>)
 8001314:	edc3 7a00 	vstr	s15, [r3]
        	Vz = map(Str_PS2.stickValue[3], 100.0f, -100.0f, 4.0f, -4.0f);
 8001318:	4b58      	ldr	r3, [pc, #352]	@ (800147c <main+0x5fc>)
 800131a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800131e:	ee07 3a90 	vmov	s15, r3
 8001322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001326:	eeb9 2a00 	vmov.f32	s4, #144	@ 0xc0800000 -4.0
 800132a:	eef1 1a00 	vmov.f32	s3, #16	@ 0x40800000  4.0
 800132e:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 8001488 <main+0x608>
 8001332:	eddf 0a56 	vldr	s1, [pc, #344]	@ 800148c <main+0x60c>
 8001336:	eeb0 0a67 	vmov.f32	s0, s15
 800133a:	f00a f97d 	bl	800b638 <map>
 800133e:	eef0 7a40 	vmov.f32	s15, s0
 8001342:	4b55      	ldr	r3, [pc, #340]	@ (8001498 <main+0x618>)
 8001344:	edc3 7a00 	vstr	s15, [r3]

        	//	    Inverse_Kinematic(Vx, Vy, Vz);
        	Inverse_Kinematic_Lock_Direction(Vx ,Vy ,Vz ,Rad);
 8001348:	4b51      	ldr	r3, [pc, #324]	@ (8001490 <main+0x610>)
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	4b51      	ldr	r3, [pc, #324]	@ (8001494 <main+0x614>)
 8001350:	ed93 7a00 	vldr	s14, [r3]
 8001354:	4b50      	ldr	r3, [pc, #320]	@ (8001498 <main+0x618>)
 8001356:	edd3 6a00 	vldr	s13, [r3]
 800135a:	4b50      	ldr	r3, [pc, #320]	@ (800149c <main+0x61c>)
 800135c:	ed93 6a00 	vldr	s12, [r3]
 8001360:	eef0 1a46 	vmov.f32	s3, s12
 8001364:	eeb0 1a66 	vmov.f32	s2, s13
 8001368:	eef0 0a47 	vmov.f32	s1, s14
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	f00a f80a 	bl	800b388 <Inverse_Kinematic_Lock_Direction>

        	PID[0] = Motor_Speed_LF(getRad_s_to_RPM(get_w_LF()), RPM[0]);
 8001374:	f00a f928 	bl	800b5c8 <get_w_LF>
 8001378:	eef0 7a40 	vmov.f32	s15, s0
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	f008 fe02 	bl	8009f88 <getRad_s_to_RPM>
 8001384:	eef0 7a40 	vmov.f32	s15, s0
 8001388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138c:	ee17 3a90 	vmov	r3, s15
 8001390:	b21b      	sxth	r3, r3
 8001392:	4a43      	ldr	r2, [pc, #268]	@ (80014a0 <main+0x620>)
 8001394:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001398:	ee07 2a90 	vmov	s15, r2
 800139c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a0:	eeb0 0a67 	vmov.f32	s0, s15
 80013a4:	4618      	mov	r0, r3
 80013a6:	f009 f9e9 	bl	800a77c <Motor_Speed_LF>
 80013aa:	eef0 7a40 	vmov.f32	s15, s0
 80013ae:	4b3d      	ldr	r3, [pc, #244]	@ (80014a4 <main+0x624>)
 80013b0:	edc3 7a00 	vstr	s15, [r3]
        	PID[1] = Motor_Speed_LB(getRad_s_to_RPM(get_w_LB()), RPM[1]);
 80013b4:	f00a f916 	bl	800b5e4 <get_w_LB>
 80013b8:	eef0 7a40 	vmov.f32	s15, s0
 80013bc:	eeb0 0a67 	vmov.f32	s0, s15
 80013c0:	f008 fde2 	bl	8009f88 <getRad_s_to_RPM>
 80013c4:	eef0 7a40 	vmov.f32	s15, s0
 80013c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013cc:	ee17 3a90 	vmov	r3, s15
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4a33      	ldr	r2, [pc, #204]	@ (80014a0 <main+0x620>)
 80013d4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80013d8:	ee07 2a90 	vmov	s15, r2
 80013dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e0:	eeb0 0a67 	vmov.f32	s0, s15
 80013e4:	4618      	mov	r0, r3
 80013e6:	f009 fa3b 	bl	800a860 <Motor_Speed_LB>
 80013ea:	eef0 7a40 	vmov.f32	s15, s0
 80013ee:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <main+0x624>)
 80013f0:	edc3 7a01 	vstr	s15, [r3, #4]
        	PID[2] = Motor_Speed_RF(getRad_s_to_RPM(get_w_RF()), RPM[2]);
 80013f4:	f00a f904 	bl	800b600 <get_w_RF>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001400:	f008 fdc2 	bl	8009f88 <getRad_s_to_RPM>
 8001404:	eef0 7a40 	vmov.f32	s15, s0
 8001408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140c:	ee17 3a90 	vmov	r3, s15
 8001410:	b21b      	sxth	r3, r3
 8001412:	4a23      	ldr	r2, [pc, #140]	@ (80014a0 <main+0x620>)
 8001414:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001418:	ee07 2a90 	vmov	s15, r2
 800141c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001420:	eeb0 0a67 	vmov.f32	s0, s15
 8001424:	4618      	mov	r0, r3
 8001426:	f009 fa8d 	bl	800a944 <Motor_Speed_RF>
 800142a:	eef0 7a40 	vmov.f32	s15, s0
 800142e:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <main+0x624>)
 8001430:	edc3 7a02 	vstr	s15, [r3, #8]
        	PID[3] = Motor_Speed_RB(getRad_s_to_RPM(get_w_RB()), RPM[3]);
 8001434:	f00a f8f2 	bl	800b61c <get_w_RB>
 8001438:	eef0 7a40 	vmov.f32	s15, s0
 800143c:	eeb0 0a67 	vmov.f32	s0, s15
 8001440:	f008 fda2 	bl	8009f88 <getRad_s_to_RPM>
 8001444:	eef0 7a40 	vmov.f32	s15, s0
 8001448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800144c:	ee17 3a90 	vmov	r3, s15
 8001450:	b21b      	sxth	r3, r3
 8001452:	4a13      	ldr	r2, [pc, #76]	@ (80014a0 <main+0x620>)
 8001454:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001458:	ee07 2a90 	vmov	s15, r2
 800145c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	4618      	mov	r0, r3
 8001466:	f009 fadf 	bl	800aa28 <Motor_Speed_RB>
 800146a:	eef0 7a40 	vmov.f32	s15, s0
 800146e:	4b0d      	ldr	r3, [pc, #52]	@ (80014a4 <main+0x624>)
 8001470:	edc3 7a03 	vstr	s15, [r3, #12]
        }

        Game_Play_ROBOT_1();
 8001474:	f009 fede 	bl	800b234 <Game_Play_ROBOT_1>
	  if ((uwTick - PastTime) > 10) {
 8001478:	e5a0      	b.n	8000fbc <main+0x13c>
 800147a:	bf00      	nop
 800147c:	200006a8 	.word	0x200006a8
 8001480:	c0133333 	.word	0xc0133333
 8001484:	40133333 	.word	0x40133333
 8001488:	c2c80000 	.word	0xc2c80000
 800148c:	42c80000 	.word	0x42c80000
 8001490:	20000674 	.word	0x20000674
 8001494:	20000678 	.word	0x20000678
 8001498:	2000067c 	.word	0x2000067c
 800149c:	20000680 	.word	0x20000680
 80014a0:	20000668 	.word	0x20000668
 80014a4:	20000690 	.word	0x20000690

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	@ 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0320 	add.w	r3, r7, #32
 80014b2:	2230      	movs	r2, #48	@ 0x30
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f00c ffdc 	bl	800e474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	4b28      	ldr	r3, [pc, #160]	@ (8001574 <SystemClock_Config+0xcc>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	4a27      	ldr	r2, [pc, #156]	@ (8001574 <SystemClock_Config+0xcc>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014da:	6413      	str	r3, [r2, #64]	@ 0x40
 80014dc:	4b25      	ldr	r3, [pc, #148]	@ (8001574 <SystemClock_Config+0xcc>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e8:	2300      	movs	r3, #0
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <SystemClock_Config+0xd0>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a21      	ldr	r2, [pc, #132]	@ (8001578 <SystemClock_Config+0xd0>)
 80014f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <SystemClock_Config+0xd0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001504:	2301      	movs	r3, #1
 8001506:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001508:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150e:	2302      	movs	r3, #2
 8001510:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001512:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 7;
 8001518:	2307      	movs	r3, #7
 800151a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800151c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001520:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001522:	2304      	movs	r3, #4
 8001524:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001526:	2308      	movs	r3, #8
 8001528:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152a:	f107 0320 	add.w	r3, r7, #32
 800152e:	4618      	mov	r0, r3
 8001530:	f004 fd6c 	bl	800600c <HAL_RCC_OscConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800153a:	f000 fde7 	bl	800210c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153e:	230f      	movs	r3, #15
 8001540:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001542:	2302      	movs	r3, #2
 8001544:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800154a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800154e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001554:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2103      	movs	r1, #3
 800155c:	4618      	mov	r0, r3
 800155e:	f004 ffcd 	bl	80064fc <HAL_RCC_ClockConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001568:	f000 fdd0 	bl	800210c <Error_Handler>
  }
}
 800156c:	bf00      	nop
 800156e:	3750      	adds	r7, #80	@ 0x50
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000

0800157c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001582:	463b      	mov	r3, r7
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800158e:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <MX_ADC1_Init+0x98>)
 8001590:	4a21      	ldr	r2, [pc, #132]	@ (8001618 <MX_ADC1_Init+0x9c>)
 8001592:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001594:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <MX_ADC1_Init+0x98>)
 8001596:	2200      	movs	r2, #0
 8001598:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800159a:	4b1e      	ldr	r3, [pc, #120]	@ (8001614 <MX_ADC1_Init+0x98>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <MX_ADC1_Init+0x98>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001614 <MX_ADC1_Init+0x98>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ac:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <MX_ADC1_Init+0x98>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <MX_ADC1_Init+0x98>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <MX_ADC1_Init+0x98>)
 80015bc:	4a17      	ldr	r2, [pc, #92]	@ (800161c <MX_ADC1_Init+0xa0>)
 80015be:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c0:	4b14      	ldr	r3, [pc, #80]	@ (8001614 <MX_ADC1_Init+0x98>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015c6:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <MX_ADC1_Init+0x98>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <MX_ADC1_Init+0x98>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <MX_ADC1_Init+0x98>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015da:	480e      	ldr	r0, [pc, #56]	@ (8001614 <MX_ADC1_Init+0x98>)
 80015dc:	f001 fbb6 	bl	8002d4c <HAL_ADC_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80015e6:	f000 fd91 	bl	800210c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015ea:	2304      	movs	r3, #4
 80015ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015ee:	2301      	movs	r3, #1
 80015f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f6:	463b      	mov	r3, r7
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	@ (8001614 <MX_ADC1_Init+0x98>)
 80015fc:	f001 fbea 	bl	8002dd4 <HAL_ADC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001606:	f000 fd81 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000184 	.word	0x20000184
 8001618:	40012000 	.word	0x40012000
 800161c:	0f000001 	.word	0x0f000001

08001620 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <MX_I2C2_Init+0x50>)
 8001626:	4a13      	ldr	r2, [pc, #76]	@ (8001674 <MX_I2C2_Init+0x54>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_I2C2_Init+0x50>)
 800162c:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <MX_I2C2_Init+0x58>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <MX_I2C2_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_I2C2_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_I2C2_Init+0x50>)
 800163e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001642:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <MX_I2C2_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800164a:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_I2C2_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <MX_I2C2_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_I2C2_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	@ (8001670 <MX_I2C2_Init+0x50>)
 800165e:	f002 fa5f 	bl	8003b20 <HAL_I2C_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001668:	f000 fd50 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200001cc 	.word	0x200001cc
 8001674:	40005800 	.word	0x40005800
 8001678:	000186a0 	.word	0x000186a0

0800167c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001680:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <MX_SPI2_Init+0x64>)
 8001682:	4a18      	ldr	r2, [pc, #96]	@ (80016e4 <MX_SPI2_Init+0x68>)
 8001684:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001686:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <MX_SPI2_Init+0x64>)
 8001688:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800168c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800168e:	4b14      	ldr	r3, [pc, #80]	@ (80016e0 <MX_SPI2_Init+0x64>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001694:	4b12      	ldr	r3, [pc, #72]	@ (80016e0 <MX_SPI2_Init+0x64>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169a:	4b11      	ldr	r3, [pc, #68]	@ (80016e0 <MX_SPI2_Init+0x64>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <MX_SPI2_Init+0x64>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	@ (80016e0 <MX_SPI2_Init+0x64>)
 80016a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <MX_SPI2_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b4:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <MX_SPI2_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <MX_SPI2_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c0:	4b07      	ldr	r3, [pc, #28]	@ (80016e0 <MX_SPI2_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <MX_SPI2_Init+0x64>)
 80016c8:	220a      	movs	r2, #10
 80016ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016cc:	4804      	ldr	r0, [pc, #16]	@ (80016e0 <MX_SPI2_Init+0x64>)
 80016ce:	f005 f935 	bl	800693c <HAL_SPI_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016d8:	f000 fd18 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000220 	.word	0x20000220
 80016e4:	40003800 	.word	0x40003800

080016e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	@ 0x30
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	2224      	movs	r2, #36	@ 0x24
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f00c febc 	bl	800e474 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001704:	4b22      	ldr	r3, [pc, #136]	@ (8001790 <MX_TIM1_Init+0xa8>)
 8001706:	4a23      	ldr	r2, [pc, #140]	@ (8001794 <MX_TIM1_Init+0xac>)
 8001708:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800170a:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <MX_TIM1_Init+0xa8>)
 800170c:	2200      	movs	r2, #0
 800170e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001710:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <MX_TIM1_Init+0xa8>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001716:	4b1e      	ldr	r3, [pc, #120]	@ (8001790 <MX_TIM1_Init+0xa8>)
 8001718:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800171c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171e:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <MX_TIM1_Init+0xa8>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001724:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <MX_TIM1_Init+0xa8>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <MX_TIM1_Init+0xa8>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001730:	2303      	movs	r3, #3
 8001732:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001734:	2300      	movs	r3, #0
 8001736:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001738:	2301      	movs	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001744:	2300      	movs	r3, #0
 8001746:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001748:	2301      	movs	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	4619      	mov	r1, r3
 800175a:	480d      	ldr	r0, [pc, #52]	@ (8001790 <MX_TIM1_Init+0xa8>)
 800175c:	f005 fade 	bl	8006d1c <HAL_TIM_Encoder_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001766:	f000 fcd1 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	4619      	mov	r1, r3
 8001776:	4806      	ldr	r0, [pc, #24]	@ (8001790 <MX_TIM1_Init+0xa8>)
 8001778:	f005 ff48 	bl	800760c <HAL_TIMEx_MasterConfigSynchronization>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001782:	f000 fcc3 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	3730      	adds	r7, #48	@ 0x30
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000278 	.word	0x20000278
 8001794:	40010000 	.word	0x40010000

08001798 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	@ 0x30
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	2224      	movs	r2, #36	@ 0x24
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f00c fe64 	bl	800e474 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017b4:	4b21      	ldr	r3, [pc, #132]	@ (800183c <MX_TIM2_Init+0xa4>)
 80017b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017bc:	4b1f      	ldr	r3, [pc, #124]	@ (800183c <MX_TIM2_Init+0xa4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c2:	4b1e      	ldr	r3, [pc, #120]	@ (800183c <MX_TIM2_Init+0xa4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80017c8:	4b1c      	ldr	r3, [pc, #112]	@ (800183c <MX_TIM2_Init+0xa4>)
 80017ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <MX_TIM2_Init+0xa4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d6:	4b19      	ldr	r3, [pc, #100]	@ (800183c <MX_TIM2_Init+0xa4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017dc:	2303      	movs	r3, #3
 80017de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017e0:	2300      	movs	r3, #0
 80017e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017e4:	2301      	movs	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017f4:	2301      	movs	r3, #1
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	4619      	mov	r1, r3
 8001806:	480d      	ldr	r0, [pc, #52]	@ (800183c <MX_TIM2_Init+0xa4>)
 8001808:	f005 fa88 	bl	8006d1c <HAL_TIM_Encoder_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001812:	f000 fc7b 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4806      	ldr	r0, [pc, #24]	@ (800183c <MX_TIM2_Init+0xa4>)
 8001824:	f005 fef2 	bl	800760c <HAL_TIMEx_MasterConfigSynchronization>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800182e:	f000 fc6d 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	3730      	adds	r7, #48	@ 0x30
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200002c0 	.word	0x200002c0

08001840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08c      	sub	sp, #48	@ 0x30
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	2224      	movs	r2, #36	@ 0x24
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f00c fe10 	bl	800e474 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800185c:	4b20      	ldr	r3, [pc, #128]	@ (80018e0 <MX_TIM3_Init+0xa0>)
 800185e:	4a21      	ldr	r2, [pc, #132]	@ (80018e4 <MX_TIM3_Init+0xa4>)
 8001860:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001862:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <MX_TIM3_Init+0xa0>)
 8001864:	2200      	movs	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b1d      	ldr	r3, [pc, #116]	@ (80018e0 <MX_TIM3_Init+0xa0>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800186e:	4b1c      	ldr	r3, [pc, #112]	@ (80018e0 <MX_TIM3_Init+0xa0>)
 8001870:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001874:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b1a      	ldr	r3, [pc, #104]	@ (80018e0 <MX_TIM3_Init+0xa0>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187c:	4b18      	ldr	r3, [pc, #96]	@ (80018e0 <MX_TIM3_Init+0xa0>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001882:	2303      	movs	r3, #3
 8001884:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001886:	2300      	movs	r3, #0
 8001888:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800188a:	2301      	movs	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800189a:	2301      	movs	r3, #1
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800189e:	2300      	movs	r3, #0
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	4619      	mov	r1, r3
 80018ac:	480c      	ldr	r0, [pc, #48]	@ (80018e0 <MX_TIM3_Init+0xa0>)
 80018ae:	f005 fa35 	bl	8006d1c <HAL_TIM_Encoder_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80018b8:	f000 fc28 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4805      	ldr	r0, [pc, #20]	@ (80018e0 <MX_TIM3_Init+0xa0>)
 80018ca:	f005 fe9f 	bl	800760c <HAL_TIMEx_MasterConfigSynchronization>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80018d4:	f000 fc1a 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	3730      	adds	r7, #48	@ 0x30
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000308 	.word	0x20000308
 80018e4:	40000400 	.word	0x40000400

080018e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	@ 0x30
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	2224      	movs	r2, #36	@ 0x24
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f00c fdbc 	bl	800e474 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001904:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <MX_TIM4_Init+0xa0>)
 8001906:	4a21      	ldr	r2, [pc, #132]	@ (800198c <MX_TIM4_Init+0xa4>)
 8001908:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800190a:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <MX_TIM4_Init+0xa0>)
 800190c:	2200      	movs	r2, #0
 800190e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001910:	4b1d      	ldr	r3, [pc, #116]	@ (8001988 <MX_TIM4_Init+0xa0>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001916:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <MX_TIM4_Init+0xa0>)
 8001918:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800191c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191e:	4b1a      	ldr	r3, [pc, #104]	@ (8001988 <MX_TIM4_Init+0xa0>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001924:	4b18      	ldr	r3, [pc, #96]	@ (8001988 <MX_TIM4_Init+0xa0>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800192a:	2303      	movs	r3, #3
 800192c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001932:	2301      	movs	r3, #1
 8001934:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001942:	2301      	movs	r3, #1
 8001944:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001946:	2300      	movs	r3, #0
 8001948:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	4619      	mov	r1, r3
 8001954:	480c      	ldr	r0, [pc, #48]	@ (8001988 <MX_TIM4_Init+0xa0>)
 8001956:	f005 f9e1 	bl	8006d1c <HAL_TIM_Encoder_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001960:	f000 fbd4 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4619      	mov	r1, r3
 8001970:	4805      	ldr	r0, [pc, #20]	@ (8001988 <MX_TIM4_Init+0xa0>)
 8001972:	f005 fe4b 	bl	800760c <HAL_TIMEx_MasterConfigSynchronization>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800197c:	f000 fbc6 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	3730      	adds	r7, #48	@ 0x30
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000350 	.word	0x20000350
 800198c:	40000800 	.word	0x40000800

08001990 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	@ 0x30
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	2224      	movs	r2, #36	@ 0x24
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f00c fd68 	bl	800e474 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a4:	1d3b      	adds	r3, r7, #4
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019ac:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <MX_TIM5_Init+0xa0>)
 80019ae:	4a21      	ldr	r2, [pc, #132]	@ (8001a34 <MX_TIM5_Init+0xa4>)
 80019b0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80019b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <MX_TIM5_Init+0xa0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <MX_TIM5_Init+0xa0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80019be:	4b1c      	ldr	r3, [pc, #112]	@ (8001a30 <MX_TIM5_Init+0xa0>)
 80019c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019c4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <MX_TIM5_Init+0xa0>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019cc:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <MX_TIM5_Init+0xa0>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019d2:	2303      	movs	r3, #3
 80019d4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019da:	2301      	movs	r3, #1
 80019dc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019ea:	2301      	movs	r3, #1
 80019ec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	4619      	mov	r1, r3
 80019fc:	480c      	ldr	r0, [pc, #48]	@ (8001a30 <MX_TIM5_Init+0xa0>)
 80019fe:	f005 f98d 	bl	8006d1c <HAL_TIM_Encoder_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001a08:	f000 fb80 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	@ (8001a30 <MX_TIM5_Init+0xa0>)
 8001a1a:	f005 fdf7 	bl	800760c <HAL_TIMEx_MasterConfigSynchronization>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001a24:	f000 fb72 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	3730      	adds	r7, #48	@ 0x30
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000398 	.word	0x20000398
 8001a34:	40000c00 	.word	0x40000c00

08001a38 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08c      	sub	sp, #48	@ 0x30
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a3e:	f107 030c 	add.w	r3, r7, #12
 8001a42:	2224      	movs	r2, #36	@ 0x24
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f00c fd14 	bl	800e474 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a54:	4b22      	ldr	r3, [pc, #136]	@ (8001ae0 <MX_TIM8_Init+0xa8>)
 8001a56:	4a23      	ldr	r2, [pc, #140]	@ (8001ae4 <MX_TIM8_Init+0xac>)
 8001a58:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001a5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ae0 <MX_TIM8_Init+0xa8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae0 <MX_TIM8_Init+0xa8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001a66:	4b1e      	ldr	r3, [pc, #120]	@ (8001ae0 <MX_TIM8_Init+0xa8>)
 8001a68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a6c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <MX_TIM8_Init+0xa8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <MX_TIM8_Init+0xa8>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <MX_TIM8_Init+0xa8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a80:	2303      	movs	r3, #3
 8001a82:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a94:	2300      	movs	r3, #0
 8001a96:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480d      	ldr	r0, [pc, #52]	@ (8001ae0 <MX_TIM8_Init+0xa8>)
 8001aac:	f005 f936 	bl	8006d1c <HAL_TIM_Encoder_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001ab6:	f000 fb29 	bl	800210c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4806      	ldr	r0, [pc, #24]	@ (8001ae0 <MX_TIM8_Init+0xa8>)
 8001ac8:	f005 fda0 	bl	800760c <HAL_TIMEx_MasterConfigSynchronization>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001ad2:	f000 fb1b 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	3730      	adds	r7, #48	@ 0x30
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200003e0 	.word	0x200003e0
 8001ae4:	40010400 	.word	0x40010400

08001ae8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
 8001afc:	615a      	str	r2, [r3, #20]
 8001afe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001b00:	4b1f      	ldr	r3, [pc, #124]	@ (8001b80 <MX_TIM9_Init+0x98>)
 8001b02:	4a20      	ldr	r2, [pc, #128]	@ (8001b84 <MX_TIM9_Init+0x9c>)
 8001b04:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2-1;
 8001b06:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <MX_TIM9_Init+0x98>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001b80 <MX_TIM9_Init+0x98>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096-1;
 8001b12:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <MX_TIM9_Init+0x98>)
 8001b14:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001b18:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <MX_TIM9_Init+0x98>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b20:	4b17      	ldr	r3, [pc, #92]	@ (8001b80 <MX_TIM9_Init+0x98>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001b26:	4816      	ldr	r0, [pc, #88]	@ (8001b80 <MX_TIM9_Init+0x98>)
 8001b28:	f004 ffe0 	bl	8006aec <HAL_TIM_PWM_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001b32:	f000 faeb 	bl	800210c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b36:	2360      	movs	r3, #96	@ 0x60
 8001b38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480c      	ldr	r0, [pc, #48]	@ (8001b80 <MX_TIM9_Init+0x98>)
 8001b4e:	f005 fa19 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001b58:	f000 fad8 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2204      	movs	r2, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	4807      	ldr	r0, [pc, #28]	@ (8001b80 <MX_TIM9_Init+0x98>)
 8001b64:	f005 fa0e 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001b6e:	f000 facd 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001b72:	4803      	ldr	r0, [pc, #12]	@ (8001b80 <MX_TIM9_Init+0x98>)
 8001b74:	f000 fe1a 	bl	80027ac <HAL_TIM_MspPostInit>

}
 8001b78:	bf00      	nop
 8001b7a:	3720      	adds	r7, #32
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000428 	.word	0x20000428
 8001b84:	40014000 	.word	0x40014000

08001b88 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
 8001b9c:	615a      	str	r2, [r3, #20]
 8001b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <MX_TIM10_Init+0x94>)
 8001ba2:	4a1f      	ldr	r2, [pc, #124]	@ (8001c20 <MX_TIM10_Init+0x98>)
 8001ba4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2-1;
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <MX_TIM10_Init+0x94>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <MX_TIM10_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4096-1;
 8001bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c1c <MX_TIM10_Init+0x94>)
 8001bb4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001bb8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bba:	4b18      	ldr	r3, [pc, #96]	@ (8001c1c <MX_TIM10_Init+0x94>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	@ (8001c1c <MX_TIM10_Init+0x94>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001bc6:	4815      	ldr	r0, [pc, #84]	@ (8001c1c <MX_TIM10_Init+0x94>)
 8001bc8:	f004 ff41 	bl	8006a4e <HAL_TIM_Base_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001bd2:	f000 fa9b 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001bd6:	4811      	ldr	r0, [pc, #68]	@ (8001c1c <MX_TIM10_Init+0x94>)
 8001bd8:	f004 ff88 	bl	8006aec <HAL_TIM_PWM_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001be2:	f000 fa93 	bl	800210c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be6:	2360      	movs	r3, #96	@ 0x60
 8001be8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4807      	ldr	r0, [pc, #28]	@ (8001c1c <MX_TIM10_Init+0x94>)
 8001bfe:	f005 f9c1 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001c08:	f000 fa80 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001c0c:	4803      	ldr	r0, [pc, #12]	@ (8001c1c <MX_TIM10_Init+0x94>)
 8001c0e:	f000 fdcd 	bl	80027ac <HAL_TIM_MspPostInit>

}
 8001c12:	bf00      	nop
 8001c14:	3720      	adds	r7, #32
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000470 	.word	0x20000470
 8001c20:	40014400 	.word	0x40014400

08001c24 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
 8001c38:	615a      	str	r2, [r3, #20]
 8001c3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <MX_TIM11_Init+0x94>)
 8001c3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cbc <MX_TIM11_Init+0x98>)
 8001c40:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2-1;
 8001c42:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb8 <MX_TIM11_Init+0x94>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c48:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <MX_TIM11_Init+0x94>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4096-1;
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb8 <MX_TIM11_Init+0x94>)
 8001c50:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001c54:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c56:	4b18      	ldr	r3, [pc, #96]	@ (8001cb8 <MX_TIM11_Init+0x94>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5c:	4b16      	ldr	r3, [pc, #88]	@ (8001cb8 <MX_TIM11_Init+0x94>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c62:	4815      	ldr	r0, [pc, #84]	@ (8001cb8 <MX_TIM11_Init+0x94>)
 8001c64:	f004 fef3 	bl	8006a4e <HAL_TIM_Base_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001c6e:	f000 fa4d 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001c72:	4811      	ldr	r0, [pc, #68]	@ (8001cb8 <MX_TIM11_Init+0x94>)
 8001c74:	f004 ff3a 	bl	8006aec <HAL_TIM_PWM_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001c7e:	f000 fa45 	bl	800210c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c82:	2360      	movs	r3, #96	@ 0x60
 8001c84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	2200      	movs	r2, #0
 8001c96:	4619      	mov	r1, r3
 8001c98:	4807      	ldr	r0, [pc, #28]	@ (8001cb8 <MX_TIM11_Init+0x94>)
 8001c9a:	f005 f973 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001ca4:	f000 fa32 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001ca8:	4803      	ldr	r0, [pc, #12]	@ (8001cb8 <MX_TIM11_Init+0x94>)
 8001caa:	f000 fd7f 	bl	80027ac <HAL_TIM_MspPostInit>

}
 8001cae:	bf00      	nop
 8001cb0:	3720      	adds	r7, #32
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200004b8 	.word	0x200004b8
 8001cbc:	40014800 	.word	0x40014800

08001cc0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
 8001cd4:	615a      	str	r2, [r3, #20]
 8001cd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d58 <MX_TIM12_Init+0x98>)
 8001cda:	4a20      	ldr	r2, [pc, #128]	@ (8001d5c <MX_TIM12_Init+0x9c>)
 8001cdc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2-1;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <MX_TIM12_Init+0x98>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d58 <MX_TIM12_Init+0x98>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4096-1;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <MX_TIM12_Init+0x98>)
 8001cec:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001cf0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <MX_TIM12_Init+0x98>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf8:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <MX_TIM12_Init+0x98>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001cfe:	4816      	ldr	r0, [pc, #88]	@ (8001d58 <MX_TIM12_Init+0x98>)
 8001d00:	f004 fef4 	bl	8006aec <HAL_TIM_PWM_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001d0a:	f000 f9ff 	bl	800210c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0e:	2360      	movs	r3, #96	@ 0x60
 8001d10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2200      	movs	r2, #0
 8001d22:	4619      	mov	r1, r3
 8001d24:	480c      	ldr	r0, [pc, #48]	@ (8001d58 <MX_TIM12_Init+0x98>)
 8001d26:	f005 f92d 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001d30:	f000 f9ec 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2204      	movs	r2, #4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4807      	ldr	r0, [pc, #28]	@ (8001d58 <MX_TIM12_Init+0x98>)
 8001d3c:	f005 f922 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001d46:	f000 f9e1 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001d4a:	4803      	ldr	r0, [pc, #12]	@ (8001d58 <MX_TIM12_Init+0x98>)
 8001d4c:	f000 fd2e 	bl	80027ac <HAL_TIM_MspPostInit>

}
 8001d50:	bf00      	nop
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000500 	.word	0x20000500
 8001d5c:	40001800 	.word	0x40001800

08001d60 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
 8001d74:	615a      	str	r2, [r3, #20]
 8001d76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001d78:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <MX_TIM13_Init+0x94>)
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001df8 <MX_TIM13_Init+0x98>)
 8001d7c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2-1;
 8001d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001df4 <MX_TIM13_Init+0x94>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <MX_TIM13_Init+0x94>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4096-1;
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <MX_TIM13_Init+0x94>)
 8001d8c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001d90:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b18      	ldr	r3, [pc, #96]	@ (8001df4 <MX_TIM13_Init+0x94>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d98:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <MX_TIM13_Init+0x94>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001d9e:	4815      	ldr	r0, [pc, #84]	@ (8001df4 <MX_TIM13_Init+0x94>)
 8001da0:	f004 fe55 	bl	8006a4e <HAL_TIM_Base_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001daa:	f000 f9af 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001dae:	4811      	ldr	r0, [pc, #68]	@ (8001df4 <MX_TIM13_Init+0x94>)
 8001db0:	f004 fe9c 	bl	8006aec <HAL_TIM_PWM_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001dba:	f000 f9a7 	bl	800210c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dbe:	2360      	movs	r3, #96	@ 0x60
 8001dc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4807      	ldr	r0, [pc, #28]	@ (8001df4 <MX_TIM13_Init+0x94>)
 8001dd6:	f005 f8d5 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001de0:	f000 f994 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001de4:	4803      	ldr	r0, [pc, #12]	@ (8001df4 <MX_TIM13_Init+0x94>)
 8001de6:	f000 fce1 	bl	80027ac <HAL_TIM_MspPostInit>

}
 8001dea:	bf00      	nop
 8001dec:	3720      	adds	r7, #32
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000548 	.word	0x20000548
 8001df8:	40001c00 	.word	0x40001c00

08001dfc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
 8001e10:	615a      	str	r2, [r3, #20]
 8001e12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001e14:	4b1e      	ldr	r3, [pc, #120]	@ (8001e90 <MX_TIM14_Init+0x94>)
 8001e16:	4a1f      	ldr	r2, [pc, #124]	@ (8001e94 <MX_TIM14_Init+0x98>)
 8001e18:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2-1;
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <MX_TIM14_Init+0x94>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	4b1b      	ldr	r3, [pc, #108]	@ (8001e90 <MX_TIM14_Init+0x94>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4096-1;
 8001e26:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <MX_TIM14_Init+0x94>)
 8001e28:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001e2c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2e:	4b18      	ldr	r3, [pc, #96]	@ (8001e90 <MX_TIM14_Init+0x94>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e34:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <MX_TIM14_Init+0x94>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e3a:	4815      	ldr	r0, [pc, #84]	@ (8001e90 <MX_TIM14_Init+0x94>)
 8001e3c:	f004 fe07 	bl	8006a4e <HAL_TIM_Base_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001e46:	f000 f961 	bl	800210c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001e4a:	4811      	ldr	r0, [pc, #68]	@ (8001e90 <MX_TIM14_Init+0x94>)
 8001e4c:	f004 fe4e 	bl	8006aec <HAL_TIM_PWM_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001e56:	f000 f959 	bl	800210c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e5a:	2360      	movs	r3, #96	@ 0x60
 8001e5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4807      	ldr	r0, [pc, #28]	@ (8001e90 <MX_TIM14_Init+0x94>)
 8001e72:	f005 f887 	bl	8006f84 <HAL_TIM_PWM_ConfigChannel>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001e7c:	f000 f946 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001e80:	4803      	ldr	r0, [pc, #12]	@ (8001e90 <MX_TIM14_Init+0x94>)
 8001e82:	f000 fc93 	bl	80027ac <HAL_TIM_MspPostInit>

}
 8001e86:	bf00      	nop
 8001e88:	3720      	adds	r7, #32
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000590 	.word	0x20000590
 8001e94:	40002000 	.word	0x40002000

08001e98 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <MX_UART4_Init+0x4c>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	@ (8001ee8 <MX_UART4_Init+0x50>)
 8001ea0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	@ (8001ee4 <MX_UART4_Init+0x4c>)
 8001ea4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ea8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <MX_UART4_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee4 <MX_UART4_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <MX_UART4_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <MX_UART4_Init+0x4c>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <MX_UART4_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	@ (8001ee4 <MX_UART4_Init+0x4c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ece:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <MX_UART4_Init+0x4c>)
 8001ed0:	f005 fc18 	bl	8007704 <HAL_UART_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001eda:	f000 f917 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200005d8 	.word	0x200005d8
 8001ee8:	40004c00 	.word	0x40004c00

08001eec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	@ (8001f3c <MX_USART2_UART_Init+0x50>)
 8001ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001ef8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001f10:	4b09      	ldr	r3, [pc, #36]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f12:	2204      	movs	r2, #4
 8001f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f16:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f22:	4805      	ldr	r0, [pc, #20]	@ (8001f38 <MX_USART2_UART_Init+0x4c>)
 8001f24:	f005 fbee 	bl	8007704 <HAL_UART_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f2e:	f000 f8ed 	bl	800210c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000620 	.word	0x20000620
 8001f3c:	40004400 	.word	0x40004400

08001f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08c      	sub	sp, #48	@ 0x30
 8001f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	4b54      	ldr	r3, [pc, #336]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	4a53      	ldr	r2, [pc, #332]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001f60:	f043 0310 	orr.w	r3, r3, #16
 8001f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f66:	4b51      	ldr	r3, [pc, #324]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	61bb      	str	r3, [r7, #24]
 8001f70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	4b4d      	ldr	r3, [pc, #308]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	4a4c      	ldr	r2, [pc, #304]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f82:	4b4a      	ldr	r3, [pc, #296]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	4b46      	ldr	r3, [pc, #280]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a45      	ldr	r2, [pc, #276]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b43      	ldr	r3, [pc, #268]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	4b3f      	ldr	r3, [pc, #252]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a3e      	ldr	r2, [pc, #248]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b3c      	ldr	r3, [pc, #240]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60bb      	str	r3, [r7, #8]
 8001fca:	4b38      	ldr	r3, [pc, #224]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	4a37      	ldr	r2, [pc, #220]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001fd0:	f043 0302 	orr.w	r3, r3, #2
 8001fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd6:	4b35      	ldr	r3, [pc, #212]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	4b31      	ldr	r3, [pc, #196]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	4a30      	ldr	r2, [pc, #192]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001fec:	f043 0308 	orr.w	r3, r3, #8
 8001ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80020ac <MX_GPIO_Init+0x16c>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001ffe:	2200      	movs	r2, #0
 8002000:	f24b 518f 	movw	r1, #46479	@ 0xb58f
 8002004:	482a      	ldr	r0, [pc, #168]	@ (80020b0 <MX_GPIO_Init+0x170>)
 8002006:	f001 fd71 	bl	8003aec <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	f242 0120 	movw	r1, #8224	@ 0x2020
 8002010:	4828      	ldr	r0, [pc, #160]	@ (80020b4 <MX_GPIO_Init+0x174>)
 8002012:	f001 fd6b 	bl	8003aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	2101      	movs	r1, #1
 800201a:	4827      	ldr	r0, [pc, #156]	@ (80020b8 <MX_GPIO_Init+0x178>)
 800201c:	f001 fd66 	bl	8003aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RB_DIGI_R_GPIO_Port, RB_DIGI_R_Pin, GPIO_PIN_RESET);
 8002020:	2200      	movs	r2, #0
 8002022:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002026:	4825      	ldr	r0, [pc, #148]	@ (80020bc <MX_GPIO_Init+0x17c>)
 8002028:	f001 fd60 	bl	8003aec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_1_Pin CE_2_Pin PE7 PE8
                           PE10 LB_DIGI_R_Pin PE13 PE15
                           EXTRA2_DIGI_R_Pin RF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 800202c:	f24b 538f 	movw	r3, #46479	@ 0xb58f
 8002030:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203a:	2300      	movs	r3, #0
 800203c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	4619      	mov	r1, r3
 8002044:	481a      	ldr	r0, [pc, #104]	@ (80020b0 <MX_GPIO_Init+0x170>)
 8002046:	f001 fab9 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTRA1_DIGI_R_Pin LF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin;
 800204a:	f242 0320 	movw	r3, #8224	@ 0x2020
 800204e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002058:	2300      	movs	r3, #0
 800205a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	4619      	mov	r1, r3
 8002062:	4814      	ldr	r0, [pc, #80]	@ (80020b4 <MX_GPIO_Init+0x174>)
 8002064:	f001 faaa 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002068:	2301      	movs	r3, #1
 800206a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800206c:	2301      	movs	r3, #1
 800206e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	4619      	mov	r1, r3
 800207e:	480e      	ldr	r0, [pc, #56]	@ (80020b8 <MX_GPIO_Init+0x178>)
 8002080:	f001 fa9c 	bl	80035bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RB_DIGI_R_Pin */
  GPIO_InitStruct.Pin = RB_DIGI_R_Pin;
 8002084:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800208a:	2301      	movs	r3, #1
 800208c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2300      	movs	r3, #0
 8002094:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RB_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 8002096:	f107 031c 	add.w	r3, r7, #28
 800209a:	4619      	mov	r1, r3
 800209c:	4807      	ldr	r0, [pc, #28]	@ (80020bc <MX_GPIO_Init+0x17c>)
 800209e:	f001 fa8d 	bl	80035bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020a2:	bf00      	nop
 80020a4:	3730      	adds	r7, #48	@ 0x30
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40020800 	.word	0x40020800
 80020b8:	40020400 	.word	0x40020400
 80020bc:	40020c00 	.word	0x40020c00

080020c0 <HAL_UART_RxCpltCallback>:
//        HAL_UART_Receive_IT(&huart2, (uint8_t*) &temp_buffer, 1);
//    }
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
     if (huart->Instance == USART2){
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a09      	ldr	r2, [pc, #36]	@ (80020f4 <HAL_UART_RxCpltCallback+0x34>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d10b      	bne.n	80020ea <HAL_UART_RxCpltCallback+0x2a>
        last_uart_data_time = uwTick;
 80020d2:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <HAL_UART_RxCpltCallback+0x38>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a09      	ldr	r2, [pc, #36]	@ (80020fc <HAL_UART_RxCpltCallback+0x3c>)
 80020d8:	6013      	str	r3, [r2, #0]
        uart_resetting = 0;
 80020da:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <HAL_UART_RxCpltCallback+0x40>)
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&Str_PS2, sizeof(Str_PS2));
 80020e0:	2208      	movs	r2, #8
 80020e2:	4908      	ldr	r1, [pc, #32]	@ (8002104 <HAL_UART_RxCpltCallback+0x44>)
 80020e4:	4808      	ldr	r0, [pc, #32]	@ (8002108 <HAL_UART_RxCpltCallback+0x48>)
 80020e6:	f005 fb8f 	bl	8007808 <HAL_UART_Receive_IT>
     }
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40004400 	.word	0x40004400
 80020f8:	200006b0 	.word	0x200006b0
 80020fc:	20000684 	.word	0x20000684
 8002100:	20000688 	.word	0x20000688
 8002104:	200006a8 	.word	0x200006a8
 8002108:	20000620 	.word	0x20000620

0800210c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002110:	b672      	cpsid	i
}
 8002112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <Error_Handler+0x8>

08002118 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	607b      	str	r3, [r7, #4]
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <HAL_MspInit+0x4c>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	4a0f      	ldr	r2, [pc, #60]	@ (8002164 <HAL_MspInit+0x4c>)
 8002128:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800212c:	6453      	str	r3, [r2, #68]	@ 0x44
 800212e:	4b0d      	ldr	r3, [pc, #52]	@ (8002164 <HAL_MspInit+0x4c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <HAL_MspInit+0x4c>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	4a08      	ldr	r2, [pc, #32]	@ (8002164 <HAL_MspInit+0x4c>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002148:	6413      	str	r3, [r2, #64]	@ 0x40
 800214a:	4b06      	ldr	r3, [pc, #24]	@ (8002164 <HAL_MspInit+0x4c>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002152:	603b      	str	r3, [r7, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800

08002168 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	@ 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a24      	ldr	r2, [pc, #144]	@ (8002218 <HAL_ADC_MspInit+0xb0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d141      	bne.n	800220e <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	4b23      	ldr	r3, [pc, #140]	@ (800221c <HAL_ADC_MspInit+0xb4>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002192:	4a22      	ldr	r2, [pc, #136]	@ (800221c <HAL_ADC_MspInit+0xb4>)
 8002194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002198:	6453      	str	r3, [r2, #68]	@ 0x44
 800219a:	4b20      	ldr	r3, [pc, #128]	@ (800221c <HAL_ADC_MspInit+0xb4>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800219e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4b1c      	ldr	r3, [pc, #112]	@ (800221c <HAL_ADC_MspInit+0xb4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	4a1b      	ldr	r2, [pc, #108]	@ (800221c <HAL_ADC_MspInit+0xb4>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b6:	4b19      	ldr	r3, [pc, #100]	@ (800221c <HAL_ADC_MspInit+0xb4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	4b15      	ldr	r3, [pc, #84]	@ (800221c <HAL_ADC_MspInit+0xb4>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	4a14      	ldr	r2, [pc, #80]	@ (800221c <HAL_ADC_MspInit+0xb4>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d2:	4b12      	ldr	r3, [pc, #72]	@ (800221c <HAL_ADC_MspInit+0xb4>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	60bb      	str	r3, [r7, #8]
 80021dc:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021de:	2303      	movs	r3, #3
 80021e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e2:	2303      	movs	r3, #3
 80021e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	4619      	mov	r1, r3
 80021f0:	480b      	ldr	r0, [pc, #44]	@ (8002220 <HAL_ADC_MspInit+0xb8>)
 80021f2:	f001 f9e3 	bl	80035bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021f6:	2330      	movs	r3, #48	@ 0x30
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021fa:	2303      	movs	r3, #3
 80021fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	4806      	ldr	r0, [pc, #24]	@ (8002224 <HAL_ADC_MspInit+0xbc>)
 800220a:	f001 f9d7 	bl	80035bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3728      	adds	r7, #40	@ 0x28
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40012000 	.word	0x40012000
 800221c:	40023800 	.word	0x40023800
 8002220:	40020800 	.word	0x40020800
 8002224:	40020000 	.word	0x40020000

08002228 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a19      	ldr	r2, [pc, #100]	@ (80022ac <HAL_I2C_MspInit+0x84>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d12c      	bne.n	80022a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <HAL_I2C_MspInit+0x88>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a17      	ldr	r2, [pc, #92]	@ (80022b0 <HAL_I2C_MspInit+0x88>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <HAL_I2C_MspInit+0x88>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002266:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800226a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800226c:	2312      	movs	r3, #18
 800226e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002278:	2304      	movs	r3, #4
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4619      	mov	r1, r3
 8002282:	480c      	ldr	r0, [pc, #48]	@ (80022b4 <HAL_I2C_MspInit+0x8c>)
 8002284:	f001 f99a 	bl	80035bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <HAL_I2C_MspInit+0x88>)
 800228e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002290:	4a07      	ldr	r2, [pc, #28]	@ (80022b0 <HAL_I2C_MspInit+0x88>)
 8002292:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002296:	6413      	str	r3, [r2, #64]	@ 0x40
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_I2C_MspInit+0x88>)
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80022a4:	bf00      	nop
 80022a6:	3728      	adds	r7, #40	@ 0x28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40005800 	.word	0x40005800
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020400 	.word	0x40020400

080022b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a28      	ldr	r2, [pc, #160]	@ (8002378 <HAL_SPI_MspInit+0xc0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d14a      	bne.n	8002370 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b27      	ldr	r3, [pc, #156]	@ (800237c <HAL_SPI_MspInit+0xc4>)
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	4a26      	ldr	r2, [pc, #152]	@ (800237c <HAL_SPI_MspInit+0xc4>)
 80022e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ea:	4b24      	ldr	r3, [pc, #144]	@ (800237c <HAL_SPI_MspInit+0xc4>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b20      	ldr	r3, [pc, #128]	@ (800237c <HAL_SPI_MspInit+0xc4>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fe:	4a1f      	ldr	r2, [pc, #124]	@ (800237c <HAL_SPI_MspInit+0xc4>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6313      	str	r3, [r2, #48]	@ 0x30
 8002306:	4b1d      	ldr	r3, [pc, #116]	@ (800237c <HAL_SPI_MspInit+0xc4>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	4b19      	ldr	r3, [pc, #100]	@ (800237c <HAL_SPI_MspInit+0xc4>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	4a18      	ldr	r2, [pc, #96]	@ (800237c <HAL_SPI_MspInit+0xc4>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	6313      	str	r3, [r2, #48]	@ 0x30
 8002322:	4b16      	ldr	r3, [pc, #88]	@ (800237c <HAL_SPI_MspInit+0xc4>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800232e:	230c      	movs	r3, #12
 8002330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233a:	2303      	movs	r3, #3
 800233c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800233e:	2305      	movs	r3, #5
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002342:	f107 0314 	add.w	r3, r7, #20
 8002346:	4619      	mov	r1, r3
 8002348:	480d      	ldr	r0, [pc, #52]	@ (8002380 <HAL_SPI_MspInit+0xc8>)
 800234a:	f001 f937 	bl	80035bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800234e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235c:	2303      	movs	r3, #3
 800235e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002360:	2305      	movs	r3, #5
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	4619      	mov	r1, r3
 800236a:	4806      	ldr	r0, [pc, #24]	@ (8002384 <HAL_SPI_MspInit+0xcc>)
 800236c:	f001 f926 	bl	80035bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002370:	bf00      	nop
 8002372:	3728      	adds	r7, #40	@ 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40003800 	.word	0x40003800
 800237c:	40023800 	.word	0x40023800
 8002380:	40020800 	.word	0x40020800
 8002384:	40020400 	.word	0x40020400

08002388 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b094      	sub	sp, #80	@ 0x50
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a8c      	ldr	r2, [pc, #560]	@ (80025d8 <HAL_TIM_Encoder_MspInit+0x250>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d12d      	bne.n	8002406 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023ae:	4b8b      	ldr	r3, [pc, #556]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4a8a      	ldr	r2, [pc, #552]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ba:	4b88      	ldr	r3, [pc, #544]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80023ca:	4b84      	ldr	r3, [pc, #528]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ce:	4a83      	ldr	r2, [pc, #524]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 80023d0:	f043 0310 	orr.w	r3, r3, #16
 80023d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d6:	4b81      	ldr	r3, [pc, #516]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	637b      	str	r3, [r7, #52]	@ 0x34
 80023e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80023e2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80023e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	2302      	movs	r3, #2
 80023ea:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023ec:	2302      	movs	r3, #2
 80023ee:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f0:	2303      	movs	r3, #3
 80023f2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023f4:	2301      	movs	r3, #1
 80023f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023f8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80023fc:	4619      	mov	r1, r3
 80023fe:	4878      	ldr	r0, [pc, #480]	@ (80025e0 <HAL_TIM_Encoder_MspInit+0x258>)
 8002400:	f001 f8dc 	bl	80035bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002404:	e12b      	b.n	800265e <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800240e:	d14b      	bne.n	80024a8 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002410:	2300      	movs	r3, #0
 8002412:	633b      	str	r3, [r7, #48]	@ 0x30
 8002414:	4b71      	ldr	r3, [pc, #452]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002418:	4a70      	ldr	r2, [pc, #448]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002420:	4b6e      	ldr	r3, [pc, #440]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	633b      	str	r3, [r7, #48]	@ 0x30
 800242a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	2300      	movs	r3, #0
 800242e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002430:	4b6a      	ldr	r3, [pc, #424]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002434:	4a69      	ldr	r2, [pc, #420]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6313      	str	r3, [r2, #48]	@ 0x30
 800243c:	4b67      	ldr	r3, [pc, #412]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002448:	2300      	movs	r3, #0
 800244a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800244c:	4b63      	ldr	r3, [pc, #396]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 800244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002450:	4a62      	ldr	r2, [pc, #392]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002452:	f043 0302 	orr.w	r3, r3, #2
 8002456:	6313      	str	r3, [r2, #48]	@ 0x30
 8002458:	4b60      	ldr	r3, [pc, #384]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = EN_X_A_Pin;
 8002464:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002468:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002472:	2300      	movs	r3, #0
 8002474:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002476:	2301      	movs	r3, #1
 8002478:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_A_GPIO_Port, &GPIO_InitStruct);
 800247a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800247e:	4619      	mov	r1, r3
 8002480:	4858      	ldr	r0, [pc, #352]	@ (80025e4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002482:	f001 f89b 	bl	80035bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EN_X_B_Pin;
 8002486:	2308      	movs	r3, #8
 8002488:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002492:	2300      	movs	r3, #0
 8002494:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002496:	2301      	movs	r3, #1
 8002498:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_B_GPIO_Port, &GPIO_InitStruct);
 800249a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800249e:	4619      	mov	r1, r3
 80024a0:	4851      	ldr	r0, [pc, #324]	@ (80025e8 <HAL_TIM_Encoder_MspInit+0x260>)
 80024a2:	f001 f88b 	bl	80035bc <HAL_GPIO_Init>
}
 80024a6:	e0da      	b.n	800265e <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a4f      	ldr	r2, [pc, #316]	@ (80025ec <HAL_TIM_Encoder_MspInit+0x264>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d12c      	bne.n	800250c <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b6:	4b49      	ldr	r3, [pc, #292]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	4a48      	ldr	r2, [pc, #288]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024c2:	4b46      	ldr	r3, [pc, #280]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	4b42      	ldr	r3, [pc, #264]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	4a41      	ldr	r2, [pc, #260]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024de:	4b3f      	ldr	r3, [pc, #252]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	623b      	str	r3, [r7, #32]
 80024e8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = EN_Y_A_Pin|EN_Y_B_Pin;
 80024ea:	2330      	movs	r3, #48	@ 0x30
 80024ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024f2:	2302      	movs	r3, #2
 80024f4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f6:	2300      	movs	r3, #0
 80024f8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80024fa:	2302      	movs	r3, #2
 80024fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002502:	4619      	mov	r1, r3
 8002504:	4838      	ldr	r0, [pc, #224]	@ (80025e8 <HAL_TIM_Encoder_MspInit+0x260>)
 8002506:	f001 f859 	bl	80035bc <HAL_GPIO_Init>
}
 800250a:	e0a8      	b.n	800265e <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM4)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a37      	ldr	r2, [pc, #220]	@ (80025f0 <HAL_TIM_Encoder_MspInit+0x268>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d12d      	bne.n	8002572 <HAL_TIM_Encoder_MspInit+0x1ea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	4b30      	ldr	r3, [pc, #192]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251e:	4a2f      	ldr	r2, [pc, #188]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	6413      	str	r3, [r2, #64]	@ 0x40
 8002526:	4b2d      	ldr	r3, [pc, #180]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252a:	f003 0304 	and.w	r3, r3, #4
 800252e:	61fb      	str	r3, [r7, #28]
 8002530:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	4b29      	ldr	r3, [pc, #164]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253a:	4a28      	ldr	r2, [pc, #160]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 800253c:	f043 0308 	orr.w	r3, r3, #8
 8002540:	6313      	str	r3, [r2, #48]	@ 0x30
 8002542:	4b26      	ldr	r3, [pc, #152]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800254e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002552:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002554:	2302      	movs	r3, #2
 8002556:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002558:	2300      	movs	r3, #0
 800255a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255c:	2303      	movs	r3, #3
 800255e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002560:	2302      	movs	r3, #2
 8002562:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002564:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002568:	4619      	mov	r1, r3
 800256a:	4822      	ldr	r0, [pc, #136]	@ (80025f4 <HAL_TIM_Encoder_MspInit+0x26c>)
 800256c:	f001 f826 	bl	80035bc <HAL_GPIO_Init>
}
 8002570:	e075      	b.n	800265e <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM5)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a20      	ldr	r2, [pc, #128]	@ (80025f8 <HAL_TIM_Encoder_MspInit+0x270>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d13f      	bne.n	80025fc <HAL_TIM_Encoder_MspInit+0x274>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	4b16      	ldr	r3, [pc, #88]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	4a15      	ldr	r2, [pc, #84]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 8002586:	f043 0308 	orr.w	r3, r3, #8
 800258a:	6413      	str	r3, [r2, #64]	@ 0x40
 800258c:	4b13      	ldr	r3, [pc, #76]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 800258e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	4b0f      	ldr	r3, [pc, #60]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a0:	4a0e      	ldr	r2, [pc, #56]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a8:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <HAL_TIM_Encoder_MspInit+0x254>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025b4:	2303      	movs	r3, #3
 80025b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025bc:	2302      	movs	r3, #2
 80025be:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c0:	2303      	movs	r3, #3
 80025c2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80025c4:	2302      	movs	r3, #2
 80025c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80025cc:	4619      	mov	r1, r3
 80025ce:	4805      	ldr	r0, [pc, #20]	@ (80025e4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80025d0:	f000 fff4 	bl	80035bc <HAL_GPIO_Init>
}
 80025d4:	e043      	b.n	800265e <HAL_TIM_Encoder_MspInit+0x2d6>
 80025d6:	bf00      	nop
 80025d8:	40010000 	.word	0x40010000
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40020000 	.word	0x40020000
 80025e8:	40020400 	.word	0x40020400
 80025ec:	40000400 	.word	0x40000400
 80025f0:	40000800 	.word	0x40000800
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	40000c00 	.word	0x40000c00
  else if(htim_encoder->Instance==TIM8)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a19      	ldr	r2, [pc, #100]	@ (8002668 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d12b      	bne.n	800265e <HAL_TIM_Encoder_MspInit+0x2d6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	4b18      	ldr	r3, [pc, #96]	@ (800266c <HAL_TIM_Encoder_MspInit+0x2e4>)
 800260c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260e:	4a17      	ldr	r2, [pc, #92]	@ (800266c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	6453      	str	r3, [r2, #68]	@ 0x44
 8002616:	4b15      	ldr	r3, [pc, #84]	@ (800266c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	4b11      	ldr	r3, [pc, #68]	@ (800266c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	4a10      	ldr	r2, [pc, #64]	@ (800266c <HAL_TIM_Encoder_MspInit+0x2e4>)
 800262c:	f043 0304 	orr.w	r3, r3, #4
 8002630:	6313      	str	r3, [r2, #48]	@ 0x30
 8002632:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800263e:	23c0      	movs	r3, #192	@ 0xc0
 8002640:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002642:	2302      	movs	r3, #2
 8002644:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002646:	2302      	movs	r3, #2
 8002648:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264a:	2303      	movs	r3, #3
 800264c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800264e:	2303      	movs	r3, #3
 8002650:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002652:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002656:	4619      	mov	r1, r3
 8002658:	4805      	ldr	r0, [pc, #20]	@ (8002670 <HAL_TIM_Encoder_MspInit+0x2e8>)
 800265a:	f000 ffaf 	bl	80035bc <HAL_GPIO_Init>
}
 800265e:	bf00      	nop
 8002660:	3750      	adds	r7, #80	@ 0x50
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40010400 	.word	0x40010400
 800266c:	40023800 	.word	0x40023800
 8002670:	40020800 	.word	0x40020800

08002674 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a15      	ldr	r2, [pc, #84]	@ (80026d8 <HAL_TIM_PWM_MspInit+0x64>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d10e      	bne.n	80026a4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b14      	ldr	r3, [pc, #80]	@ (80026dc <HAL_TIM_PWM_MspInit+0x68>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	4a13      	ldr	r2, [pc, #76]	@ (80026dc <HAL_TIM_PWM_MspInit+0x68>)
 8002690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002694:	6453      	str	r3, [r2, #68]	@ 0x44
 8002696:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_TIM_PWM_MspInit+0x68>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80026a2:	e012      	b.n	80026ca <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0d      	ldr	r2, [pc, #52]	@ (80026e0 <HAL_TIM_PWM_MspInit+0x6c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d10d      	bne.n	80026ca <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	4b0a      	ldr	r3, [pc, #40]	@ (80026dc <HAL_TIM_PWM_MspInit+0x68>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	4a09      	ldr	r2, [pc, #36]	@ (80026dc <HAL_TIM_PWM_MspInit+0x68>)
 80026b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026be:	4b07      	ldr	r3, [pc, #28]	@ (80026dc <HAL_TIM_PWM_MspInit+0x68>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40014000 	.word	0x40014000
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40001800 	.word	0x40001800

080026e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a29      	ldr	r2, [pc, #164]	@ (8002798 <HAL_TIM_Base_MspInit+0xb4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	4b28      	ldr	r3, [pc, #160]	@ (800279c <HAL_TIM_Base_MspInit+0xb8>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	4a27      	ldr	r2, [pc, #156]	@ (800279c <HAL_TIM_Base_MspInit+0xb8>)
 8002700:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002704:	6453      	str	r3, [r2, #68]	@ 0x44
 8002706:	4b25      	ldr	r3, [pc, #148]	@ (800279c <HAL_TIM_Base_MspInit+0xb8>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002712:	e03a      	b.n	800278a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a21      	ldr	r2, [pc, #132]	@ (80027a0 <HAL_TIM_Base_MspInit+0xbc>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10e      	bne.n	800273c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	4b1e      	ldr	r3, [pc, #120]	@ (800279c <HAL_TIM_Base_MspInit+0xb8>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002726:	4a1d      	ldr	r2, [pc, #116]	@ (800279c <HAL_TIM_Base_MspInit+0xb8>)
 8002728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800272c:	6453      	str	r3, [r2, #68]	@ 0x44
 800272e:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_TIM_Base_MspInit+0xb8>)
 8002730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
}
 800273a:	e026      	b.n	800278a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM13)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a18      	ldr	r2, [pc, #96]	@ (80027a4 <HAL_TIM_Base_MspInit+0xc0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10e      	bne.n	8002764 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	4b14      	ldr	r3, [pc, #80]	@ (800279c <HAL_TIM_Base_MspInit+0xb8>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	4a13      	ldr	r2, [pc, #76]	@ (800279c <HAL_TIM_Base_MspInit+0xb8>)
 8002750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002754:	6413      	str	r3, [r2, #64]	@ 0x40
 8002756:	4b11      	ldr	r3, [pc, #68]	@ (800279c <HAL_TIM_Base_MspInit+0xb8>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
}
 8002762:	e012      	b.n	800278a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0f      	ldr	r2, [pc, #60]	@ (80027a8 <HAL_TIM_Base_MspInit+0xc4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10d      	bne.n	800278a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <HAL_TIM_Base_MspInit+0xb8>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002776:	4a09      	ldr	r2, [pc, #36]	@ (800279c <HAL_TIM_Base_MspInit+0xb8>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800277c:	6413      	str	r3, [r2, #64]	@ 0x40
 800277e:	4b07      	ldr	r3, [pc, #28]	@ (800279c <HAL_TIM_Base_MspInit+0xb8>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002786:	60bb      	str	r3, [r7, #8]
 8002788:	68bb      	ldr	r3, [r7, #8]
}
 800278a:	bf00      	nop
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40014400 	.word	0x40014400
 800279c:	40023800 	.word	0x40023800
 80027a0:	40014800 	.word	0x40014800
 80027a4:	40001c00 	.word	0x40001c00
 80027a8:	40002000 	.word	0x40002000

080027ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08e      	sub	sp, #56	@ 0x38
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a6d      	ldr	r2, [pc, #436]	@ (8002980 <HAL_TIM_MspPostInit+0x1d4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d11e      	bne.n	800280c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
 80027d2:	4b6c      	ldr	r3, [pc, #432]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d6:	4a6b      	ldr	r2, [pc, #428]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 80027d8:	f043 0310 	orr.w	r3, r3, #16
 80027dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027de:	4b69      	ldr	r3, [pc, #420]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f003 0310 	and.w	r3, r3, #16
 80027e6:	623b      	str	r3, [r7, #32]
 80027e8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = EXTRA1_PWM_L_Pin|SERVO_1_Pin;
 80027ea:	2360      	movs	r3, #96	@ 0x60
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	2300      	movs	r3, #0
 80027f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80027fa:	2303      	movs	r3, #3
 80027fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002802:	4619      	mov	r1, r3
 8002804:	4860      	ldr	r0, [pc, #384]	@ (8002988 <HAL_TIM_MspPostInit+0x1dc>)
 8002806:	f000 fed9 	bl	80035bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800280a:	e0b5      	b.n	8002978 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM10)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a5e      	ldr	r2, [pc, #376]	@ (800298c <HAL_TIM_MspPostInit+0x1e0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d11f      	bne.n	8002856 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
 800281a:	4b5a      	ldr	r3, [pc, #360]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281e:	4a59      	ldr	r2, [pc, #356]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	6313      	str	r3, [r2, #48]	@ 0x30
 8002826:	4b57      	ldr	r3, [pc, #348]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = EXTRA2_PWM_L_Pin;
 8002832:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002840:	2300      	movs	r3, #0
 8002842:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002844:	2303      	movs	r3, #3
 8002846:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(EXTRA2_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800284c:	4619      	mov	r1, r3
 800284e:	4850      	ldr	r0, [pc, #320]	@ (8002990 <HAL_TIM_MspPostInit+0x1e4>)
 8002850:	f000 feb4 	bl	80035bc <HAL_GPIO_Init>
}
 8002854:	e090      	b.n	8002978 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM11)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a4e      	ldr	r2, [pc, #312]	@ (8002994 <HAL_TIM_MspPostInit+0x1e8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d11f      	bne.n	80028a0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002860:	2300      	movs	r3, #0
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	4b47      	ldr	r3, [pc, #284]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002868:	4a46      	ldr	r2, [pc, #280]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 800286a:	f043 0302 	orr.w	r3, r3, #2
 800286e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002870:	4b44      	ldr	r3, [pc, #272]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RF_PWM_L_Pin;
 800287c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002882:	2302      	movs	r3, #2
 8002884:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	2300      	movs	r3, #0
 800288c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800288e:	2303      	movs	r3, #3
 8002890:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002896:	4619      	mov	r1, r3
 8002898:	483d      	ldr	r0, [pc, #244]	@ (8002990 <HAL_TIM_MspPostInit+0x1e4>)
 800289a:	f000 fe8f 	bl	80035bc <HAL_GPIO_Init>
}
 800289e:	e06b      	b.n	8002978 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM12)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a3c      	ldr	r2, [pc, #240]	@ (8002998 <HAL_TIM_MspPostInit+0x1ec>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d11f      	bne.n	80028ea <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	4b35      	ldr	r3, [pc, #212]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b2:	4a34      	ldr	r2, [pc, #208]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ba:	4b32      	ldr	r3, [pc, #200]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LB_PWM_L_Pin|RB_PWM_L_Pin;
 80028c6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d4:	2300      	movs	r3, #0
 80028d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80028d8:	2309      	movs	r3, #9
 80028da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028e0:	4619      	mov	r1, r3
 80028e2:	482b      	ldr	r0, [pc, #172]	@ (8002990 <HAL_TIM_MspPostInit+0x1e4>)
 80028e4:	f000 fe6a 	bl	80035bc <HAL_GPIO_Init>
}
 80028e8:	e046      	b.n	8002978 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM13)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a2b      	ldr	r2, [pc, #172]	@ (800299c <HAL_TIM_MspPostInit+0x1f0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d11e      	bne.n	8002932 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	4b22      	ldr	r3, [pc, #136]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fc:	4a21      	ldr	r2, [pc, #132]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 80028fe:	f043 0301 	orr.w	r3, r3, #1
 8002902:	6313      	str	r3, [r2, #48]	@ 0x30
 8002904:	4b1f      	ldr	r3, [pc, #124]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8002910:	2340      	movs	r3, #64	@ 0x40
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291c:	2300      	movs	r3, #0
 800291e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002920:	2309      	movs	r3, #9
 8002922:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8002924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002928:	4619      	mov	r1, r3
 800292a:	481d      	ldr	r0, [pc, #116]	@ (80029a0 <HAL_TIM_MspPostInit+0x1f4>)
 800292c:	f000 fe46 	bl	80035bc <HAL_GPIO_Init>
}
 8002930:	e022      	b.n	8002978 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM14)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1b      	ldr	r2, [pc, #108]	@ (80029a4 <HAL_TIM_MspPostInit+0x1f8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d11d      	bne.n	8002978 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	4b10      	ldr	r3, [pc, #64]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002944:	4a0f      	ldr	r2, [pc, #60]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	6313      	str	r3, [r2, #48]	@ 0x30
 800294c:	4b0d      	ldr	r3, [pc, #52]	@ (8002984 <HAL_TIM_MspPostInit+0x1d8>)
 800294e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LF_PWM_L_Pin;
 8002958:	2380      	movs	r3, #128	@ 0x80
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295c:	2302      	movs	r3, #2
 800295e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002964:	2300      	movs	r3, #0
 8002966:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002968:	2309      	movs	r3, #9
 800296a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800296c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002970:	4619      	mov	r1, r3
 8002972:	480b      	ldr	r0, [pc, #44]	@ (80029a0 <HAL_TIM_MspPostInit+0x1f4>)
 8002974:	f000 fe22 	bl	80035bc <HAL_GPIO_Init>
}
 8002978:	bf00      	nop
 800297a:	3738      	adds	r7, #56	@ 0x38
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40014000 	.word	0x40014000
 8002984:	40023800 	.word	0x40023800
 8002988:	40021000 	.word	0x40021000
 800298c:	40014400 	.word	0x40014400
 8002990:	40020400 	.word	0x40020400
 8002994:	40014800 	.word	0x40014800
 8002998:	40001800 	.word	0x40001800
 800299c:	40001c00 	.word	0x40001c00
 80029a0:	40020000 	.word	0x40020000
 80029a4:	40002000 	.word	0x40002000

080029a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	@ 0x30
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a36      	ldr	r2, [pc, #216]	@ (8002aa0 <HAL_UART_MspInit+0xf8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d12d      	bne.n	8002a26 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	4b35      	ldr	r3, [pc, #212]	@ (8002aa4 <HAL_UART_MspInit+0xfc>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	4a34      	ldr	r2, [pc, #208]	@ (8002aa4 <HAL_UART_MspInit+0xfc>)
 80029d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80029d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029da:	4b32      	ldr	r3, [pc, #200]	@ (8002aa4 <HAL_UART_MspInit+0xfc>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	4b2e      	ldr	r3, [pc, #184]	@ (8002aa4 <HAL_UART_MspInit+0xfc>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4a2d      	ldr	r2, [pc, #180]	@ (8002aa4 <HAL_UART_MspInit+0xfc>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa4 <HAL_UART_MspInit+0xfc>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a02:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a14:	2308      	movs	r3, #8
 8002a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4822      	ldr	r0, [pc, #136]	@ (8002aa8 <HAL_UART_MspInit+0x100>)
 8002a20:	f000 fdcc 	bl	80035bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a24:	e038      	b.n	8002a98 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a20      	ldr	r2, [pc, #128]	@ (8002aac <HAL_UART_MspInit+0x104>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d133      	bne.n	8002a98 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa4 <HAL_UART_MspInit+0xfc>)
 8002a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a38:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa4 <HAL_UART_MspInit+0xfc>)
 8002a3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a40:	4b18      	ldr	r3, [pc, #96]	@ (8002aa4 <HAL_UART_MspInit+0xfc>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	4b14      	ldr	r3, [pc, #80]	@ (8002aa4 <HAL_UART_MspInit+0xfc>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a54:	4a13      	ldr	r2, [pc, #76]	@ (8002aa4 <HAL_UART_MspInit+0xfc>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a5c:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <HAL_UART_MspInit+0xfc>)
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a68:	230c      	movs	r3, #12
 8002a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a74:	2303      	movs	r3, #3
 8002a76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a78:	2307      	movs	r3, #7
 8002a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7c:	f107 031c 	add.w	r3, r7, #28
 8002a80:	4619      	mov	r1, r3
 8002a82:	480b      	ldr	r0, [pc, #44]	@ (8002ab0 <HAL_UART_MspInit+0x108>)
 8002a84:	f000 fd9a 	bl	80035bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	2026      	movs	r0, #38	@ 0x26
 8002a8e:	f000 fcbe 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a92:	2026      	movs	r0, #38	@ 0x26
 8002a94:	f000 fcd7 	bl	8003446 <HAL_NVIC_EnableIRQ>
}
 8002a98:	bf00      	nop
 8002a9a:	3730      	adds	r7, #48	@ 0x30
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40004c00 	.word	0x40004c00
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40020800 	.word	0x40020800
 8002aac:	40004400 	.word	0x40004400
 8002ab0:	40020000 	.word	0x40020000

08002ab4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a12      	ldr	r2, [pc, #72]	@ (8002b0c <HAL_UART_MspDeInit+0x58>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d10b      	bne.n	8002ade <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8002ac6:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <HAL_UART_MspDeInit+0x5c>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	4a11      	ldr	r2, [pc, #68]	@ (8002b10 <HAL_UART_MspDeInit+0x5c>)
 8002acc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8002ad0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8002ad2:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8002ad6:	480f      	ldr	r0, [pc, #60]	@ (8002b14 <HAL_UART_MspDeInit+0x60>)
 8002ad8:	f000 ff0c 	bl	80038f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002adc:	e011      	b.n	8002b02 <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a0d      	ldr	r2, [pc, #52]	@ (8002b18 <HAL_UART_MspDeInit+0x64>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d10c      	bne.n	8002b02 <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002ae8:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <HAL_UART_MspDeInit+0x5c>)
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	4a08      	ldr	r2, [pc, #32]	@ (8002b10 <HAL_UART_MspDeInit+0x5c>)
 8002aee:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002af2:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002af4:	210c      	movs	r1, #12
 8002af6:	4809      	ldr	r0, [pc, #36]	@ (8002b1c <HAL_UART_MspDeInit+0x68>)
 8002af8:	f000 fefc 	bl	80038f4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002afc:	2026      	movs	r0, #38	@ 0x26
 8002afe:	f000 fcb0 	bl	8003462 <HAL_NVIC_DisableIRQ>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40004c00 	.word	0x40004c00
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40020800 	.word	0x40020800
 8002b18:	40004400 	.word	0x40004400
 8002b1c:	40020000 	.word	0x40020000

08002b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <NMI_Handler+0x4>

08002b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2c:	bf00      	nop
 8002b2e:	e7fd      	b.n	8002b2c <HardFault_Handler+0x4>

08002b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <MemManage_Handler+0x4>

08002b38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <BusFault_Handler+0x4>

08002b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <UsageFault_Handler+0x4>

08002b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b76:	f000 f8a5 	bl	8002cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b84:	4802      	ldr	r0, [pc, #8]	@ (8002b90 <USART2_IRQHandler+0x10>)
 8002b86:	f004 fe65 	bl	8007854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000620 	.word	0x20000620

08002b94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002b98:	4802      	ldr	r0, [pc, #8]	@ (8002ba4 <OTG_FS_IRQHandler+0x10>)
 8002b9a:	f002 f929 	bl	8004df0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20001dc4 	.word	0x20001dc4

08002ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bac:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <SystemInit+0x20>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb2:	4a05      	ldr	r2, [pc, #20]	@ (8002bc8 <SystemInit+0x20>)
 8002bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <Reset_Handler>:
 8002bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c04 <LoopFillZerobss+0xe>
 8002bd0:	f7ff ffea 	bl	8002ba8 <SystemInit>
 8002bd4:	480c      	ldr	r0, [pc, #48]	@ (8002c08 <LoopFillZerobss+0x12>)
 8002bd6:	490d      	ldr	r1, [pc, #52]	@ (8002c0c <LoopFillZerobss+0x16>)
 8002bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8002c10 <LoopFillZerobss+0x1a>)
 8002bda:	2300      	movs	r3, #0
 8002bdc:	e002      	b.n	8002be4 <LoopCopyDataInit>

08002bde <CopyDataInit>:
 8002bde:	58d4      	ldr	r4, [r2, r3]
 8002be0:	50c4      	str	r4, [r0, r3]
 8002be2:	3304      	adds	r3, #4

08002be4 <LoopCopyDataInit>:
 8002be4:	18c4      	adds	r4, r0, r3
 8002be6:	428c      	cmp	r4, r1
 8002be8:	d3f9      	bcc.n	8002bde <CopyDataInit>
 8002bea:	4a0a      	ldr	r2, [pc, #40]	@ (8002c14 <LoopFillZerobss+0x1e>)
 8002bec:	4c0a      	ldr	r4, [pc, #40]	@ (8002c18 <LoopFillZerobss+0x22>)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e001      	b.n	8002bf6 <LoopFillZerobss>

08002bf2 <FillZerobss>:
 8002bf2:	6013      	str	r3, [r2, #0]
 8002bf4:	3204      	adds	r2, #4

08002bf6 <LoopFillZerobss>:
 8002bf6:	42a2      	cmp	r2, r4
 8002bf8:	d3fb      	bcc.n	8002bf2 <FillZerobss>
 8002bfa:	f00b fc49 	bl	800e490 <__libc_init_array>
 8002bfe:	f7fe f93f 	bl	8000e80 <main>
 8002c02:	4770      	bx	lr
 8002c04:	20020000 	.word	0x20020000
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	20000168 	.word	0x20000168
 8002c10:	08010008 	.word	0x08010008
 8002c14:	20000168 	.word	0x20000168
 8002c18:	20002600 	.word	0x20002600

08002c1c <ADC_IRQHandler>:
 8002c1c:	e7fe      	b.n	8002c1c <ADC_IRQHandler>
	...

08002c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c24:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <HAL_Init+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	@ (8002c60 <HAL_Init+0x40>)
 8002c2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c30:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_Init+0x40>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0a      	ldr	r2, [pc, #40]	@ (8002c60 <HAL_Init+0x40>)
 8002c36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c3c:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <HAL_Init+0x40>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a07      	ldr	r2, [pc, #28]	@ (8002c60 <HAL_Init+0x40>)
 8002c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c48:	2003      	movs	r0, #3
 8002c4a:	f000 fbd5 	bl	80033f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c4e:	200f      	movs	r0, #15
 8002c50:	f000 f808 	bl	8002c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c54:	f7ff fa60 	bl	8002118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023c00 	.word	0x40023c00

08002c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c6c:	4b12      	ldr	r3, [pc, #72]	@ (8002cb8 <HAL_InitTick+0x54>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <HAL_InitTick+0x58>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	4619      	mov	r1, r3
 8002c76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fbfb 	bl	800347e <HAL_SYSTICK_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00e      	b.n	8002cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b0f      	cmp	r3, #15
 8002c96:	d80a      	bhi.n	8002cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	f000 fbb5 	bl	800340e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca4:	4a06      	ldr	r2, [pc, #24]	@ (8002cc0 <HAL_InitTick+0x5c>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	20000008 	.word	0x20000008
 8002cc0:	20000004 	.word	0x20000004

08002cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <HAL_IncTick+0x20>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <HAL_IncTick+0x24>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	4a04      	ldr	r2, [pc, #16]	@ (8002ce8 <HAL_IncTick+0x24>)
 8002cd6:	6013      	str	r3, [r2, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000008 	.word	0x20000008
 8002ce8:	200006b0 	.word	0x200006b0

08002cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf0:	4b03      	ldr	r3, [pc, #12]	@ (8002d00 <HAL_GetTick+0x14>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	200006b0 	.word	0x200006b0

08002d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d0c:	f7ff ffee 	bl	8002cec <HAL_GetTick>
 8002d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d005      	beq.n	8002d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d48 <HAL_Delay+0x44>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4413      	add	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d2a:	bf00      	nop
 8002d2c:	f7ff ffde 	bl	8002cec <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d8f7      	bhi.n	8002d2c <HAL_Delay+0x28>
  {
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000008 	.word	0x20000008

08002d4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e033      	b.n	8002dca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff f9fc 	bl	8002168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d118      	bne.n	8002dbc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d92:	f023 0302 	bic.w	r3, r3, #2
 8002d96:	f043 0202 	orr.w	r2, r3, #2
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f93a 	bl	8003018 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	f023 0303 	bic.w	r3, r3, #3
 8002db2:	f043 0201 	orr.w	r2, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002dba:	e001      	b.n	8002dc0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x1c>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e105      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x228>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b09      	cmp	r3, #9
 8002dfe:	d925      	bls.n	8002e4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68d9      	ldr	r1, [r3, #12]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4613      	mov	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4413      	add	r3, r2
 8002e14:	3b1e      	subs	r3, #30
 8002e16:	2207      	movs	r2, #7
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43da      	mvns	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	400a      	ands	r2, r1
 8002e24:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68d9      	ldr	r1, [r3, #12]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	4618      	mov	r0, r3
 8002e38:	4603      	mov	r3, r0
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4403      	add	r3, r0
 8002e3e:	3b1e      	subs	r3, #30
 8002e40:	409a      	lsls	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	e022      	b.n	8002e92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6919      	ldr	r1, [r3, #16]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	2207      	movs	r2, #7
 8002e62:	fa02 f303 	lsl.w	r3, r2, r3
 8002e66:	43da      	mvns	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	400a      	ands	r2, r1
 8002e6e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6919      	ldr	r1, [r3, #16]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	4618      	mov	r0, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4403      	add	r3, r0
 8002e88:	409a      	lsls	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b06      	cmp	r3, #6
 8002e98:	d824      	bhi.n	8002ee4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3b05      	subs	r3, #5
 8002eac:	221f      	movs	r2, #31
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	400a      	ands	r2, r1
 8002eba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	4618      	mov	r0, r3
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3b05      	subs	r3, #5
 8002ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ee2:	e04c      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b0c      	cmp	r3, #12
 8002eea:	d824      	bhi.n	8002f36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	3b23      	subs	r3, #35	@ 0x23
 8002efe:	221f      	movs	r2, #31
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	43da      	mvns	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	3b23      	subs	r3, #35	@ 0x23
 8002f28:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	430a      	orrs	r2, r1
 8002f32:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f34:	e023      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4413      	add	r3, r2
 8002f46:	3b41      	subs	r3, #65	@ 0x41
 8002f48:	221f      	movs	r2, #31
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	400a      	ands	r2, r1
 8002f56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	4618      	mov	r0, r3
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	3b41      	subs	r3, #65	@ 0x41
 8002f72:	fa00 f203 	lsl.w	r2, r0, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f7e:	4b22      	ldr	r3, [pc, #136]	@ (8003008 <HAL_ADC_ConfigChannel+0x234>)
 8002f80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a21      	ldr	r2, [pc, #132]	@ (800300c <HAL_ADC_ConfigChannel+0x238>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d109      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x1cc>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b12      	cmp	r3, #18
 8002f92:	d105      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a19      	ldr	r2, [pc, #100]	@ (800300c <HAL_ADC_ConfigChannel+0x238>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d123      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x21e>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b10      	cmp	r3, #16
 8002fb0:	d003      	beq.n	8002fba <HAL_ADC_ConfigChannel+0x1e6>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b11      	cmp	r3, #17
 8002fb8:	d11b      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d111      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fce:	4b10      	ldr	r3, [pc, #64]	@ (8003010 <HAL_ADC_ConfigChannel+0x23c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a10      	ldr	r2, [pc, #64]	@ (8003014 <HAL_ADC_ConfigChannel+0x240>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	0c9a      	lsrs	r2, r3, #18
 8002fda:	4613      	mov	r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fe4:	e002      	b.n	8002fec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f9      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40012300 	.word	0x40012300
 800300c:	40012000 	.word	0x40012000
 8003010:	20000000 	.word	0x20000000
 8003014:	431bde83 	.word	0x431bde83

08003018 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003020:	4b79      	ldr	r3, [pc, #484]	@ (8003208 <ADC_Init+0x1f0>)
 8003022:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	431a      	orrs	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800304c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	021a      	lsls	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003070:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003092:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6899      	ldr	r1, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030aa:	4a58      	ldr	r2, [pc, #352]	@ (800320c <ADC_Init+0x1f4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d022      	beq.n	80030f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6899      	ldr	r1, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6899      	ldr	r1, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	609a      	str	r2, [r3, #8]
 80030f4:	e00f      	b.n	8003116 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003104:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003114:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0202 	bic.w	r2, r2, #2
 8003124:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6899      	ldr	r1, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7e1b      	ldrb	r3, [r3, #24]
 8003130:	005a      	lsls	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01b      	beq.n	800317c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003152:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003162:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6859      	ldr	r1, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	3b01      	subs	r3, #1
 8003170:	035a      	lsls	r2, r3, #13
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	e007      	b.n	800318c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800318a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800319a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	051a      	lsls	r2, r3, #20
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	430a      	orrs	r2, r1
 80031b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80031c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6899      	ldr	r1, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031ce:	025a      	lsls	r2, r3, #9
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6899      	ldr	r1, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	029a      	lsls	r2, r3, #10
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	609a      	str	r2, [r3, #8]
}
 80031fc:	bf00      	nop
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	40012300 	.word	0x40012300
 800320c:	0f000001 	.word	0x0f000001

08003210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003220:	4b0c      	ldr	r3, [pc, #48]	@ (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800322c:	4013      	ands	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003238:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800323c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003242:	4a04      	ldr	r2, [pc, #16]	@ (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	60d3      	str	r3, [r2, #12]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800325c:	4b04      	ldr	r3, [pc, #16]	@ (8003270 <__NVIC_GetPriorityGrouping+0x18>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	f003 0307 	and.w	r3, r3, #7
}
 8003266:	4618      	mov	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	2b00      	cmp	r3, #0
 8003284:	db0b      	blt.n	800329e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	f003 021f 	and.w	r2, r3, #31
 800328c:	4907      	ldr	r1, [pc, #28]	@ (80032ac <__NVIC_EnableIRQ+0x38>)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2001      	movs	r0, #1
 8003296:	fa00 f202 	lsl.w	r2, r0, r2
 800329a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000e100 	.word	0xe000e100

080032b0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db12      	blt.n	80032e8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	490a      	ldr	r1, [pc, #40]	@ (80032f4 <__NVIC_DisableIRQ+0x44>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	2001      	movs	r0, #1
 80032d2:	fa00 f202 	lsl.w	r2, r0, r2
 80032d6:	3320      	adds	r3, #32
 80032d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80032dc:	f3bf 8f4f 	dsb	sy
}
 80032e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032e2:	f3bf 8f6f 	isb	sy
}
 80032e6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000e100 	.word	0xe000e100

080032f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	6039      	str	r1, [r7, #0]
 8003302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	2b00      	cmp	r3, #0
 800330a:	db0a      	blt.n	8003322 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	b2da      	uxtb	r2, r3
 8003310:	490c      	ldr	r1, [pc, #48]	@ (8003344 <__NVIC_SetPriority+0x4c>)
 8003312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003316:	0112      	lsls	r2, r2, #4
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	440b      	add	r3, r1
 800331c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003320:	e00a      	b.n	8003338 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	4908      	ldr	r1, [pc, #32]	@ (8003348 <__NVIC_SetPriority+0x50>)
 8003328:	79fb      	ldrb	r3, [r7, #7]
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	3b04      	subs	r3, #4
 8003330:	0112      	lsls	r2, r2, #4
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	440b      	add	r3, r1
 8003336:	761a      	strb	r2, [r3, #24]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	e000e100 	.word	0xe000e100
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	@ 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f1c3 0307 	rsb	r3, r3, #7
 8003366:	2b04      	cmp	r3, #4
 8003368:	bf28      	it	cs
 800336a:	2304      	movcs	r3, #4
 800336c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	3304      	adds	r3, #4
 8003372:	2b06      	cmp	r3, #6
 8003374:	d902      	bls.n	800337c <NVIC_EncodePriority+0x30>
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3b03      	subs	r3, #3
 800337a:	e000      	b.n	800337e <NVIC_EncodePriority+0x32>
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003380:	f04f 32ff 	mov.w	r2, #4294967295
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	401a      	ands	r2, r3
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003394:	f04f 31ff 	mov.w	r1, #4294967295
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa01 f303 	lsl.w	r3, r1, r3
 800339e:	43d9      	mvns	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a4:	4313      	orrs	r3, r2
         );
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	@ 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3b01      	subs	r3, #1
 80033c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033c4:	d301      	bcc.n	80033ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033c6:	2301      	movs	r3, #1
 80033c8:	e00f      	b.n	80033ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ca:	4a0a      	ldr	r2, [pc, #40]	@ (80033f4 <SysTick_Config+0x40>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033d2:	210f      	movs	r1, #15
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	f7ff ff8e 	bl	80032f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033dc:	4b05      	ldr	r3, [pc, #20]	@ (80033f4 <SysTick_Config+0x40>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033e2:	4b04      	ldr	r3, [pc, #16]	@ (80033f4 <SysTick_Config+0x40>)
 80033e4:	2207      	movs	r2, #7
 80033e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	e000e010 	.word	0xe000e010

080033f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff05 	bl	8003210 <__NVIC_SetPriorityGrouping>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800340e:	b580      	push	{r7, lr}
 8003410:	b086      	sub	sp, #24
 8003412:	af00      	add	r7, sp, #0
 8003414:	4603      	mov	r3, r0
 8003416:	60b9      	str	r1, [r7, #8]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800341c:	2300      	movs	r3, #0
 800341e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003420:	f7ff ff1a 	bl	8003258 <__NVIC_GetPriorityGrouping>
 8003424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	6978      	ldr	r0, [r7, #20]
 800342c:	f7ff ff8e 	bl	800334c <NVIC_EncodePriority>
 8003430:	4602      	mov	r2, r0
 8003432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff ff5d 	bl	80032f8 <__NVIC_SetPriority>
}
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b082      	sub	sp, #8
 800344a:	af00      	add	r7, sp, #0
 800344c:	4603      	mov	r3, r0
 800344e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff ff0d 	bl	8003274 <__NVIC_EnableIRQ>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff1d 	bl	80032b0 <__NVIC_DisableIRQ>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ff94 	bl	80033b4 <SysTick_Config>
 800348c:	4603      	mov	r3, r0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034a4:	f7ff fc22 	bl	8002cec <HAL_GetTick>
 80034a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d008      	beq.n	80034c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2280      	movs	r2, #128	@ 0x80
 80034ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e052      	b.n	800356e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0216 	bic.w	r2, r2, #22
 80034d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	695a      	ldr	r2, [r3, #20]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d103      	bne.n	80034f8 <HAL_DMA_Abort+0x62>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0208 	bic.w	r2, r2, #8
 8003506:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003518:	e013      	b.n	8003542 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800351a:	f7ff fbe7 	bl	8002cec <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b05      	cmp	r3, #5
 8003526:	d90c      	bls.n	8003542 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2203      	movs	r2, #3
 8003532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e015      	b.n	800356e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e4      	bne.n	800351a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003554:	223f      	movs	r2, #63	@ 0x3f
 8003556:	409a      	lsls	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d004      	beq.n	8003594 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2280      	movs	r2, #128	@ 0x80
 800358e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e00c      	b.n	80035ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2205      	movs	r2, #5
 8003598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 0201 	bic.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035bc:	b480      	push	{r7}
 80035be:	b089      	sub	sp, #36	@ 0x24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	e16b      	b.n	80038b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035d8:	2201      	movs	r2, #1
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	f040 815a 	bne.w	80038aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d005      	beq.n	800360e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800360a:	2b02      	cmp	r3, #2
 800360c:	d130      	bne.n	8003670 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	2203      	movs	r2, #3
 800361a:	fa02 f303 	lsl.w	r3, r2, r3
 800361e:	43db      	mvns	r3, r3
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4013      	ands	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003644:	2201      	movs	r2, #1
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 0201 	and.w	r2, r3, #1
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b03      	cmp	r3, #3
 800367a:	d017      	beq.n	80036ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	2203      	movs	r2, #3
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d123      	bne.n	8003700 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	08da      	lsrs	r2, r3, #3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	3208      	adds	r2, #8
 80036c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	220f      	movs	r2, #15
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	08da      	lsrs	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3208      	adds	r2, #8
 80036fa:	69b9      	ldr	r1, [r7, #24]
 80036fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2203      	movs	r2, #3
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0203 	and.w	r2, r3, #3
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 80b4 	beq.w	80038aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	4b60      	ldr	r3, [pc, #384]	@ (80038c8 <HAL_GPIO_Init+0x30c>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	4a5f      	ldr	r2, [pc, #380]	@ (80038c8 <HAL_GPIO_Init+0x30c>)
 800374c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003750:	6453      	str	r3, [r2, #68]	@ 0x44
 8003752:	4b5d      	ldr	r3, [pc, #372]	@ (80038c8 <HAL_GPIO_Init+0x30c>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800375e:	4a5b      	ldr	r2, [pc, #364]	@ (80038cc <HAL_GPIO_Init+0x310>)
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	089b      	lsrs	r3, r3, #2
 8003764:	3302      	adds	r3, #2
 8003766:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	220f      	movs	r2, #15
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	43db      	mvns	r3, r3
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	4013      	ands	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a52      	ldr	r2, [pc, #328]	@ (80038d0 <HAL_GPIO_Init+0x314>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d02b      	beq.n	80037e2 <HAL_GPIO_Init+0x226>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a51      	ldr	r2, [pc, #324]	@ (80038d4 <HAL_GPIO_Init+0x318>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d025      	beq.n	80037de <HAL_GPIO_Init+0x222>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a50      	ldr	r2, [pc, #320]	@ (80038d8 <HAL_GPIO_Init+0x31c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01f      	beq.n	80037da <HAL_GPIO_Init+0x21e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a4f      	ldr	r2, [pc, #316]	@ (80038dc <HAL_GPIO_Init+0x320>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d019      	beq.n	80037d6 <HAL_GPIO_Init+0x21a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a4e      	ldr	r2, [pc, #312]	@ (80038e0 <HAL_GPIO_Init+0x324>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_GPIO_Init+0x216>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a4d      	ldr	r2, [pc, #308]	@ (80038e4 <HAL_GPIO_Init+0x328>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00d      	beq.n	80037ce <HAL_GPIO_Init+0x212>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a4c      	ldr	r2, [pc, #304]	@ (80038e8 <HAL_GPIO_Init+0x32c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d007      	beq.n	80037ca <HAL_GPIO_Init+0x20e>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a4b      	ldr	r2, [pc, #300]	@ (80038ec <HAL_GPIO_Init+0x330>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d101      	bne.n	80037c6 <HAL_GPIO_Init+0x20a>
 80037c2:	2307      	movs	r3, #7
 80037c4:	e00e      	b.n	80037e4 <HAL_GPIO_Init+0x228>
 80037c6:	2308      	movs	r3, #8
 80037c8:	e00c      	b.n	80037e4 <HAL_GPIO_Init+0x228>
 80037ca:	2306      	movs	r3, #6
 80037cc:	e00a      	b.n	80037e4 <HAL_GPIO_Init+0x228>
 80037ce:	2305      	movs	r3, #5
 80037d0:	e008      	b.n	80037e4 <HAL_GPIO_Init+0x228>
 80037d2:	2304      	movs	r3, #4
 80037d4:	e006      	b.n	80037e4 <HAL_GPIO_Init+0x228>
 80037d6:	2303      	movs	r3, #3
 80037d8:	e004      	b.n	80037e4 <HAL_GPIO_Init+0x228>
 80037da:	2302      	movs	r3, #2
 80037dc:	e002      	b.n	80037e4 <HAL_GPIO_Init+0x228>
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <HAL_GPIO_Init+0x228>
 80037e2:	2300      	movs	r3, #0
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	f002 0203 	and.w	r2, r2, #3
 80037ea:	0092      	lsls	r2, r2, #2
 80037ec:	4093      	lsls	r3, r2
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037f4:	4935      	ldr	r1, [pc, #212]	@ (80038cc <HAL_GPIO_Init+0x310>)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	089b      	lsrs	r3, r3, #2
 80037fa:	3302      	adds	r3, #2
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003802:	4b3b      	ldr	r3, [pc, #236]	@ (80038f0 <HAL_GPIO_Init+0x334>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	43db      	mvns	r3, r3
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	4013      	ands	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003826:	4a32      	ldr	r2, [pc, #200]	@ (80038f0 <HAL_GPIO_Init+0x334>)
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800382c:	4b30      	ldr	r3, [pc, #192]	@ (80038f0 <HAL_GPIO_Init+0x334>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003850:	4a27      	ldr	r2, [pc, #156]	@ (80038f0 <HAL_GPIO_Init+0x334>)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003856:	4b26      	ldr	r3, [pc, #152]	@ (80038f0 <HAL_GPIO_Init+0x334>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	43db      	mvns	r3, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	4013      	ands	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800387a:	4a1d      	ldr	r2, [pc, #116]	@ (80038f0 <HAL_GPIO_Init+0x334>)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003880:	4b1b      	ldr	r3, [pc, #108]	@ (80038f0 <HAL_GPIO_Init+0x334>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	43db      	mvns	r3, r3
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	4013      	ands	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038a4:	4a12      	ldr	r2, [pc, #72]	@ (80038f0 <HAL_GPIO_Init+0x334>)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	3301      	adds	r3, #1
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2b0f      	cmp	r3, #15
 80038b4:	f67f ae90 	bls.w	80035d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3724      	adds	r7, #36	@ 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40023800 	.word	0x40023800
 80038cc:	40013800 	.word	0x40013800
 80038d0:	40020000 	.word	0x40020000
 80038d4:	40020400 	.word	0x40020400
 80038d8:	40020800 	.word	0x40020800
 80038dc:	40020c00 	.word	0x40020c00
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40021400 	.word	0x40021400
 80038e8:	40021800 	.word	0x40021800
 80038ec:	40021c00 	.word	0x40021c00
 80038f0:	40013c00 	.word	0x40013c00

080038f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e0cd      	b.n	8003aac <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003910:	2201      	movs	r2, #1
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4013      	ands	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	429a      	cmp	r2, r3
 8003928:	f040 80bd 	bne.w	8003aa6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800392c:	4a65      	ldr	r2, [pc, #404]	@ (8003ac4 <HAL_GPIO_DeInit+0x1d0>)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	3302      	adds	r3, #2
 8003934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003938:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	220f      	movs	r2, #15
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	4013      	ands	r3, r2
 800394c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac8 <HAL_GPIO_DeInit+0x1d4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d02b      	beq.n	80039ae <HAL_GPIO_DeInit+0xba>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a5c      	ldr	r2, [pc, #368]	@ (8003acc <HAL_GPIO_DeInit+0x1d8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d025      	beq.n	80039aa <HAL_GPIO_DeInit+0xb6>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a5b      	ldr	r2, [pc, #364]	@ (8003ad0 <HAL_GPIO_DeInit+0x1dc>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d01f      	beq.n	80039a6 <HAL_GPIO_DeInit+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a5a      	ldr	r2, [pc, #360]	@ (8003ad4 <HAL_GPIO_DeInit+0x1e0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d019      	beq.n	80039a2 <HAL_GPIO_DeInit+0xae>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a59      	ldr	r2, [pc, #356]	@ (8003ad8 <HAL_GPIO_DeInit+0x1e4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d013      	beq.n	800399e <HAL_GPIO_DeInit+0xaa>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a58      	ldr	r2, [pc, #352]	@ (8003adc <HAL_GPIO_DeInit+0x1e8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00d      	beq.n	800399a <HAL_GPIO_DeInit+0xa6>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a57      	ldr	r2, [pc, #348]	@ (8003ae0 <HAL_GPIO_DeInit+0x1ec>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d007      	beq.n	8003996 <HAL_GPIO_DeInit+0xa2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a56      	ldr	r2, [pc, #344]	@ (8003ae4 <HAL_GPIO_DeInit+0x1f0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d101      	bne.n	8003992 <HAL_GPIO_DeInit+0x9e>
 800398e:	2307      	movs	r3, #7
 8003990:	e00e      	b.n	80039b0 <HAL_GPIO_DeInit+0xbc>
 8003992:	2308      	movs	r3, #8
 8003994:	e00c      	b.n	80039b0 <HAL_GPIO_DeInit+0xbc>
 8003996:	2306      	movs	r3, #6
 8003998:	e00a      	b.n	80039b0 <HAL_GPIO_DeInit+0xbc>
 800399a:	2305      	movs	r3, #5
 800399c:	e008      	b.n	80039b0 <HAL_GPIO_DeInit+0xbc>
 800399e:	2304      	movs	r3, #4
 80039a0:	e006      	b.n	80039b0 <HAL_GPIO_DeInit+0xbc>
 80039a2:	2303      	movs	r3, #3
 80039a4:	e004      	b.n	80039b0 <HAL_GPIO_DeInit+0xbc>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e002      	b.n	80039b0 <HAL_GPIO_DeInit+0xbc>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <HAL_GPIO_DeInit+0xbc>
 80039ae:	2300      	movs	r3, #0
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	f002 0203 	and.w	r2, r2, #3
 80039b6:	0092      	lsls	r2, r2, #2
 80039b8:	4093      	lsls	r3, r2
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d132      	bne.n	8003a26 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80039c0:	4b49      	ldr	r3, [pc, #292]	@ (8003ae8 <HAL_GPIO_DeInit+0x1f4>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	43db      	mvns	r3, r3
 80039c8:	4947      	ldr	r1, [pc, #284]	@ (8003ae8 <HAL_GPIO_DeInit+0x1f4>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80039ce:	4b46      	ldr	r3, [pc, #280]	@ (8003ae8 <HAL_GPIO_DeInit+0x1f4>)
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	4944      	ldr	r1, [pc, #272]	@ (8003ae8 <HAL_GPIO_DeInit+0x1f4>)
 80039d8:	4013      	ands	r3, r2
 80039da:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80039dc:	4b42      	ldr	r3, [pc, #264]	@ (8003ae8 <HAL_GPIO_DeInit+0x1f4>)
 80039de:	68da      	ldr	r2, [r3, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	43db      	mvns	r3, r3
 80039e4:	4940      	ldr	r1, [pc, #256]	@ (8003ae8 <HAL_GPIO_DeInit+0x1f4>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80039ea:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae8 <HAL_GPIO_DeInit+0x1f4>)
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	493d      	ldr	r1, [pc, #244]	@ (8003ae8 <HAL_GPIO_DeInit+0x1f4>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f003 0303 	and.w	r3, r3, #3
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	220f      	movs	r2, #15
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003a08:	4a2e      	ldr	r2, [pc, #184]	@ (8003ac4 <HAL_GPIO_DeInit+0x1d0>)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	089b      	lsrs	r3, r3, #2
 8003a0e:	3302      	adds	r3, #2
 8003a10:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	43da      	mvns	r2, r3
 8003a18:	482a      	ldr	r0, [pc, #168]	@ (8003ac4 <HAL_GPIO_DeInit+0x1d0>)
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	089b      	lsrs	r3, r3, #2
 8003a1e:	400a      	ands	r2, r1
 8003a20:	3302      	adds	r3, #2
 8003a22:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	2103      	movs	r1, #3
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	43db      	mvns	r3, r3
 8003a36:	401a      	ands	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	08da      	lsrs	r2, r3, #3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3208      	adds	r2, #8
 8003a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	08d2      	lsrs	r2, r2, #3
 8003a5c:	4019      	ands	r1, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3208      	adds	r2, #8
 8003a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	2103      	movs	r1, #3
 8003a70:	fa01 f303 	lsl.w	r3, r1, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	401a      	ands	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	2101      	movs	r1, #1
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	fa01 f303 	lsl.w	r3, r1, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	401a      	ands	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	2103      	movs	r1, #3
 8003a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	401a      	ands	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	2b0f      	cmp	r3, #15
 8003ab0:	f67f af2e 	bls.w	8003910 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	371c      	adds	r7, #28
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40013800 	.word	0x40013800
 8003ac8:	40020000 	.word	0x40020000
 8003acc:	40020400 	.word	0x40020400
 8003ad0:	40020800 	.word	0x40020800
 8003ad4:	40020c00 	.word	0x40020c00
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40021400 	.word	0x40021400
 8003ae0:	40021800 	.word	0x40021800
 8003ae4:	40021c00 	.word	0x40021c00
 8003ae8:	40013c00 	.word	0x40013c00

08003aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	807b      	strh	r3, [r7, #2]
 8003af8:	4613      	mov	r3, r2
 8003afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003afc:	787b      	ldrb	r3, [r7, #1]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b02:	887a      	ldrh	r2, [r7, #2]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b08:	e003      	b.n	8003b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b0a:	887b      	ldrh	r3, [r7, #2]
 8003b0c:	041a      	lsls	r2, r3, #16
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	619a      	str	r2, [r3, #24]
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e12b      	b.n	8003d8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7fe fb6e 	bl	8002228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2224      	movs	r2, #36	@ 0x24
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0201 	bic.w	r2, r2, #1
 8003b62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b84:	f002 feb2 	bl	80068ec <HAL_RCC_GetPCLK1Freq>
 8003b88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	4a81      	ldr	r2, [pc, #516]	@ (8003d94 <HAL_I2C_Init+0x274>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d807      	bhi.n	8003ba4 <HAL_I2C_Init+0x84>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a80      	ldr	r2, [pc, #512]	@ (8003d98 <HAL_I2C_Init+0x278>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	bf94      	ite	ls
 8003b9c:	2301      	movls	r3, #1
 8003b9e:	2300      	movhi	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e006      	b.n	8003bb2 <HAL_I2C_Init+0x92>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4a7d      	ldr	r2, [pc, #500]	@ (8003d9c <HAL_I2C_Init+0x27c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	bf94      	ite	ls
 8003bac:	2301      	movls	r3, #1
 8003bae:	2300      	movhi	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e0e7      	b.n	8003d8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4a78      	ldr	r2, [pc, #480]	@ (8003da0 <HAL_I2C_Init+0x280>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	0c9b      	lsrs	r3, r3, #18
 8003bc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	4a6a      	ldr	r2, [pc, #424]	@ (8003d94 <HAL_I2C_Init+0x274>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d802      	bhi.n	8003bf4 <HAL_I2C_Init+0xd4>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	e009      	b.n	8003c08 <HAL_I2C_Init+0xe8>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	4a69      	ldr	r2, [pc, #420]	@ (8003da4 <HAL_I2C_Init+0x284>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	3301      	adds	r3, #1
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6812      	ldr	r2, [r2, #0]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	495c      	ldr	r1, [pc, #368]	@ (8003d94 <HAL_I2C_Init+0x274>)
 8003c24:	428b      	cmp	r3, r1
 8003c26:	d819      	bhi.n	8003c5c <HAL_I2C_Init+0x13c>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1e59      	subs	r1, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c36:	1c59      	adds	r1, r3, #1
 8003c38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c3c:	400b      	ands	r3, r1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_I2C_Init+0x138>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1e59      	subs	r1, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c50:	3301      	adds	r3, #1
 8003c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c56:	e051      	b.n	8003cfc <HAL_I2C_Init+0x1dc>
 8003c58:	2304      	movs	r3, #4
 8003c5a:	e04f      	b.n	8003cfc <HAL_I2C_Init+0x1dc>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d111      	bne.n	8003c88 <HAL_I2C_Init+0x168>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	1e58      	subs	r0, r3, #1
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6859      	ldr	r1, [r3, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	440b      	add	r3, r1
 8003c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c76:	3301      	adds	r3, #1
 8003c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bf0c      	ite	eq
 8003c80:	2301      	moveq	r3, #1
 8003c82:	2300      	movne	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	e012      	b.n	8003cae <HAL_I2C_Init+0x18e>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	1e58      	subs	r0, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6859      	ldr	r1, [r3, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	0099      	lsls	r1, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_I2C_Init+0x196>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e022      	b.n	8003cfc <HAL_I2C_Init+0x1dc>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10e      	bne.n	8003cdc <HAL_I2C_Init+0x1bc>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	1e58      	subs	r0, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6859      	ldr	r1, [r3, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	440b      	add	r3, r1
 8003ccc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cda:	e00f      	b.n	8003cfc <HAL_I2C_Init+0x1dc>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	1e58      	subs	r0, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	0099      	lsls	r1, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	6809      	ldr	r1, [r1, #0]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	69da      	ldr	r2, [r3, #28]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6911      	ldr	r1, [r2, #16]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	68d2      	ldr	r2, [r2, #12]
 8003d36:	4311      	orrs	r1, r2
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6812      	ldr	r2, [r2, #0]
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695a      	ldr	r2, [r3, #20]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0201 	orr.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2220      	movs	r2, #32
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	000186a0 	.word	0x000186a0
 8003d98:	001e847f 	.word	0x001e847f
 8003d9c:	003d08ff 	.word	0x003d08ff
 8003da0:	431bde83 	.word	0x431bde83
 8003da4:	10624dd3 	.word	0x10624dd3

08003da8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	4608      	mov	r0, r1
 8003db2:	4611      	mov	r1, r2
 8003db4:	461a      	mov	r2, r3
 8003db6:	4603      	mov	r3, r0
 8003db8:	817b      	strh	r3, [r7, #10]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	813b      	strh	r3, [r7, #8]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dc2:	f7fe ff93 	bl	8002cec <HAL_GetTick>
 8003dc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	f040 80d9 	bne.w	8003f88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	2319      	movs	r3, #25
 8003ddc:	2201      	movs	r2, #1
 8003dde:	496d      	ldr	r1, [pc, #436]	@ (8003f94 <HAL_I2C_Mem_Write+0x1ec>)
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fc8b 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
 8003dee:	e0cc      	b.n	8003f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_I2C_Mem_Write+0x56>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e0c5      	b.n	8003f8a <HAL_I2C_Mem_Write+0x1e2>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d007      	beq.n	8003e24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2221      	movs	r2, #33	@ 0x21
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2240      	movs	r2, #64	@ 0x40
 8003e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a3a      	ldr	r2, [r7, #32]
 8003e4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a4d      	ldr	r2, [pc, #308]	@ (8003f98 <HAL_I2C_Mem_Write+0x1f0>)
 8003e64:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e66:	88f8      	ldrh	r0, [r7, #6]
 8003e68:	893a      	ldrh	r2, [r7, #8]
 8003e6a:	8979      	ldrh	r1, [r7, #10]
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	9301      	str	r3, [sp, #4]
 8003e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	4603      	mov	r3, r0
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 fac2 	bl	8004400 <I2C_RequestMemoryWrite>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d052      	beq.n	8003f28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e081      	b.n	8003f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 fd50 	bl	8004930 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d107      	bne.n	8003eae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06b      	b.n	8003f8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	781a      	ldrb	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d11b      	bne.n	8003f28 <HAL_I2C_Mem_Write+0x180>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d017      	beq.n	8003f28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efc:	781a      	ldrb	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1aa      	bne.n	8003e86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fd43 	bl	80049c0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00d      	beq.n	8003f5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d107      	bne.n	8003f58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e016      	b.n	8003f8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	e000      	b.n	8003f8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003f88:	2302      	movs	r3, #2
  }
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	00100002 	.word	0x00100002
 8003f98:	ffff0000 	.word	0xffff0000

08003f9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08c      	sub	sp, #48	@ 0x30
 8003fa0:	af02      	add	r7, sp, #8
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	4608      	mov	r0, r1
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	461a      	mov	r2, r3
 8003faa:	4603      	mov	r3, r0
 8003fac:	817b      	strh	r3, [r7, #10]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	813b      	strh	r3, [r7, #8]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fb6:	f7fe fe99 	bl	8002cec <HAL_GetTick>
 8003fba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	f040 8214 	bne.w	80043f2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2319      	movs	r3, #25
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	497b      	ldr	r1, [pc, #492]	@ (80041c0 <HAL_I2C_Mem_Read+0x224>)
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 fb91 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e207      	b.n	80043f4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_I2C_Mem_Read+0x56>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e200      	b.n	80043f4 <HAL_I2C_Mem_Read+0x458>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b01      	cmp	r3, #1
 8004006:	d007      	beq.n	8004018 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004026:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2222      	movs	r2, #34	@ 0x22
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2240      	movs	r2, #64	@ 0x40
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004042:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004048:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a5b      	ldr	r2, [pc, #364]	@ (80041c4 <HAL_I2C_Mem_Read+0x228>)
 8004058:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800405a:	88f8      	ldrh	r0, [r7, #6]
 800405c:	893a      	ldrh	r2, [r7, #8]
 800405e:	8979      	ldrh	r1, [r7, #10]
 8004060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	4603      	mov	r3, r0
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fa5e 	bl	800452c <I2C_RequestMemoryRead>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e1bc      	b.n	80043f4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407e:	2b00      	cmp	r3, #0
 8004080:	d113      	bne.n	80040aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004082:	2300      	movs	r3, #0
 8004084:	623b      	str	r3, [r7, #32]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	623b      	str	r3, [r7, #32]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	623b      	str	r3, [r7, #32]
 8004096:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e190      	b.n	80043cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d11b      	bne.n	80040ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040c2:	2300      	movs	r3, #0
 80040c4:	61fb      	str	r3, [r7, #28]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	61fb      	str	r3, [r7, #28]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	61fb      	str	r3, [r7, #28]
 80040d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	e170      	b.n	80043cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d11b      	bne.n	800412a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004100:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004110:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004112:	2300      	movs	r3, #0
 8004114:	61bb      	str	r3, [r7, #24]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	61bb      	str	r3, [r7, #24]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	e150      	b.n	80043cc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004140:	e144      	b.n	80043cc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004146:	2b03      	cmp	r3, #3
 8004148:	f200 80f1 	bhi.w	800432e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004150:	2b01      	cmp	r3, #1
 8004152:	d123      	bne.n	800419c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004156:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 fc79 	bl	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e145      	b.n	80043f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417a:	1c5a      	adds	r2, r3, #1
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	3b01      	subs	r3, #1
 8004194:	b29a      	uxth	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800419a:	e117      	b.n	80043cc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d14e      	bne.n	8004242 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041aa:	2200      	movs	r2, #0
 80041ac:	4906      	ldr	r1, [pc, #24]	@ (80041c8 <HAL_I2C_Mem_Read+0x22c>)
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 faa4 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e11a      	b.n	80043f4 <HAL_I2C_Mem_Read+0x458>
 80041be:	bf00      	nop
 80041c0:	00100002 	.word	0x00100002
 80041c4:	ffff0000 	.word	0xffff0000
 80041c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004218:	b2d2      	uxtb	r2, r2
 800421a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422a:	3b01      	subs	r3, #1
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004240:	e0c4      	b.n	80043cc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004248:	2200      	movs	r2, #0
 800424a:	496c      	ldr	r1, [pc, #432]	@ (80043fc <HAL_I2C_Mem_Read+0x460>)
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 fa55 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0cb      	b.n	80043f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800426a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004288:	3b01      	subs	r3, #1
 800428a:	b29a      	uxth	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800429e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a4:	2200      	movs	r2, #0
 80042a6:	4955      	ldr	r1, [pc, #340]	@ (80043fc <HAL_I2C_Mem_Read+0x460>)
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 fa27 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e09d      	b.n	80043f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800432c:	e04e      	b.n	80043cc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800432e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004330:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 fb8c 	bl	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e058      	b.n	80043f4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b04      	cmp	r3, #4
 8004380:	d124      	bne.n	80043cc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004386:	2b03      	cmp	r3, #3
 8004388:	d107      	bne.n	800439a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004398:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f47f aeb6 	bne.w	8004142 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e000      	b.n	80043f4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80043f2:	2302      	movs	r3, #2
  }
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3728      	adds	r7, #40	@ 0x28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	00010004 	.word	0x00010004

08004400 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	4608      	mov	r0, r1
 800440a:	4611      	mov	r1, r2
 800440c:	461a      	mov	r2, r3
 800440e:	4603      	mov	r3, r0
 8004410:	817b      	strh	r3, [r7, #10]
 8004412:	460b      	mov	r3, r1
 8004414:	813b      	strh	r3, [r7, #8]
 8004416:	4613      	mov	r3, r2
 8004418:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004428:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800442a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	2200      	movs	r2, #0
 8004432:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f960 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00d      	beq.n	800445e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800444c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004450:	d103      	bne.n	800445a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004458:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e05f      	b.n	800451e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800445e:	897b      	ldrh	r3, [r7, #10]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800446c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	492d      	ldr	r1, [pc, #180]	@ (8004528 <I2C_RequestMemoryWrite+0x128>)
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f9bb 	bl	80047f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e04c      	b.n	800451e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800449a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800449c:	6a39      	ldr	r1, [r7, #32]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f000 fa46 	bl	8004930 <I2C_WaitOnTXEFlagUntilTimeout>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00d      	beq.n	80044c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d107      	bne.n	80044c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e02b      	b.n	800451e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d105      	bne.n	80044d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044cc:	893b      	ldrh	r3, [r7, #8]
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	611a      	str	r2, [r3, #16]
 80044d6:	e021      	b.n	800451c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044d8:	893b      	ldrh	r3, [r7, #8]
 80044da:	0a1b      	lsrs	r3, r3, #8
 80044dc:	b29b      	uxth	r3, r3
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044e8:	6a39      	ldr	r1, [r7, #32]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 fa20 	bl	8004930 <I2C_WaitOnTXEFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00d      	beq.n	8004512 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d107      	bne.n	800450e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800450c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e005      	b.n	800451e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004512:	893b      	ldrh	r3, [r7, #8]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	00010002 	.word	0x00010002

0800452c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	4608      	mov	r0, r1
 8004536:	4611      	mov	r1, r2
 8004538:	461a      	mov	r2, r3
 800453a:	4603      	mov	r3, r0
 800453c:	817b      	strh	r3, [r7, #10]
 800453e:	460b      	mov	r3, r1
 8004540:	813b      	strh	r3, [r7, #8]
 8004542:	4613      	mov	r3, r2
 8004544:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004554:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004564:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	2200      	movs	r2, #0
 800456e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f000 f8c2 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00d      	beq.n	800459a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800458c:	d103      	bne.n	8004596 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004594:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e0aa      	b.n	80046f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800459a:	897b      	ldrh	r3, [r7, #10]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	6a3a      	ldr	r2, [r7, #32]
 80045ae:	4952      	ldr	r1, [pc, #328]	@ (80046f8 <I2C_RequestMemoryRead+0x1cc>)
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f91d 	bl	80047f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e097      	b.n	80046f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d8:	6a39      	ldr	r1, [r7, #32]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 f9a8 	bl	8004930 <I2C_WaitOnTXEFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00d      	beq.n	8004602 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	2b04      	cmp	r3, #4
 80045ec:	d107      	bne.n	80045fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e076      	b.n	80046f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004602:	88fb      	ldrh	r3, [r7, #6]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d105      	bne.n	8004614 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004608:	893b      	ldrh	r3, [r7, #8]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	611a      	str	r2, [r3, #16]
 8004612:	e021      	b.n	8004658 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004614:	893b      	ldrh	r3, [r7, #8]
 8004616:	0a1b      	lsrs	r3, r3, #8
 8004618:	b29b      	uxth	r3, r3
 800461a:	b2da      	uxtb	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004624:	6a39      	ldr	r1, [r7, #32]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f982 	bl	8004930 <I2C_WaitOnTXEFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00d      	beq.n	800464e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	2b04      	cmp	r3, #4
 8004638:	d107      	bne.n	800464a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004648:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e050      	b.n	80046f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800464e:	893b      	ldrh	r3, [r7, #8]
 8004650:	b2da      	uxtb	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004658:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800465a:	6a39      	ldr	r1, [r7, #32]
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f967 	bl	8004930 <I2C_WaitOnTXEFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00d      	beq.n	8004684 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466c:	2b04      	cmp	r3, #4
 800466e:	d107      	bne.n	8004680 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800467e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e035      	b.n	80046f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004692:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	2200      	movs	r2, #0
 800469c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f82b 	bl	80046fc <I2C_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00d      	beq.n	80046c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046ba:	d103      	bne.n	80046c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e013      	b.n	80046f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046c8:	897b      	ldrh	r3, [r7, #10]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046da:	6a3a      	ldr	r2, [r7, #32]
 80046dc:	4906      	ldr	r1, [pc, #24]	@ (80046f8 <I2C_RequestMemoryRead+0x1cc>)
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f886 	bl	80047f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	00010002 	.word	0x00010002

080046fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800470c:	e048      	b.n	80047a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d044      	beq.n	80047a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004716:	f7fe fae9 	bl	8002cec <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d302      	bcc.n	800472c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d139      	bne.n	80047a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	0c1b      	lsrs	r3, r3, #16
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b01      	cmp	r3, #1
 8004734:	d10d      	bne.n	8004752 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695b      	ldr	r3, [r3, #20]
 800473c:	43da      	mvns	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4013      	ands	r3, r2
 8004742:	b29b      	uxth	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	bf0c      	ite	eq
 8004748:	2301      	moveq	r3, #1
 800474a:	2300      	movne	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	461a      	mov	r2, r3
 8004750:	e00c      	b.n	800476c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	43da      	mvns	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	4013      	ands	r3, r2
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	bf0c      	ite	eq
 8004764:	2301      	moveq	r3, #1
 8004766:	2300      	movne	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	461a      	mov	r2, r3
 800476c:	79fb      	ldrb	r3, [r7, #7]
 800476e:	429a      	cmp	r2, r3
 8004770:	d116      	bne.n	80047a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800478c:	f043 0220 	orr.w	r2, r3, #32
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e023      	b.n	80047e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	0c1b      	lsrs	r3, r3, #16
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d10d      	bne.n	80047c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	43da      	mvns	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	4013      	ands	r3, r2
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bf0c      	ite	eq
 80047bc:	2301      	moveq	r3, #1
 80047be:	2300      	movne	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	e00c      	b.n	80047e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	43da      	mvns	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	4013      	ands	r3, r2
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d093      	beq.n	800470e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047fe:	e071      	b.n	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800480e:	d123      	bne.n	8004858 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800481e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004828:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004844:	f043 0204 	orr.w	r2, r3, #4
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e067      	b.n	8004928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485e:	d041      	beq.n	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004860:	f7fe fa44 	bl	8002cec <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	429a      	cmp	r2, r3
 800486e:	d302      	bcc.n	8004876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d136      	bne.n	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10c      	bne.n	800489a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	43da      	mvns	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4013      	ands	r3, r2
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf14      	ite	ne
 8004892:	2301      	movne	r3, #1
 8004894:	2300      	moveq	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	e00b      	b.n	80048b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	43da      	mvns	r2, r3
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	4013      	ands	r3, r2
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bf14      	ite	ne
 80048ac:	2301      	movne	r3, #1
 80048ae:	2300      	moveq	r3, #0
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d016      	beq.n	80048e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d0:	f043 0220 	orr.w	r2, r3, #32
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e021      	b.n	8004928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	0c1b      	lsrs	r3, r3, #16
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d10c      	bne.n	8004908 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	43da      	mvns	r2, r3
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4013      	ands	r3, r2
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bf14      	ite	ne
 8004900:	2301      	movne	r3, #1
 8004902:	2300      	moveq	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	e00b      	b.n	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	43da      	mvns	r2, r3
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	4013      	ands	r3, r2
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf14      	ite	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2300      	moveq	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	f47f af6d 	bne.w	8004800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800493c:	e034      	b.n	80049a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f8e3 	bl	8004b0a <I2C_IsAcknowledgeFailed>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e034      	b.n	80049b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d028      	beq.n	80049a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004956:	f7fe f9c9 	bl	8002cec <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	429a      	cmp	r2, r3
 8004964:	d302      	bcc.n	800496c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d11d      	bne.n	80049a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004976:	2b80      	cmp	r3, #128	@ 0x80
 8004978:	d016      	beq.n	80049a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004994:	f043 0220 	orr.w	r2, r3, #32
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e007      	b.n	80049b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b2:	2b80      	cmp	r3, #128	@ 0x80
 80049b4:	d1c3      	bne.n	800493e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049cc:	e034      	b.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f89b 	bl	8004b0a <I2C_IsAcknowledgeFailed>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e034      	b.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d028      	beq.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e6:	f7fe f981 	bl	8002cec <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d11d      	bne.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	f003 0304 	and.w	r3, r3, #4
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d016      	beq.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a24:	f043 0220 	orr.w	r2, r3, #32
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e007      	b.n	8004a48 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d1c3      	bne.n	80049ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a5c:	e049      	b.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d119      	bne.n	8004aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0210 	mvn.w	r2, #16
 8004a74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e030      	b.n	8004b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aa0:	f7fe f924 	bl	8002cec <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d302      	bcc.n	8004ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d11d      	bne.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695b      	ldr	r3, [r3, #20]
 8004abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac0:	2b40      	cmp	r3, #64	@ 0x40
 8004ac2:	d016      	beq.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	f043 0220 	orr.w	r2, r3, #32
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e007      	b.n	8004b02 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afc:	2b40      	cmp	r3, #64	@ 0x40
 8004afe:	d1ae      	bne.n	8004a5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b20:	d11b      	bne.n	8004b5a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b2a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2220      	movs	r2, #32
 8004b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	f043 0204 	orr.w	r2, r3, #4
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af02      	add	r7, sp, #8
 8004b6e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e101      	b.n	8004d7e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d106      	bne.n	8004b9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f009 f959 	bl	800de4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2203      	movs	r2, #3
 8004b9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ba8:	d102      	bne.n	8004bb0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f003 fe62 	bl	800887e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	7c1a      	ldrb	r2, [r3, #16]
 8004bc2:	f88d 2000 	strb.w	r2, [sp]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bca:	f003 fd41 	bl	8008650 <USB_CoreInit>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0ce      	b.n	8004d7e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2100      	movs	r1, #0
 8004be6:	4618      	mov	r0, r3
 8004be8:	f003 fe5a 	bl	80088a0 <USB_SetCurrentMode>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e0bf      	b.n	8004d7e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]
 8004c02:	e04a      	b.n	8004c9a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c04:	7bfa      	ldrb	r2, [r7, #15]
 8004c06:	6879      	ldr	r1, [r7, #4]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	3315      	adds	r3, #21
 8004c14:	2201      	movs	r2, #1
 8004c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c18:	7bfa      	ldrb	r2, [r7, #15]
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	3314      	adds	r3, #20
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c2c:	7bfa      	ldrb	r2, [r7, #15]
 8004c2e:	7bfb      	ldrb	r3, [r7, #15]
 8004c30:	b298      	uxth	r0, r3
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	332e      	adds	r3, #46	@ 0x2e
 8004c40:	4602      	mov	r2, r0
 8004c42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c44:	7bfa      	ldrb	r2, [r7, #15]
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	4413      	add	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	3318      	adds	r3, #24
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c58:	7bfa      	ldrb	r2, [r7, #15]
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	331c      	adds	r3, #28
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c6c:	7bfa      	ldrb	r2, [r7, #15]
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	4613      	mov	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	4413      	add	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	3320      	adds	r3, #32
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c80:	7bfa      	ldrb	r2, [r7, #15]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	440b      	add	r3, r1
 8004c8e:	3324      	adds	r3, #36	@ 0x24
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	3301      	adds	r3, #1
 8004c98:	73fb      	strb	r3, [r7, #15]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	791b      	ldrb	r3, [r3, #4]
 8004c9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d3af      	bcc.n	8004c04 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	73fb      	strb	r3, [r7, #15]
 8004ca8:	e044      	b.n	8004d34 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004caa:	7bfa      	ldrb	r2, [r7, #15]
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cc0:	7bfa      	ldrb	r2, [r7, #15]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4413      	add	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004cd2:	7bfa      	ldrb	r2, [r7, #15]
 8004cd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cd6:	7bfa      	ldrb	r2, [r7, #15]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ce8:	2200      	movs	r2, #0
 8004cea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cec:	7bfa      	ldrb	r2, [r7, #15]
 8004cee:	6879      	ldr	r1, [r7, #4]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	00db      	lsls	r3, r3, #3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d02:	7bfa      	ldrb	r2, [r7, #15]
 8004d04:	6879      	ldr	r1, [r7, #4]
 8004d06:	4613      	mov	r3, r2
 8004d08:	00db      	lsls	r3, r3, #3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	440b      	add	r3, r1
 8004d10:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d18:	7bfa      	ldrb	r2, [r7, #15]
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	3301      	adds	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	791b      	ldrb	r3, [r3, #4]
 8004d38:	7bfa      	ldrb	r2, [r7, #15]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d3b5      	bcc.n	8004caa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	7c1a      	ldrb	r2, [r3, #16]
 8004d46:	f88d 2000 	strb.w	r2, [sp]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d4e:	f003 fdf3 	bl	8008938 <USB_DevInit>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e00c      	b.n	8004d7e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f004 fe3d 	bl	80099f6 <USB_DevDisconnect>

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_PCD_Start+0x1c>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e022      	b.n	8004de8 <HAL_PCD_Start+0x62>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d009      	beq.n	8004dca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d105      	bne.n	8004dca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f003 fd44 	bl	800885c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f004 fdeb 	bl	80099b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b08d      	sub	sp, #52	@ 0x34
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f004 fea9 	bl	8009b5e <USB_GetMode>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f040 848c 	bne.w	800572c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f004 fe0d 	bl	8009a38 <USB_ReadInterrupts>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8482 	beq.w	800572a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	0a1b      	lsrs	r3, r3, #8
 8004e30:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f004 fdfa 	bl	8009a38 <USB_ReadInterrupts>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d107      	bne.n	8004e5e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f002 0202 	and.w	r2, r2, #2
 8004e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f004 fde8 	bl	8009a38 <USB_ReadInterrupts>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b10      	cmp	r3, #16
 8004e70:	d161      	bne.n	8004f36 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0210 	bic.w	r2, r2, #16
 8004e80:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	f003 020f 	and.w	r2, r3, #15
 8004e8e:	4613      	mov	r3, r2
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	0c5b      	lsrs	r3, r3, #17
 8004ea6:	f003 030f 	and.w	r3, r3, #15
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d124      	bne.n	8004ef8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d035      	beq.n	8004f26 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	091b      	lsrs	r3, r3, #4
 8004ec2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	6a38      	ldr	r0, [r7, #32]
 8004ece:	f004 fc1f 	bl	8009710 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	091b      	lsrs	r3, r3, #4
 8004eda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ede:	441a      	add	r2, r3
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	091b      	lsrs	r3, r3, #4
 8004eec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ef0:	441a      	add	r2, r3
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	615a      	str	r2, [r3, #20]
 8004ef6:	e016      	b.n	8004f26 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	0c5b      	lsrs	r3, r3, #17
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	2b06      	cmp	r3, #6
 8004f02:	d110      	bne.n	8004f26 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	6a38      	ldr	r0, [r7, #32]
 8004f10:	f004 fbfe 	bl	8009710 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	695a      	ldr	r2, [r3, #20]
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	091b      	lsrs	r3, r3, #4
 8004f1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f20:	441a      	add	r2, r3
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699a      	ldr	r2, [r3, #24]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0210 	orr.w	r2, r2, #16
 8004f34:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f004 fd7c 	bl	8009a38 <USB_ReadInterrupts>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f46:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004f4a:	f040 80a7 	bne.w	800509c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f004 fd81 	bl	8009a5e <USB_ReadDevAllOutEpInterrupt>
 8004f5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004f5e:	e099      	b.n	8005094 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 808e 	beq.w	8005088 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	4611      	mov	r1, r2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f004 fda5 	bl	8009ac6 <USB_ReadDevOutEPInterrupt>
 8004f7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00c      	beq.n	8004fa2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f94:	461a      	mov	r2, r3
 8004f96:	2301      	movs	r3, #1
 8004f98:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004f9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fea3 	bl	8005ce8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00c      	beq.n	8004fc6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fb8:	461a      	mov	r2, r3
 8004fba:	2308      	movs	r3, #8
 8004fbc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004fbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 ff79 	bl	8005eb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d008      	beq.n	8004fe2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fdc:	461a      	mov	r2, r3
 8004fde:	2310      	movs	r3, #16
 8004fe0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d030      	beq.n	800504e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff4:	2b80      	cmp	r3, #128	@ 0x80
 8004ff6:	d109      	bne.n	800500c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	69fa      	ldr	r2, [r7, #28]
 8005002:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800500a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800500c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800500e:	4613      	mov	r3, r2
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	4413      	add	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4413      	add	r3, r2
 800501e:	3304      	adds	r3, #4
 8005020:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	78db      	ldrb	r3, [r3, #3]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d108      	bne.n	800503c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2200      	movs	r2, #0
 800502e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	b2db      	uxtb	r3, r3
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f009 f80e 	bl	800e058 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005048:	461a      	mov	r2, r3
 800504a:	2302      	movs	r3, #2
 800504c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005064:	461a      	mov	r2, r3
 8005066:	2320      	movs	r3, #32
 8005068:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d009      	beq.n	8005088 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005080:	461a      	mov	r2, r3
 8005082:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005086:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508a:	3301      	adds	r3, #1
 800508c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800508e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005090:	085b      	lsrs	r3, r3, #1
 8005092:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005096:	2b00      	cmp	r3, #0
 8005098:	f47f af62 	bne.w	8004f60 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f004 fcc9 	bl	8009a38 <USB_ReadInterrupts>
 80050a6:	4603      	mov	r3, r0
 80050a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80050b0:	f040 80db 	bne.w	800526a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f004 fcea 	bl	8009a92 <USB_ReadDevAllInEpInterrupt>
 80050be:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80050c4:	e0cd      	b.n	8005262 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80050c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f000 80c2 	beq.w	8005256 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	4611      	mov	r1, r2
 80050dc:	4618      	mov	r0, r3
 80050de:	f004 fd10 	bl	8009b02 <USB_ReadDevInEPInterrupt>
 80050e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d057      	beq.n	800519e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	2201      	movs	r2, #1
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	43db      	mvns	r3, r3
 8005108:	69f9      	ldr	r1, [r7, #28]
 800510a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800510e:	4013      	ands	r3, r2
 8005110:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800511e:	461a      	mov	r2, r3
 8005120:	2301      	movs	r3, #1
 8005122:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	799b      	ldrb	r3, [r3, #6]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d132      	bne.n	8005192 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005130:	4613      	mov	r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	3320      	adds	r3, #32
 800513c:	6819      	ldr	r1, [r3, #0]
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005142:	4613      	mov	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4403      	add	r3, r0
 800514c:	331c      	adds	r3, #28
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4419      	add	r1, r3
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005156:	4613      	mov	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4403      	add	r3, r0
 8005160:	3320      	adds	r3, #32
 8005162:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	2b00      	cmp	r3, #0
 8005168:	d113      	bne.n	8005192 <HAL_PCD_IRQHandler+0x3a2>
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800516e:	4613      	mov	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	3324      	adds	r3, #36	@ 0x24
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d108      	bne.n	8005192 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800518a:	461a      	mov	r2, r3
 800518c:	2101      	movs	r1, #1
 800518e:	f004 fd17 	bl	8009bc0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005194:	b2db      	uxtb	r3, r3
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f008 fed8 	bl	800df4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b4:	461a      	mov	r2, r3
 80051b6:	2308      	movs	r3, #8
 80051b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d008      	beq.n	80051d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d0:	461a      	mov	r2, r3
 80051d2:	2310      	movs	r3, #16
 80051d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051ec:	461a      	mov	r2, r3
 80051ee:	2340      	movs	r3, #64	@ 0x40
 80051f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d023      	beq.n	8005244 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80051fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80051fe:	6a38      	ldr	r0, [r7, #32]
 8005200:	f003 fcfe 	bl	8008c00 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005206:	4613      	mov	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4413      	add	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	3310      	adds	r3, #16
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	4413      	add	r3, r2
 8005214:	3304      	adds	r3, #4
 8005216:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	78db      	ldrb	r3, [r3, #3]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d108      	bne.n	8005232 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2200      	movs	r2, #0
 8005224:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	b2db      	uxtb	r3, r3
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f008 ff25 	bl	800e07c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800523e:	461a      	mov	r2, r3
 8005240:	2302      	movs	r3, #2
 8005242:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800524e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fcbd 	bl	8005bd0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	3301      	adds	r3, #1
 800525a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	085b      	lsrs	r3, r3, #1
 8005260:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	2b00      	cmp	r3, #0
 8005266:	f47f af2e 	bne.w	80050c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f004 fbe2 	bl	8009a38 <USB_ReadInterrupts>
 8005274:	4603      	mov	r3, r0
 8005276:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800527a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800527e:	d122      	bne.n	80052c6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	69fa      	ldr	r2, [r7, #28]
 800528a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800528e:	f023 0301 	bic.w	r3, r3, #1
 8005292:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800529a:	2b01      	cmp	r3, #1
 800529c:	d108      	bne.n	80052b0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80052a6:	2100      	movs	r1, #0
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 fea3 	bl	8005ff4 <HAL_PCDEx_LPM_Callback>
 80052ae:	e002      	b.n	80052b6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f008 fec3 	bl	800e03c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80052c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f004 fbb4 	bl	8009a38 <USB_ReadInterrupts>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052da:	d112      	bne.n	8005302 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d102      	bne.n	80052f2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f008 fe7f 	bl	800dff0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005300:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f004 fb96 	bl	8009a38 <USB_ReadInterrupts>
 800530c:	4603      	mov	r3, r0
 800530e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005316:	f040 80b7 	bne.w	8005488 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2110      	movs	r1, #16
 8005334:	4618      	mov	r0, r3
 8005336:	f003 fc63 	bl	8008c00 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800533a:	2300      	movs	r3, #0
 800533c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800533e:	e046      	b.n	80053ce <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800534c:	461a      	mov	r2, r3
 800534e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005352:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005364:	0151      	lsls	r1, r2, #5
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	440a      	add	r2, r1
 800536a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800536e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005372:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005380:	461a      	mov	r2, r3
 8005382:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005386:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80053a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80053c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ca:	3301      	adds	r3, #1
 80053cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	791b      	ldrb	r3, [r3, #4]
 80053d2:	461a      	mov	r2, r3
 80053d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d3b2      	bcc.n	8005340 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053e8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80053ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	7bdb      	ldrb	r3, [r3, #15]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d016      	beq.n	8005424 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005400:	69fa      	ldr	r2, [r7, #28]
 8005402:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005406:	f043 030b 	orr.w	r3, r3, #11
 800540a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800541c:	f043 030b 	orr.w	r3, r3, #11
 8005420:	6453      	str	r3, [r2, #68]	@ 0x44
 8005422:	e015      	b.n	8005450 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	69fa      	ldr	r2, [r7, #28]
 800542e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005432:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005436:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800543a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800544a:	f043 030b 	orr.w	r3, r3, #11
 800544e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	69fa      	ldr	r2, [r7, #28]
 800545a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800545e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005462:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005472:	461a      	mov	r2, r3
 8005474:	f004 fba4 	bl	8009bc0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005486:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f004 fad3 	bl	8009a38 <USB_ReadInterrupts>
 8005492:	4603      	mov	r3, r0
 8005494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800549c:	d123      	bne.n	80054e6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f004 fb69 	bl	8009b7a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f003 fc20 	bl	8008cf2 <USB_GetDevSpeed>
 80054b2:	4603      	mov	r3, r0
 80054b4:	461a      	mov	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681c      	ldr	r4, [r3, #0]
 80054be:	f001 fa09 	bl	80068d4 <HAL_RCC_GetHCLKFreq>
 80054c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80054c8:	461a      	mov	r2, r3
 80054ca:	4620      	mov	r0, r4
 80054cc:	f003 f924 	bl	8008718 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f008 fd64 	bl	800df9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695a      	ldr	r2, [r3, #20]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80054e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f004 faa4 	bl	8009a38 <USB_ReadInterrupts>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d10a      	bne.n	8005510 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f008 fd41 	bl	800df82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695a      	ldr	r2, [r3, #20]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f002 0208 	and.w	r2, r2, #8
 800550e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f004 fa8f 	bl	8009a38 <USB_ReadInterrupts>
 800551a:	4603      	mov	r3, r0
 800551c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005520:	2b80      	cmp	r3, #128	@ 0x80
 8005522:	d123      	bne.n	800556c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005530:	2301      	movs	r3, #1
 8005532:	627b      	str	r3, [r7, #36]	@ 0x24
 8005534:	e014      	b.n	8005560 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800553a:	4613      	mov	r3, r2
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	440b      	add	r3, r1
 8005544:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d105      	bne.n	800555a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	b2db      	uxtb	r3, r3
 8005552:	4619      	mov	r1, r3
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fb0a 	bl	8005b6e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	3301      	adds	r3, #1
 800555e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	791b      	ldrb	r3, [r3, #4]
 8005564:	461a      	mov	r2, r3
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	4293      	cmp	r3, r2
 800556a:	d3e4      	bcc.n	8005536 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f004 fa61 	bl	8009a38 <USB_ReadInterrupts>
 8005576:	4603      	mov	r3, r0
 8005578:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800557c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005580:	d13c      	bne.n	80055fc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005582:	2301      	movs	r3, #1
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24
 8005586:	e02b      	b.n	80055e0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	4413      	add	r3, r2
 8005590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005598:	6879      	ldr	r1, [r7, #4]
 800559a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800559c:	4613      	mov	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	3318      	adds	r3, #24
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d115      	bne.n	80055da <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80055ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	da12      	bge.n	80055da <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b8:	4613      	mov	r3, r2
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	440b      	add	r3, r1
 80055c2:	3317      	adds	r3, #23
 80055c4:	2201      	movs	r2, #1
 80055c6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	4619      	mov	r1, r3
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 faca 	bl	8005b6e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	3301      	adds	r3, #1
 80055de:	627b      	str	r3, [r7, #36]	@ 0x24
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	791b      	ldrb	r3, [r3, #4]
 80055e4:	461a      	mov	r2, r3
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d3cd      	bcc.n	8005588 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695a      	ldr	r2, [r3, #20]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80055fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f004 fa19 	bl	8009a38 <USB_ReadInterrupts>
 8005606:	4603      	mov	r3, r0
 8005608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800560c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005610:	d156      	bne.n	80056c0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005612:	2301      	movs	r3, #1
 8005614:	627b      	str	r3, [r7, #36]	@ 0x24
 8005616:	e045      	b.n	80056a4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005628:	6879      	ldr	r1, [r7, #4]
 800562a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800562c:	4613      	mov	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d12e      	bne.n	800569e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005640:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005642:	2b00      	cmp	r3, #0
 8005644:	da2b      	bge.n	800569e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005652:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005656:	429a      	cmp	r2, r3
 8005658:	d121      	bne.n	800569e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800565e:	4613      	mov	r3, r2
 8005660:	00db      	lsls	r3, r3, #3
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800566c:	2201      	movs	r2, #1
 800566e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005696:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800569a:	6053      	str	r3, [r2, #4]
            break;
 800569c:	e008      	b.n	80056b0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800569e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a0:	3301      	adds	r3, #1
 80056a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	791b      	ldrb	r3, [r3, #4]
 80056a8:	461a      	mov	r2, r3
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d3b3      	bcc.n	8005618 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695a      	ldr	r2, [r3, #20]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80056be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f004 f9b7 	bl	8009a38 <USB_ReadInterrupts>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80056d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d4:	d10a      	bne.n	80056ec <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f008 fce2 	bl	800e0a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695a      	ldr	r2, [r3, #20]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80056ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f004 f9a1 	bl	8009a38 <USB_ReadInterrupts>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d115      	bne.n	800572c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f008 fcd2 	bl	800e0bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6859      	ldr	r1, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	430a      	orrs	r2, r1
 8005726:	605a      	str	r2, [r3, #4]
 8005728:	e000      	b.n	800572c <HAL_PCD_IRQHandler+0x93c>
      return;
 800572a:	bf00      	nop
    }
  }
}
 800572c:	3734      	adds	r7, #52	@ 0x34
 800572e:	46bd      	mov	sp, r7
 8005730:	bd90      	pop	{r4, r7, pc}

08005732 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005732:	b580      	push	{r7, lr}
 8005734:	b082      	sub	sp, #8
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	460b      	mov	r3, r1
 800573c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005744:	2b01      	cmp	r3, #1
 8005746:	d101      	bne.n	800574c <HAL_PCD_SetAddress+0x1a>
 8005748:	2302      	movs	r3, #2
 800574a:	e012      	b.n	8005772 <HAL_PCD_SetAddress+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	78fa      	ldrb	r2, [r7, #3]
 8005758:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	78fa      	ldrb	r2, [r7, #3]
 8005760:	4611      	mov	r1, r2
 8005762:	4618      	mov	r0, r3
 8005764:	f004 f900 	bl	8009968 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	4608      	mov	r0, r1
 8005784:	4611      	mov	r1, r2
 8005786:	461a      	mov	r2, r3
 8005788:	4603      	mov	r3, r0
 800578a:	70fb      	strb	r3, [r7, #3]
 800578c:	460b      	mov	r3, r1
 800578e:	803b      	strh	r3, [r7, #0]
 8005790:	4613      	mov	r3, r2
 8005792:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800579c:	2b00      	cmp	r3, #0
 800579e:	da0f      	bge.n	80057c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	f003 020f 	and.w	r2, r3, #15
 80057a6:	4613      	mov	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	3310      	adds	r3, #16
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	4413      	add	r3, r2
 80057b4:	3304      	adds	r3, #4
 80057b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	705a      	strb	r2, [r3, #1]
 80057be:	e00f      	b.n	80057e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	f003 020f 	and.w	r2, r3, #15
 80057c6:	4613      	mov	r3, r2
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	4413      	add	r3, r2
 80057d6:	3304      	adds	r3, #4
 80057d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80057e0:	78fb      	ldrb	r3, [r7, #3]
 80057e2:	f003 030f 	and.w	r3, r3, #15
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80057ec:	883b      	ldrh	r3, [r7, #0]
 80057ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	78ba      	ldrb	r2, [r7, #2]
 80057fa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d004      	beq.n	800580e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800580e:	78bb      	ldrb	r3, [r7, #2]
 8005810:	2b02      	cmp	r3, #2
 8005812:	d102      	bne.n	800581a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_PCD_EP_Open+0xae>
 8005824:	2302      	movs	r3, #2
 8005826:	e00e      	b.n	8005846 <HAL_PCD_EP_Open+0xcc>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68f9      	ldr	r1, [r7, #12]
 8005836:	4618      	mov	r0, r3
 8005838:	f003 fa80 	bl	8008d3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005844:	7afb      	ldrb	r3, [r7, #11]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
 8005856:	460b      	mov	r3, r1
 8005858:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800585a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800585e:	2b00      	cmp	r3, #0
 8005860:	da0f      	bge.n	8005882 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	f003 020f 	and.w	r2, r3, #15
 8005868:	4613      	mov	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	3310      	adds	r3, #16
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	4413      	add	r3, r2
 8005876:	3304      	adds	r3, #4
 8005878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	705a      	strb	r2, [r3, #1]
 8005880:	e00f      	b.n	80058a2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005882:	78fb      	ldrb	r3, [r7, #3]
 8005884:	f003 020f 	and.w	r2, r3, #15
 8005888:	4613      	mov	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	3304      	adds	r3, #4
 800589a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	f003 030f 	and.w	r3, r3, #15
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_PCD_EP_Close+0x6e>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e00e      	b.n	80058da <HAL_PCD_EP_Close+0x8c>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68f9      	ldr	r1, [r7, #12]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f003 fabe 	bl	8008e4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b086      	sub	sp, #24
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
 80058ee:	460b      	mov	r3, r1
 80058f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058f2:	7afb      	ldrb	r3, [r7, #11]
 80058f4:	f003 020f 	and.w	r2, r3, #15
 80058f8:	4613      	mov	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	3304      	adds	r3, #4
 800590a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2200      	movs	r2, #0
 800591c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2200      	movs	r2, #0
 8005922:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005924:	7afb      	ldrb	r3, [r7, #11]
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	b2da      	uxtb	r2, r3
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	799b      	ldrb	r3, [r3, #6]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d102      	bne.n	800593e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6818      	ldr	r0, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	799b      	ldrb	r3, [r3, #6]
 8005946:	461a      	mov	r2, r3
 8005948:	6979      	ldr	r1, [r7, #20]
 800594a:	f003 fb5b 	bl	8009004 <USB_EPStartXfer>

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	f003 020f 	and.w	r2, r3, #15
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	4613      	mov	r3, r2
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800597a:	681b      	ldr	r3, [r3, #0]
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	603b      	str	r3, [r7, #0]
 8005994:	460b      	mov	r3, r1
 8005996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005998:	7afb      	ldrb	r3, [r7, #11]
 800599a:	f003 020f 	and.w	r2, r3, #15
 800599e:	4613      	mov	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	3310      	adds	r3, #16
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	3304      	adds	r3, #4
 80059ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2200      	movs	r2, #0
 80059c0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2201      	movs	r2, #1
 80059c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059c8:	7afb      	ldrb	r3, [r7, #11]
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	799b      	ldrb	r3, [r3, #6]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d102      	bne.n	80059e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	799b      	ldrb	r3, [r3, #6]
 80059ea:	461a      	mov	r2, r3
 80059ec:	6979      	ldr	r1, [r7, #20]
 80059ee:	f003 fb09 	bl	8009004 <USB_EPStartXfer>

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005a08:	78fb      	ldrb	r3, [r7, #3]
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	7912      	ldrb	r2, [r2, #4]
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e04f      	b.n	8005aba <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	da0f      	bge.n	8005a42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a22:	78fb      	ldrb	r3, [r7, #3]
 8005a24:	f003 020f 	and.w	r2, r3, #15
 8005a28:	4613      	mov	r3, r2
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	3310      	adds	r3, #16
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	4413      	add	r3, r2
 8005a36:	3304      	adds	r3, #4
 8005a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	705a      	strb	r2, [r3, #1]
 8005a40:	e00d      	b.n	8005a5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005a42:	78fa      	ldrb	r2, [r7, #3]
 8005a44:	4613      	mov	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	4413      	add	r3, r2
 8005a54:	3304      	adds	r3, #4
 8005a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_PCD_EP_SetStall+0x82>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e01d      	b.n	8005aba <HAL_PCD_EP_SetStall+0xbe>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68f9      	ldr	r1, [r7, #12]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f003 fe97 	bl	80097c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d109      	bne.n	8005ab0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6818      	ldr	r0, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	7999      	ldrb	r1, [r3, #6]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f004 f888 	bl	8009bc0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	460b      	mov	r3, r1
 8005acc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	7912      	ldrb	r2, [r2, #4]
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d901      	bls.n	8005ae0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e042      	b.n	8005b66 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	da0f      	bge.n	8005b08 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ae8:	78fb      	ldrb	r3, [r7, #3]
 8005aea:	f003 020f 	and.w	r2, r3, #15
 8005aee:	4613      	mov	r3, r2
 8005af0:	00db      	lsls	r3, r3, #3
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	3310      	adds	r3, #16
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	4413      	add	r3, r2
 8005afc:	3304      	adds	r3, #4
 8005afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	705a      	strb	r2, [r3, #1]
 8005b06:	e00f      	b.n	8005b28 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	f003 020f 	and.w	r2, r3, #15
 8005b0e:	4613      	mov	r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	3304      	adds	r3, #4
 8005b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_PCD_EP_ClrStall+0x86>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e00e      	b.n	8005b66 <HAL_PCD_EP_ClrStall+0xa4>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68f9      	ldr	r1, [r7, #12]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f003 fea0 	bl	800989c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b084      	sub	sp, #16
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
 8005b76:	460b      	mov	r3, r1
 8005b78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	da0c      	bge.n	8005b9c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	f003 020f 	and.w	r2, r3, #15
 8005b88:	4613      	mov	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	3310      	adds	r3, #16
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	4413      	add	r3, r2
 8005b96:	3304      	adds	r3, #4
 8005b98:	60fb      	str	r3, [r7, #12]
 8005b9a:	e00c      	b.n	8005bb6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	f003 020f 	and.w	r2, r3, #15
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68f9      	ldr	r1, [r7, #12]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f003 fcbf 	bl	8009540 <USB_EPStopXfer>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005bc6:	7afb      	ldrb	r3, [r7, #11]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3710      	adds	r7, #16
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08a      	sub	sp, #40	@ 0x28
 8005bd4:	af02      	add	r7, sp, #8
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	4613      	mov	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	3310      	adds	r3, #16
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	695a      	ldr	r2, [r3, #20]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d901      	bls.n	8005c08 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e06b      	b.n	8005ce0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	695b      	ldr	r3, [r3, #20]
 8005c10:	1ad3      	subs	r3, r2, r3
 8005c12:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d902      	bls.n	8005c24 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	3303      	adds	r3, #3
 8005c28:	089b      	lsrs	r3, r3, #2
 8005c2a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c2c:	e02a      	b.n	8005c84 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	69fa      	ldr	r2, [r7, #28]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d902      	bls.n	8005c4a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	3303      	adds	r3, #3
 8005c4e:	089b      	lsrs	r3, r3, #2
 8005c50:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	68d9      	ldr	r1, [r3, #12]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	4603      	mov	r3, r0
 8005c66:	6978      	ldr	r0, [r7, #20]
 8005c68:	f003 fd14 	bl	8009694 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	441a      	add	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	695a      	ldr	r2, [r3, #20]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	441a      	add	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d809      	bhi.n	8005cae <PCD_WriteEmptyTxFifo+0xde>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	695a      	ldr	r2, [r3, #20]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d203      	bcs.n	8005cae <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1bf      	bne.n	8005c2e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	691a      	ldr	r2, [r3, #16]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d811      	bhi.n	8005cde <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	f003 030f 	and.w	r3, r3, #15
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	43db      	mvns	r3, r3
 8005cd4:	6939      	ldr	r1, [r7, #16]
 8005cd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cda:	4013      	ands	r3, r2
 8005cdc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3720      	adds	r7, #32
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	333c      	adds	r3, #60	@ 0x3c
 8005d00:	3304      	adds	r3, #4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	799b      	ldrb	r3, [r3, #6]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d17b      	bne.n	8005e16 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d015      	beq.n	8005d54 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	4a61      	ldr	r2, [pc, #388]	@ (8005eb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	f240 80b9 	bls.w	8005ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80b3 	beq.w	8005ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d50:	6093      	str	r3, [r2, #8]
 8005d52:	e0a7      	b.n	8005ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d009      	beq.n	8005d72 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2320      	movs	r3, #32
 8005d6e:	6093      	str	r3, [r2, #8]
 8005d70:	e098      	b.n	8005ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f040 8093 	bne.w	8005ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	4a4b      	ldr	r2, [pc, #300]	@ (8005eb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d90f      	bls.n	8005da6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	015a      	lsls	r2, r3, #5
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	4413      	add	r3, r2
 8005d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005da2:	6093      	str	r3, [r2, #8]
 8005da4:	e07e      	b.n	8005ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	4613      	mov	r3, r2
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	4413      	add	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005db4:	687a      	ldr	r2, [r7, #4]
 8005db6:	4413      	add	r3, r2
 8005db8:	3304      	adds	r3, #4
 8005dba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a1a      	ldr	r2, [r3, #32]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	0159      	lsls	r1, r3, #5
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	440b      	add	r3, r1
 8005dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dd2:	1ad2      	subs	r2, r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d114      	bne.n	8005e08 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d109      	bne.n	8005dfa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005df0:	461a      	mov	r2, r3
 8005df2:	2101      	movs	r1, #1
 8005df4:	f003 fee4 	bl	8009bc0 <USB_EP0_OutStart>
 8005df8:	e006      	b.n	8005e08 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	441a      	add	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f008 f882 	bl	800df18 <HAL_PCD_DataOutStageCallback>
 8005e14:	e046      	b.n	8005ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	4a26      	ldr	r2, [pc, #152]	@ (8005eb4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d124      	bne.n	8005e68 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e34:	461a      	mov	r2, r3
 8005e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e3a:	6093      	str	r3, [r2, #8]
 8005e3c:	e032      	b.n	8005ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e54:	461a      	mov	r2, r3
 8005e56:	2320      	movs	r3, #32
 8005e58:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f008 f859 	bl	800df18 <HAL_PCD_DataOutStageCallback>
 8005e66:	e01d      	b.n	8005ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d114      	bne.n	8005e98 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	4613      	mov	r3, r2
 8005e74:	00db      	lsls	r3, r3, #3
 8005e76:	4413      	add	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	440b      	add	r3, r1
 8005e7c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d108      	bne.n	8005e98 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005e90:	461a      	mov	r2, r3
 8005e92:	2100      	movs	r1, #0
 8005e94:	f003 fe94 	bl	8009bc0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f008 f83a 	bl	800df18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3720      	adds	r7, #32
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	4f54300a 	.word	0x4f54300a
 8005eb4:	4f54310a 	.word	0x4f54310a

08005eb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	333c      	adds	r3, #60	@ 0x3c
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4a15      	ldr	r2, [pc, #84]	@ (8005f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d90e      	bls.n	8005f0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d009      	beq.n	8005f0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4413      	add	r3, r2
 8005f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f04:	461a      	mov	r2, r3
 8005f06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f007 fff1 	bl	800def4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	4a0a      	ldr	r2, [pc, #40]	@ (8005f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d90c      	bls.n	8005f34 <PCD_EP_OutSetupPacket_int+0x7c>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	799b      	ldrb	r3, [r3, #6]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d108      	bne.n	8005f34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6818      	ldr	r0, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	2101      	movs	r1, #1
 8005f30:	f003 fe46 	bl	8009bc0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	4f54300a 	.word	0x4f54300a

08005f44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	70fb      	strb	r3, [r7, #3]
 8005f50:	4613      	mov	r3, r2
 8005f52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f5c:	78fb      	ldrb	r3, [r7, #3]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d107      	bne.n	8005f72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f62:	883b      	ldrh	r3, [r7, #0]
 8005f64:	0419      	lsls	r1, r3, #16
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f70:	e028      	b.n	8005fc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f78:	0c1b      	lsrs	r3, r3, #16
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f80:	2300      	movs	r3, #0
 8005f82:	73fb      	strb	r3, [r7, #15]
 8005f84:	e00d      	b.n	8005fa2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	3340      	adds	r3, #64	@ 0x40
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	0c1b      	lsrs	r3, r3, #16
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	4413      	add	r3, r2
 8005f9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	73fb      	strb	r3, [r7, #15]
 8005fa2:	7bfa      	ldrb	r2, [r7, #15]
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d3ec      	bcc.n	8005f86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005fac:	883b      	ldrh	r3, [r7, #0]
 8005fae:	0418      	lsls	r0, r3, #16
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6819      	ldr	r1, [r3, #0]
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	4302      	orrs	r2, r0
 8005fbc:	3340      	adds	r3, #64	@ 0x40
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	887a      	ldrh	r2, [r7, #2]
 8005fe4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e267      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d075      	beq.n	8006116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800602a:	4b88      	ldr	r3, [pc, #544]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 030c 	and.w	r3, r3, #12
 8006032:	2b04      	cmp	r3, #4
 8006034:	d00c      	beq.n	8006050 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006036:	4b85      	ldr	r3, [pc, #532]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800603e:	2b08      	cmp	r3, #8
 8006040:	d112      	bne.n	8006068 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006042:	4b82      	ldr	r3, [pc, #520]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800604a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800604e:	d10b      	bne.n	8006068 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006050:	4b7e      	ldr	r3, [pc, #504]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d05b      	beq.n	8006114 <HAL_RCC_OscConfig+0x108>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d157      	bne.n	8006114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e242      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006070:	d106      	bne.n	8006080 <HAL_RCC_OscConfig+0x74>
 8006072:	4b76      	ldr	r3, [pc, #472]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a75      	ldr	r2, [pc, #468]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 8006078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	e01d      	b.n	80060bc <HAL_RCC_OscConfig+0xb0>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006088:	d10c      	bne.n	80060a4 <HAL_RCC_OscConfig+0x98>
 800608a:	4b70      	ldr	r3, [pc, #448]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a6f      	ldr	r2, [pc, #444]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 8006090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	4b6d      	ldr	r3, [pc, #436]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a6c      	ldr	r2, [pc, #432]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 800609c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	e00b      	b.n	80060bc <HAL_RCC_OscConfig+0xb0>
 80060a4:	4b69      	ldr	r3, [pc, #420]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a68      	ldr	r2, [pc, #416]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 80060aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	4b66      	ldr	r3, [pc, #408]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a65      	ldr	r2, [pc, #404]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 80060b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d013      	beq.n	80060ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c4:	f7fc fe12 	bl	8002cec <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060cc:	f7fc fe0e 	bl	8002cec <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b64      	cmp	r3, #100	@ 0x64
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e207      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060de:	4b5b      	ldr	r3, [pc, #364]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0f0      	beq.n	80060cc <HAL_RCC_OscConfig+0xc0>
 80060ea:	e014      	b.n	8006116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ec:	f7fc fdfe 	bl	8002cec <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060f4:	f7fc fdfa 	bl	8002cec <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b64      	cmp	r3, #100	@ 0x64
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e1f3      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006106:	4b51      	ldr	r3, [pc, #324]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d1f0      	bne.n	80060f4 <HAL_RCC_OscConfig+0xe8>
 8006112:	e000      	b.n	8006116 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d063      	beq.n	80061ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006122:	4b4a      	ldr	r3, [pc, #296]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f003 030c 	and.w	r3, r3, #12
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00b      	beq.n	8006146 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800612e:	4b47      	ldr	r3, [pc, #284]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006136:	2b08      	cmp	r3, #8
 8006138:	d11c      	bne.n	8006174 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800613a:	4b44      	ldr	r3, [pc, #272]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d116      	bne.n	8006174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006146:	4b41      	ldr	r3, [pc, #260]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <HAL_RCC_OscConfig+0x152>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d001      	beq.n	800615e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e1c7      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800615e:	4b3b      	ldr	r3, [pc, #236]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	4937      	ldr	r1, [pc, #220]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 800616e:	4313      	orrs	r3, r2
 8006170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006172:	e03a      	b.n	80061ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d020      	beq.n	80061be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800617c:	4b34      	ldr	r3, [pc, #208]	@ (8006250 <HAL_RCC_OscConfig+0x244>)
 800617e:	2201      	movs	r2, #1
 8006180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006182:	f7fc fdb3 	bl	8002cec <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800618a:	f7fc fdaf 	bl	8002cec <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e1a8      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800619c:	4b2b      	ldr	r3, [pc, #172]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0302 	and.w	r3, r3, #2
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0f0      	beq.n	800618a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a8:	4b28      	ldr	r3, [pc, #160]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	4925      	ldr	r1, [pc, #148]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	600b      	str	r3, [r1, #0]
 80061bc:	e015      	b.n	80061ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061be:	4b24      	ldr	r3, [pc, #144]	@ (8006250 <HAL_RCC_OscConfig+0x244>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c4:	f7fc fd92 	bl	8002cec <HAL_GetTick>
 80061c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ca:	e008      	b.n	80061de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061cc:	f7fc fd8e 	bl	8002cec <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e187      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061de:	4b1b      	ldr	r3, [pc, #108]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f0      	bne.n	80061cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d036      	beq.n	8006264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d016      	beq.n	800622c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061fe:	4b15      	ldr	r3, [pc, #84]	@ (8006254 <HAL_RCC_OscConfig+0x248>)
 8006200:	2201      	movs	r2, #1
 8006202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006204:	f7fc fd72 	bl	8002cec <HAL_GetTick>
 8006208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800620c:	f7fc fd6e 	bl	8002cec <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e167      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800621e:	4b0b      	ldr	r3, [pc, #44]	@ (800624c <HAL_RCC_OscConfig+0x240>)
 8006220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d0f0      	beq.n	800620c <HAL_RCC_OscConfig+0x200>
 800622a:	e01b      	b.n	8006264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800622c:	4b09      	ldr	r3, [pc, #36]	@ (8006254 <HAL_RCC_OscConfig+0x248>)
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006232:	f7fc fd5b 	bl	8002cec <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006238:	e00e      	b.n	8006258 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800623a:	f7fc fd57 	bl	8002cec <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d907      	bls.n	8006258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e150      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
 800624c:	40023800 	.word	0x40023800
 8006250:	42470000 	.word	0x42470000
 8006254:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006258:	4b88      	ldr	r3, [pc, #544]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 800625a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1ea      	bne.n	800623a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0304 	and.w	r3, r3, #4
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 8097 	beq.w	80063a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006272:	2300      	movs	r3, #0
 8006274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006276:	4b81      	ldr	r3, [pc, #516]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 8006278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10f      	bne.n	80062a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006282:	2300      	movs	r3, #0
 8006284:	60bb      	str	r3, [r7, #8]
 8006286:	4b7d      	ldr	r3, [pc, #500]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 8006288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628a:	4a7c      	ldr	r2, [pc, #496]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 800628c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006290:	6413      	str	r3, [r2, #64]	@ 0x40
 8006292:	4b7a      	ldr	r3, [pc, #488]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 8006294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800629a:	60bb      	str	r3, [r7, #8]
 800629c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800629e:	2301      	movs	r3, #1
 80062a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a2:	4b77      	ldr	r3, [pc, #476]	@ (8006480 <HAL_RCC_OscConfig+0x474>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d118      	bne.n	80062e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062ae:	4b74      	ldr	r3, [pc, #464]	@ (8006480 <HAL_RCC_OscConfig+0x474>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a73      	ldr	r2, [pc, #460]	@ (8006480 <HAL_RCC_OscConfig+0x474>)
 80062b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ba:	f7fc fd17 	bl	8002cec <HAL_GetTick>
 80062be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c0:	e008      	b.n	80062d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062c2:	f7fc fd13 	bl	8002cec <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e10c      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d4:	4b6a      	ldr	r3, [pc, #424]	@ (8006480 <HAL_RCC_OscConfig+0x474>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d0f0      	beq.n	80062c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d106      	bne.n	80062f6 <HAL_RCC_OscConfig+0x2ea>
 80062e8:	4b64      	ldr	r3, [pc, #400]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 80062ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ec:	4a63      	ldr	r2, [pc, #396]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 80062ee:	f043 0301 	orr.w	r3, r3, #1
 80062f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80062f4:	e01c      	b.n	8006330 <HAL_RCC_OscConfig+0x324>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	2b05      	cmp	r3, #5
 80062fc:	d10c      	bne.n	8006318 <HAL_RCC_OscConfig+0x30c>
 80062fe:	4b5f      	ldr	r3, [pc, #380]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 8006300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006302:	4a5e      	ldr	r2, [pc, #376]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 8006304:	f043 0304 	orr.w	r3, r3, #4
 8006308:	6713      	str	r3, [r2, #112]	@ 0x70
 800630a:	4b5c      	ldr	r3, [pc, #368]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 800630c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800630e:	4a5b      	ldr	r2, [pc, #364]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 8006310:	f043 0301 	orr.w	r3, r3, #1
 8006314:	6713      	str	r3, [r2, #112]	@ 0x70
 8006316:	e00b      	b.n	8006330 <HAL_RCC_OscConfig+0x324>
 8006318:	4b58      	ldr	r3, [pc, #352]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 800631a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800631c:	4a57      	ldr	r2, [pc, #348]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 800631e:	f023 0301 	bic.w	r3, r3, #1
 8006322:	6713      	str	r3, [r2, #112]	@ 0x70
 8006324:	4b55      	ldr	r3, [pc, #340]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 8006326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006328:	4a54      	ldr	r2, [pc, #336]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 800632a:	f023 0304 	bic.w	r3, r3, #4
 800632e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d015      	beq.n	8006364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006338:	f7fc fcd8 	bl	8002cec <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800633e:	e00a      	b.n	8006356 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006340:	f7fc fcd4 	bl	8002cec <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800634e:	4293      	cmp	r3, r2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e0cb      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006356:	4b49      	ldr	r3, [pc, #292]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 8006358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0ee      	beq.n	8006340 <HAL_RCC_OscConfig+0x334>
 8006362:	e014      	b.n	800638e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006364:	f7fc fcc2 	bl	8002cec <HAL_GetTick>
 8006368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800636a:	e00a      	b.n	8006382 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800636c:	f7fc fcbe 	bl	8002cec <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800637a:	4293      	cmp	r3, r2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e0b5      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006382:	4b3e      	ldr	r3, [pc, #248]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 8006384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1ee      	bne.n	800636c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800638e:	7dfb      	ldrb	r3, [r7, #23]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d105      	bne.n	80063a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006394:	4b39      	ldr	r3, [pc, #228]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 8006396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006398:	4a38      	ldr	r2, [pc, #224]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 800639a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800639e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 80a1 	beq.w	80064ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063aa:	4b34      	ldr	r3, [pc, #208]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 030c 	and.w	r3, r3, #12
 80063b2:	2b08      	cmp	r3, #8
 80063b4:	d05c      	beq.n	8006470 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d141      	bne.n	8006442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063be:	4b31      	ldr	r3, [pc, #196]	@ (8006484 <HAL_RCC_OscConfig+0x478>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c4:	f7fc fc92 	bl	8002cec <HAL_GetTick>
 80063c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ca:	e008      	b.n	80063de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063cc:	f7fc fc8e 	bl	8002cec <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d901      	bls.n	80063de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e087      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063de:	4b27      	ldr	r3, [pc, #156]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1f0      	bne.n	80063cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69da      	ldr	r2, [r3, #28]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	431a      	orrs	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f8:	019b      	lsls	r3, r3, #6
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006400:	085b      	lsrs	r3, r3, #1
 8006402:	3b01      	subs	r3, #1
 8006404:	041b      	lsls	r3, r3, #16
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640c:	061b      	lsls	r3, r3, #24
 800640e:	491b      	ldr	r1, [pc, #108]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 8006410:	4313      	orrs	r3, r2
 8006412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006414:	4b1b      	ldr	r3, [pc, #108]	@ (8006484 <HAL_RCC_OscConfig+0x478>)
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641a:	f7fc fc67 	bl	8002cec <HAL_GetTick>
 800641e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006420:	e008      	b.n	8006434 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006422:	f7fc fc63 	bl	8002cec <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	2b02      	cmp	r3, #2
 800642e:	d901      	bls.n	8006434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006430:	2303      	movs	r3, #3
 8006432:	e05c      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006434:	4b11      	ldr	r3, [pc, #68]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0f0      	beq.n	8006422 <HAL_RCC_OscConfig+0x416>
 8006440:	e054      	b.n	80064ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006442:	4b10      	ldr	r3, [pc, #64]	@ (8006484 <HAL_RCC_OscConfig+0x478>)
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006448:	f7fc fc50 	bl	8002cec <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006450:	f7fc fc4c 	bl	8002cec <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e045      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006462:	4b06      	ldr	r3, [pc, #24]	@ (800647c <HAL_RCC_OscConfig+0x470>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1f0      	bne.n	8006450 <HAL_RCC_OscConfig+0x444>
 800646e:	e03d      	b.n	80064ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d107      	bne.n	8006488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e038      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
 800647c:	40023800 	.word	0x40023800
 8006480:	40007000 	.word	0x40007000
 8006484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006488:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <HAL_RCC_OscConfig+0x4ec>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d028      	beq.n	80064e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d121      	bne.n	80064e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d11a      	bne.n	80064e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064b8:	4013      	ands	r3, r2
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d111      	bne.n	80064e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ce:	085b      	lsrs	r3, r3, #1
 80064d0:	3b01      	subs	r3, #1
 80064d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d107      	bne.n	80064e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d001      	beq.n	80064ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e000      	b.n	80064ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	40023800 	.word	0x40023800

080064fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e0cc      	b.n	80066aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006510:	4b68      	ldr	r3, [pc, #416]	@ (80066b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0307 	and.w	r3, r3, #7
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d90c      	bls.n	8006538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651e:	4b65      	ldr	r3, [pc, #404]	@ (80066b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006526:	4b63      	ldr	r3, [pc, #396]	@ (80066b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0307 	and.w	r3, r3, #7
 800652e:	683a      	ldr	r2, [r7, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d001      	beq.n	8006538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e0b8      	b.n	80066aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0302 	and.w	r3, r3, #2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d020      	beq.n	8006586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006550:	4b59      	ldr	r3, [pc, #356]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	4a58      	ldr	r2, [pc, #352]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800655a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b00      	cmp	r3, #0
 8006566:	d005      	beq.n	8006574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006568:	4b53      	ldr	r3, [pc, #332]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	4a52      	ldr	r2, [pc, #328]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006574:	4b50      	ldr	r3, [pc, #320]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	494d      	ldr	r1, [pc, #308]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006582:	4313      	orrs	r3, r2
 8006584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d044      	beq.n	800661c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d107      	bne.n	80065aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800659a:	4b47      	ldr	r3, [pc, #284]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d119      	bne.n	80065da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e07f      	b.n	80066aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d003      	beq.n	80065ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d107      	bne.n	80065ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ba:	4b3f      	ldr	r3, [pc, #252]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d109      	bne.n	80065da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e06f      	b.n	80066aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ca:	4b3b      	ldr	r3, [pc, #236]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e067      	b.n	80066aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065da:	4b37      	ldr	r3, [pc, #220]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f023 0203 	bic.w	r2, r3, #3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	4934      	ldr	r1, [pc, #208]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065ec:	f7fc fb7e 	bl	8002cec <HAL_GetTick>
 80065f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f2:	e00a      	b.n	800660a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065f4:	f7fc fb7a 	bl	8002cec <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006602:	4293      	cmp	r3, r2
 8006604:	d901      	bls.n	800660a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e04f      	b.n	80066aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800660a:	4b2b      	ldr	r3, [pc, #172]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 020c 	and.w	r2, r3, #12
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	429a      	cmp	r2, r3
 800661a:	d1eb      	bne.n	80065f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800661c:	4b25      	ldr	r3, [pc, #148]	@ (80066b4 <HAL_RCC_ClockConfig+0x1b8>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	429a      	cmp	r2, r3
 8006628:	d20c      	bcs.n	8006644 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800662a:	4b22      	ldr	r3, [pc, #136]	@ (80066b4 <HAL_RCC_ClockConfig+0x1b8>)
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006632:	4b20      	ldr	r3, [pc, #128]	@ (80066b4 <HAL_RCC_ClockConfig+0x1b8>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	d001      	beq.n	8006644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e032      	b.n	80066aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d008      	beq.n	8006662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006650:	4b19      	ldr	r3, [pc, #100]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	4916      	ldr	r1, [pc, #88]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 800665e:	4313      	orrs	r3, r2
 8006660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0308 	and.w	r3, r3, #8
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800666e:	4b12      	ldr	r3, [pc, #72]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	490e      	ldr	r1, [pc, #56]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 800667e:	4313      	orrs	r3, r2
 8006680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006682:	f000 f821 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 8006686:	4602      	mov	r2, r0
 8006688:	4b0b      	ldr	r3, [pc, #44]	@ (80066b8 <HAL_RCC_ClockConfig+0x1bc>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	091b      	lsrs	r3, r3, #4
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	490a      	ldr	r1, [pc, #40]	@ (80066bc <HAL_RCC_ClockConfig+0x1c0>)
 8006694:	5ccb      	ldrb	r3, [r1, r3]
 8006696:	fa22 f303 	lsr.w	r3, r2, r3
 800669a:	4a09      	ldr	r2, [pc, #36]	@ (80066c0 <HAL_RCC_ClockConfig+0x1c4>)
 800669c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800669e:	4b09      	ldr	r3, [pc, #36]	@ (80066c4 <HAL_RCC_ClockConfig+0x1c8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7fc fade 	bl	8002c64 <HAL_InitTick>

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	40023c00 	.word	0x40023c00
 80066b8:	40023800 	.word	0x40023800
 80066bc:	0800fd98 	.word	0x0800fd98
 80066c0:	20000000 	.word	0x20000000
 80066c4:	20000004 	.word	0x20000004

080066c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066cc:	b094      	sub	sp, #80	@ 0x50
 80066ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066e0:	4b79      	ldr	r3, [pc, #484]	@ (80068c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f003 030c 	and.w	r3, r3, #12
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d00d      	beq.n	8006708 <HAL_RCC_GetSysClockFreq+0x40>
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	f200 80e1 	bhi.w	80068b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <HAL_RCC_GetSysClockFreq+0x34>
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d003      	beq.n	8006702 <HAL_RCC_GetSysClockFreq+0x3a>
 80066fa:	e0db      	b.n	80068b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066fc:	4b73      	ldr	r3, [pc, #460]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x204>)
 80066fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006700:	e0db      	b.n	80068ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006702:	4b73      	ldr	r3, [pc, #460]	@ (80068d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006704:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006706:	e0d8      	b.n	80068ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006708:	4b6f      	ldr	r3, [pc, #444]	@ (80068c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006710:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006712:	4b6d      	ldr	r3, [pc, #436]	@ (80068c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d063      	beq.n	80067e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800671e:	4b6a      	ldr	r3, [pc, #424]	@ (80068c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	099b      	lsrs	r3, r3, #6
 8006724:	2200      	movs	r2, #0
 8006726:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006728:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800672c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006730:	633b      	str	r3, [r7, #48]	@ 0x30
 8006732:	2300      	movs	r3, #0
 8006734:	637b      	str	r3, [r7, #52]	@ 0x34
 8006736:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800673a:	4622      	mov	r2, r4
 800673c:	462b      	mov	r3, r5
 800673e:	f04f 0000 	mov.w	r0, #0
 8006742:	f04f 0100 	mov.w	r1, #0
 8006746:	0159      	lsls	r1, r3, #5
 8006748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800674c:	0150      	lsls	r0, r2, #5
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	4621      	mov	r1, r4
 8006754:	1a51      	subs	r1, r2, r1
 8006756:	6139      	str	r1, [r7, #16]
 8006758:	4629      	mov	r1, r5
 800675a:	eb63 0301 	sbc.w	r3, r3, r1
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800676c:	4659      	mov	r1, fp
 800676e:	018b      	lsls	r3, r1, #6
 8006770:	4651      	mov	r1, sl
 8006772:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006776:	4651      	mov	r1, sl
 8006778:	018a      	lsls	r2, r1, #6
 800677a:	4651      	mov	r1, sl
 800677c:	ebb2 0801 	subs.w	r8, r2, r1
 8006780:	4659      	mov	r1, fp
 8006782:	eb63 0901 	sbc.w	r9, r3, r1
 8006786:	f04f 0200 	mov.w	r2, #0
 800678a:	f04f 0300 	mov.w	r3, #0
 800678e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800679a:	4690      	mov	r8, r2
 800679c:	4699      	mov	r9, r3
 800679e:	4623      	mov	r3, r4
 80067a0:	eb18 0303 	adds.w	r3, r8, r3
 80067a4:	60bb      	str	r3, [r7, #8]
 80067a6:	462b      	mov	r3, r5
 80067a8:	eb49 0303 	adc.w	r3, r9, r3
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	f04f 0200 	mov.w	r2, #0
 80067b2:	f04f 0300 	mov.w	r3, #0
 80067b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067ba:	4629      	mov	r1, r5
 80067bc:	024b      	lsls	r3, r1, #9
 80067be:	4621      	mov	r1, r4
 80067c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067c4:	4621      	mov	r1, r4
 80067c6:	024a      	lsls	r2, r1, #9
 80067c8:	4610      	mov	r0, r2
 80067ca:	4619      	mov	r1, r3
 80067cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067ce:	2200      	movs	r2, #0
 80067d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067d8:	f7fa f9da 	bl	8000b90 <__aeabi_uldivmod>
 80067dc:	4602      	mov	r2, r0
 80067de:	460b      	mov	r3, r1
 80067e0:	4613      	mov	r3, r2
 80067e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067e4:	e058      	b.n	8006898 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067e6:	4b38      	ldr	r3, [pc, #224]	@ (80068c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	099b      	lsrs	r3, r3, #6
 80067ec:	2200      	movs	r2, #0
 80067ee:	4618      	mov	r0, r3
 80067f0:	4611      	mov	r1, r2
 80067f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067f6:	623b      	str	r3, [r7, #32]
 80067f8:	2300      	movs	r3, #0
 80067fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80067fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006800:	4642      	mov	r2, r8
 8006802:	464b      	mov	r3, r9
 8006804:	f04f 0000 	mov.w	r0, #0
 8006808:	f04f 0100 	mov.w	r1, #0
 800680c:	0159      	lsls	r1, r3, #5
 800680e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006812:	0150      	lsls	r0, r2, #5
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4641      	mov	r1, r8
 800681a:	ebb2 0a01 	subs.w	sl, r2, r1
 800681e:	4649      	mov	r1, r9
 8006820:	eb63 0b01 	sbc.w	fp, r3, r1
 8006824:	f04f 0200 	mov.w	r2, #0
 8006828:	f04f 0300 	mov.w	r3, #0
 800682c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006830:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006834:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006838:	ebb2 040a 	subs.w	r4, r2, sl
 800683c:	eb63 050b 	sbc.w	r5, r3, fp
 8006840:	f04f 0200 	mov.w	r2, #0
 8006844:	f04f 0300 	mov.w	r3, #0
 8006848:	00eb      	lsls	r3, r5, #3
 800684a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800684e:	00e2      	lsls	r2, r4, #3
 8006850:	4614      	mov	r4, r2
 8006852:	461d      	mov	r5, r3
 8006854:	4643      	mov	r3, r8
 8006856:	18e3      	adds	r3, r4, r3
 8006858:	603b      	str	r3, [r7, #0]
 800685a:	464b      	mov	r3, r9
 800685c:	eb45 0303 	adc.w	r3, r5, r3
 8006860:	607b      	str	r3, [r7, #4]
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800686e:	4629      	mov	r1, r5
 8006870:	028b      	lsls	r3, r1, #10
 8006872:	4621      	mov	r1, r4
 8006874:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006878:	4621      	mov	r1, r4
 800687a:	028a      	lsls	r2, r1, #10
 800687c:	4610      	mov	r0, r2
 800687e:	4619      	mov	r1, r3
 8006880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006882:	2200      	movs	r2, #0
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	61fa      	str	r2, [r7, #28]
 8006888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800688c:	f7fa f980 	bl	8000b90 <__aeabi_uldivmod>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4613      	mov	r3, r2
 8006896:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006898:	4b0b      	ldr	r3, [pc, #44]	@ (80068c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	0c1b      	lsrs	r3, r3, #16
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	3301      	adds	r3, #1
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80068a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068b2:	e002      	b.n	80068ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068b4:	4b05      	ldr	r3, [pc, #20]	@ (80068cc <HAL_RCC_GetSysClockFreq+0x204>)
 80068b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3750      	adds	r7, #80	@ 0x50
 80068c0:	46bd      	mov	sp, r7
 80068c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068c6:	bf00      	nop
 80068c8:	40023800 	.word	0x40023800
 80068cc:	00f42400 	.word	0x00f42400
 80068d0:	007a1200 	.word	0x007a1200

080068d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068d8:	4b03      	ldr	r3, [pc, #12]	@ (80068e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80068da:	681b      	ldr	r3, [r3, #0]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	20000000 	.word	0x20000000

080068ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80068f0:	f7ff fff0 	bl	80068d4 <HAL_RCC_GetHCLKFreq>
 80068f4:	4602      	mov	r2, r0
 80068f6:	4b05      	ldr	r3, [pc, #20]	@ (800690c <HAL_RCC_GetPCLK1Freq+0x20>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	0a9b      	lsrs	r3, r3, #10
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	4903      	ldr	r1, [pc, #12]	@ (8006910 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006902:	5ccb      	ldrb	r3, [r1, r3]
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006908:	4618      	mov	r0, r3
 800690a:	bd80      	pop	{r7, pc}
 800690c:	40023800 	.word	0x40023800
 8006910:	0800fda8 	.word	0x0800fda8

08006914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006918:	f7ff ffdc 	bl	80068d4 <HAL_RCC_GetHCLKFreq>
 800691c:	4602      	mov	r2, r0
 800691e:	4b05      	ldr	r3, [pc, #20]	@ (8006934 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	0b5b      	lsrs	r3, r3, #13
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	4903      	ldr	r1, [pc, #12]	@ (8006938 <HAL_RCC_GetPCLK2Freq+0x24>)
 800692a:	5ccb      	ldrb	r3, [r1, r3]
 800692c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006930:	4618      	mov	r0, r3
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40023800 	.word	0x40023800
 8006938:	0800fda8 	.word	0x0800fda8

0800693c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e07b      	b.n	8006a46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006952:	2b00      	cmp	r3, #0
 8006954:	d108      	bne.n	8006968 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800695e:	d009      	beq.n	8006974 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	61da      	str	r2, [r3, #28]
 8006966:	e005      	b.n	8006974 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006980:	b2db      	uxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d106      	bne.n	8006994 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fb fc92 	bl	80022b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80069bc:	431a      	orrs	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069c6:	431a      	orrs	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	431a      	orrs	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	431a      	orrs	r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069e4:	431a      	orrs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069ee:	431a      	orrs	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f8:	ea42 0103 	orr.w	r1, r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	f003 0104 	and.w	r1, r3, #4
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1a:	f003 0210 	and.w	r2, r3, #16
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69da      	ldr	r2, [r3, #28]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b082      	sub	sp, #8
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e041      	b.n	8006ae4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d106      	bne.n	8006a7a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f7fb fe35 	bl	80026e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	3304      	adds	r3, #4
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	f000 fb3b 	bl	8007108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3708      	adds	r7, #8
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e041      	b.n	8006b82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fb fdae 	bl	8002674 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	3304      	adds	r3, #4
 8006b28:	4619      	mov	r1, r3
 8006b2a:	4610      	mov	r0, r2
 8006b2c:	f000 faec 	bl	8007108 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d109      	bne.n	8006bb0 <HAL_TIM_PWM_Start+0x24>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	bf14      	ite	ne
 8006ba8:	2301      	movne	r3, #1
 8006baa:	2300      	moveq	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	e022      	b.n	8006bf6 <HAL_TIM_PWM_Start+0x6a>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d109      	bne.n	8006bca <HAL_TIM_PWM_Start+0x3e>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	bf14      	ite	ne
 8006bc2:	2301      	movne	r3, #1
 8006bc4:	2300      	moveq	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	e015      	b.n	8006bf6 <HAL_TIM_PWM_Start+0x6a>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b08      	cmp	r3, #8
 8006bce:	d109      	bne.n	8006be4 <HAL_TIM_PWM_Start+0x58>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	bf14      	ite	ne
 8006bdc:	2301      	movne	r3, #1
 8006bde:	2300      	moveq	r3, #0
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	e008      	b.n	8006bf6 <HAL_TIM_PWM_Start+0x6a>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	bf14      	ite	ne
 8006bf0:	2301      	movne	r3, #1
 8006bf2:	2300      	moveq	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e07c      	b.n	8006cf8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d104      	bne.n	8006c0e <HAL_TIM_PWM_Start+0x82>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c0c:	e013      	b.n	8006c36 <HAL_TIM_PWM_Start+0xaa>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d104      	bne.n	8006c1e <HAL_TIM_PWM_Start+0x92>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c1c:	e00b      	b.n	8006c36 <HAL_TIM_PWM_Start+0xaa>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d104      	bne.n	8006c2e <HAL_TIM_PWM_Start+0xa2>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c2c:	e003      	b.n	8006c36 <HAL_TIM_PWM_Start+0xaa>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2202      	movs	r2, #2
 8006c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	6839      	ldr	r1, [r7, #0]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f000 fcbe 	bl	80075c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a2d      	ldr	r2, [pc, #180]	@ (8006d00 <HAL_TIM_PWM_Start+0x174>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d004      	beq.n	8006c58 <HAL_TIM_PWM_Start+0xcc>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a2c      	ldr	r2, [pc, #176]	@ (8006d04 <HAL_TIM_PWM_Start+0x178>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d101      	bne.n	8006c5c <HAL_TIM_PWM_Start+0xd0>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e000      	b.n	8006c5e <HAL_TIM_PWM_Start+0xd2>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d007      	beq.n	8006c72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a22      	ldr	r2, [pc, #136]	@ (8006d00 <HAL_TIM_PWM_Start+0x174>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d022      	beq.n	8006cc2 <HAL_TIM_PWM_Start+0x136>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c84:	d01d      	beq.n	8006cc2 <HAL_TIM_PWM_Start+0x136>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8006d08 <HAL_TIM_PWM_Start+0x17c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d018      	beq.n	8006cc2 <HAL_TIM_PWM_Start+0x136>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a1d      	ldr	r2, [pc, #116]	@ (8006d0c <HAL_TIM_PWM_Start+0x180>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d013      	beq.n	8006cc2 <HAL_TIM_PWM_Start+0x136>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8006d10 <HAL_TIM_PWM_Start+0x184>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00e      	beq.n	8006cc2 <HAL_TIM_PWM_Start+0x136>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a16      	ldr	r2, [pc, #88]	@ (8006d04 <HAL_TIM_PWM_Start+0x178>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d009      	beq.n	8006cc2 <HAL_TIM_PWM_Start+0x136>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a18      	ldr	r2, [pc, #96]	@ (8006d14 <HAL_TIM_PWM_Start+0x188>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d004      	beq.n	8006cc2 <HAL_TIM_PWM_Start+0x136>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a16      	ldr	r2, [pc, #88]	@ (8006d18 <HAL_TIM_PWM_Start+0x18c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d111      	bne.n	8006ce6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2b06      	cmp	r3, #6
 8006cd2:	d010      	beq.n	8006cf6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f042 0201 	orr.w	r2, r2, #1
 8006ce2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ce4:	e007      	b.n	8006cf6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f042 0201 	orr.w	r2, r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	40010000 	.word	0x40010000
 8006d04:	40010400 	.word	0x40010400
 8006d08:	40000400 	.word	0x40000400
 8006d0c:	40000800 	.word	0x40000800
 8006d10:	40000c00 	.word	0x40000c00
 8006d14:	40014000 	.word	0x40014000
 8006d18:	40001800 	.word	0x40001800

08006d1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d101      	bne.n	8006d30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e097      	b.n	8006e60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d106      	bne.n	8006d4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7fb fb1f 	bl	8002388 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6812      	ldr	r2, [r2, #0]
 8006d5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d60:	f023 0307 	bic.w	r3, r3, #7
 8006d64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4610      	mov	r0, r2
 8006d72:	f000 f9c9 	bl	8007108 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d9e:	f023 0303 	bic.w	r3, r3, #3
 8006da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	689a      	ldr	r2, [r3, #8]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	4313      	orrs	r3, r2
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006dbc:	f023 030c 	bic.w	r3, r3, #12
 8006dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006dc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	68da      	ldr	r2, [r3, #12]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	69db      	ldr	r3, [r3, #28]
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	011a      	lsls	r2, r3, #4
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	031b      	lsls	r3, r3, #12
 8006dec:	4313      	orrs	r3, r2
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006dfa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006e02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	695b      	ldr	r3, [r3, #20]
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006e90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d110      	bne.n	8006eba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e98:	7bfb      	ldrb	r3, [r7, #15]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d102      	bne.n	8006ea4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e9e:	7b7b      	ldrb	r3, [r7, #13]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d001      	beq.n	8006ea8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e069      	b.n	8006f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2202      	movs	r2, #2
 8006eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eb8:	e031      	b.n	8006f1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d110      	bne.n	8006ee2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d102      	bne.n	8006ecc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ec6:	7b3b      	ldrb	r3, [r7, #12]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d001      	beq.n	8006ed0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e055      	b.n	8006f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ee0:	e01d      	b.n	8006f1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d108      	bne.n	8006efa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d105      	bne.n	8006efa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006eee:	7b7b      	ldrb	r3, [r7, #13]
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d102      	bne.n	8006efa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ef4:	7b3b      	ldrb	r3, [r7, #12]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d001      	beq.n	8006efe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e03e      	b.n	8006f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2202      	movs	r2, #2
 8006f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2202      	movs	r2, #2
 8006f0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2202      	movs	r2, #2
 8006f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <HAL_TIM_Encoder_Start+0xc4>
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d008      	beq.n	8006f3c <HAL_TIM_Encoder_Start+0xd4>
 8006f2a:	e00f      	b.n	8006f4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2201      	movs	r2, #1
 8006f32:	2100      	movs	r1, #0
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 fb43 	bl	80075c0 <TIM_CCxChannelCmd>
      break;
 8006f3a:	e016      	b.n	8006f6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2201      	movs	r2, #1
 8006f42:	2104      	movs	r1, #4
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 fb3b 	bl	80075c0 <TIM_CCxChannelCmd>
      break;
 8006f4a:	e00e      	b.n	8006f6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2201      	movs	r2, #1
 8006f52:	2100      	movs	r1, #0
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 fb33 	bl	80075c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	2104      	movs	r1, #4
 8006f62:	4618      	mov	r0, r3
 8006f64:	f000 fb2c 	bl	80075c0 <TIM_CCxChannelCmd>
      break;
 8006f68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f042 0201 	orr.w	r2, r2, #1
 8006f78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d101      	bne.n	8006fa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	e0ae      	b.n	8007100 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b0c      	cmp	r3, #12
 8006fae:	f200 809f 	bhi.w	80070f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb8:	08006fed 	.word	0x08006fed
 8006fbc:	080070f1 	.word	0x080070f1
 8006fc0:	080070f1 	.word	0x080070f1
 8006fc4:	080070f1 	.word	0x080070f1
 8006fc8:	0800702d 	.word	0x0800702d
 8006fcc:	080070f1 	.word	0x080070f1
 8006fd0:	080070f1 	.word	0x080070f1
 8006fd4:	080070f1 	.word	0x080070f1
 8006fd8:	0800706f 	.word	0x0800706f
 8006fdc:	080070f1 	.word	0x080070f1
 8006fe0:	080070f1 	.word	0x080070f1
 8006fe4:	080070f1 	.word	0x080070f1
 8006fe8:	080070af 	.word	0x080070af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 f934 	bl	8007260 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0208 	orr.w	r2, r2, #8
 8007006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699a      	ldr	r2, [r3, #24]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0204 	bic.w	r2, r2, #4
 8007016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6999      	ldr	r1, [r3, #24]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	691a      	ldr	r2, [r3, #16]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	619a      	str	r2, [r3, #24]
      break;
 800702a:	e064      	b.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68b9      	ldr	r1, [r7, #8]
 8007032:	4618      	mov	r0, r3
 8007034:	f000 f984 	bl	8007340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	699a      	ldr	r2, [r3, #24]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6999      	ldr	r1, [r3, #24]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	021a      	lsls	r2, r3, #8
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	619a      	str	r2, [r3, #24]
      break;
 800706c:	e043      	b.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68b9      	ldr	r1, [r7, #8]
 8007074:	4618      	mov	r0, r3
 8007076:	f000 f9d9 	bl	800742c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	69da      	ldr	r2, [r3, #28]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0208 	orr.w	r2, r2, #8
 8007088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69da      	ldr	r2, [r3, #28]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f022 0204 	bic.w	r2, r2, #4
 8007098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69d9      	ldr	r1, [r3, #28]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	691a      	ldr	r2, [r3, #16]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	430a      	orrs	r2, r1
 80070aa:	61da      	str	r2, [r3, #28]
      break;
 80070ac:	e023      	b.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fa2d 	bl	8007514 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	69da      	ldr	r2, [r3, #28]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69da      	ldr	r2, [r3, #28]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69d9      	ldr	r1, [r3, #28]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	021a      	lsls	r2, r3, #8
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	61da      	str	r2, [r3, #28]
      break;
 80070ee:	e002      	b.n	80070f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	75fb      	strb	r3, [r7, #23]
      break;
 80070f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a46      	ldr	r2, [pc, #280]	@ (8007234 <TIM_Base_SetConfig+0x12c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d013      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007126:	d00f      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a43      	ldr	r2, [pc, #268]	@ (8007238 <TIM_Base_SetConfig+0x130>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d00b      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a42      	ldr	r2, [pc, #264]	@ (800723c <TIM_Base_SetConfig+0x134>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d007      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a41      	ldr	r2, [pc, #260]	@ (8007240 <TIM_Base_SetConfig+0x138>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d003      	beq.n	8007148 <TIM_Base_SetConfig+0x40>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a40      	ldr	r2, [pc, #256]	@ (8007244 <TIM_Base_SetConfig+0x13c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d108      	bne.n	800715a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800714e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a35      	ldr	r2, [pc, #212]	@ (8007234 <TIM_Base_SetConfig+0x12c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d02b      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007168:	d027      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a32      	ldr	r2, [pc, #200]	@ (8007238 <TIM_Base_SetConfig+0x130>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d023      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a31      	ldr	r2, [pc, #196]	@ (800723c <TIM_Base_SetConfig+0x134>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d01f      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a30      	ldr	r2, [pc, #192]	@ (8007240 <TIM_Base_SetConfig+0x138>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d01b      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a2f      	ldr	r2, [pc, #188]	@ (8007244 <TIM_Base_SetConfig+0x13c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d017      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a2e      	ldr	r2, [pc, #184]	@ (8007248 <TIM_Base_SetConfig+0x140>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d013      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a2d      	ldr	r2, [pc, #180]	@ (800724c <TIM_Base_SetConfig+0x144>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00f      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a2c      	ldr	r2, [pc, #176]	@ (8007250 <TIM_Base_SetConfig+0x148>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00b      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a2b      	ldr	r2, [pc, #172]	@ (8007254 <TIM_Base_SetConfig+0x14c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d007      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a2a      	ldr	r2, [pc, #168]	@ (8007258 <TIM_Base_SetConfig+0x150>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d003      	beq.n	80071ba <TIM_Base_SetConfig+0xb2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a29      	ldr	r2, [pc, #164]	@ (800725c <TIM_Base_SetConfig+0x154>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d108      	bne.n	80071cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a10      	ldr	r2, [pc, #64]	@ (8007234 <TIM_Base_SetConfig+0x12c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d003      	beq.n	8007200 <TIM_Base_SetConfig+0xf8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a12      	ldr	r2, [pc, #72]	@ (8007244 <TIM_Base_SetConfig+0x13c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d103      	bne.n	8007208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	691a      	ldr	r2, [r3, #16]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b01      	cmp	r3, #1
 8007218:	d105      	bne.n	8007226 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	691b      	ldr	r3, [r3, #16]
 800721e:	f023 0201 	bic.w	r2, r3, #1
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	611a      	str	r2, [r3, #16]
  }
}
 8007226:	bf00      	nop
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40010000 	.word	0x40010000
 8007238:	40000400 	.word	0x40000400
 800723c:	40000800 	.word	0x40000800
 8007240:	40000c00 	.word	0x40000c00
 8007244:	40010400 	.word	0x40010400
 8007248:	40014000 	.word	0x40014000
 800724c:	40014400 	.word	0x40014400
 8007250:	40014800 	.word	0x40014800
 8007254:	40001800 	.word	0x40001800
 8007258:	40001c00 	.word	0x40001c00
 800725c:	40002000 	.word	0x40002000

08007260 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	f023 0201 	bic.w	r2, r3, #1
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800728e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0303 	bic.w	r3, r3, #3
 8007296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f023 0302 	bic.w	r3, r3, #2
 80072a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a20      	ldr	r2, [pc, #128]	@ (8007338 <TIM_OC1_SetConfig+0xd8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d003      	beq.n	80072c4 <TIM_OC1_SetConfig+0x64>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a1f      	ldr	r2, [pc, #124]	@ (800733c <TIM_OC1_SetConfig+0xdc>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d10c      	bne.n	80072de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f023 0308 	bic.w	r3, r3, #8
 80072ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f023 0304 	bic.w	r3, r3, #4
 80072dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	4a15      	ldr	r2, [pc, #84]	@ (8007338 <TIM_OC1_SetConfig+0xd8>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d003      	beq.n	80072ee <TIM_OC1_SetConfig+0x8e>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a14      	ldr	r2, [pc, #80]	@ (800733c <TIM_OC1_SetConfig+0xdc>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d111      	bne.n	8007312 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	695b      	ldr	r3, [r3, #20]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	4313      	orrs	r3, r2
 8007310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	693a      	ldr	r2, [r7, #16]
 8007316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	621a      	str	r2, [r3, #32]
}
 800732c:	bf00      	nop
 800732e:	371c      	adds	r7, #28
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr
 8007338:	40010000 	.word	0x40010000
 800733c:	40010400 	.word	0x40010400

08007340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	f023 0210 	bic.w	r2, r3, #16
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800736e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	021b      	lsls	r3, r3, #8
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f023 0320 	bic.w	r3, r3, #32
 800738a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	011b      	lsls	r3, r3, #4
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	4313      	orrs	r3, r2
 8007396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a22      	ldr	r2, [pc, #136]	@ (8007424 <TIM_OC2_SetConfig+0xe4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d003      	beq.n	80073a8 <TIM_OC2_SetConfig+0x68>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a21      	ldr	r2, [pc, #132]	@ (8007428 <TIM_OC2_SetConfig+0xe8>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d10d      	bne.n	80073c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a17      	ldr	r2, [pc, #92]	@ (8007424 <TIM_OC2_SetConfig+0xe4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d003      	beq.n	80073d4 <TIM_OC2_SetConfig+0x94>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a16      	ldr	r2, [pc, #88]	@ (8007428 <TIM_OC2_SetConfig+0xe8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d113      	bne.n	80073fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80073da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	693a      	ldr	r2, [r7, #16]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	621a      	str	r2, [r3, #32]
}
 8007416:	bf00      	nop
 8007418:	371c      	adds	r7, #28
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	40010000 	.word	0x40010000
 8007428:	40010400 	.word	0x40010400

0800742c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800745a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0303 	bic.w	r3, r3, #3
 8007462:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007474:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	021b      	lsls	r3, r3, #8
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	4313      	orrs	r3, r2
 8007480:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a21      	ldr	r2, [pc, #132]	@ (800750c <TIM_OC3_SetConfig+0xe0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d003      	beq.n	8007492 <TIM_OC3_SetConfig+0x66>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a20      	ldr	r2, [pc, #128]	@ (8007510 <TIM_OC3_SetConfig+0xe4>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d10d      	bne.n	80074ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a16      	ldr	r2, [pc, #88]	@ (800750c <TIM_OC3_SetConfig+0xe0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d003      	beq.n	80074be <TIM_OC3_SetConfig+0x92>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a15      	ldr	r2, [pc, #84]	@ (8007510 <TIM_OC3_SetConfig+0xe4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d113      	bne.n	80074e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	011b      	lsls	r3, r3, #4
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	693a      	ldr	r2, [r7, #16]
 80074ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	621a      	str	r2, [r3, #32]
}
 8007500:	bf00      	nop
 8007502:	371c      	adds	r7, #28
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr
 800750c:	40010000 	.word	0x40010000
 8007510:	40010400 	.word	0x40010400

08007514 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800754a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	021b      	lsls	r3, r3, #8
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800755e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	031b      	lsls	r3, r3, #12
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	4313      	orrs	r3, r2
 800756a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a12      	ldr	r2, [pc, #72]	@ (80075b8 <TIM_OC4_SetConfig+0xa4>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d003      	beq.n	800757c <TIM_OC4_SetConfig+0x68>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a11      	ldr	r2, [pc, #68]	@ (80075bc <TIM_OC4_SetConfig+0xa8>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d109      	bne.n	8007590 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	019b      	lsls	r3, r3, #6
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	4313      	orrs	r3, r2
 800758e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	621a      	str	r2, [r3, #32]
}
 80075aa:	bf00      	nop
 80075ac:	371c      	adds	r7, #28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	40010000 	.word	0x40010000
 80075bc:	40010400 	.word	0x40010400

080075c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	2201      	movs	r2, #1
 80075d4:	fa02 f303 	lsl.w	r3, r2, r3
 80075d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6a1a      	ldr	r2, [r3, #32]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	43db      	mvns	r3, r3
 80075e2:	401a      	ands	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a1a      	ldr	r2, [r3, #32]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	f003 031f 	and.w	r3, r3, #31
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	fa01 f303 	lsl.w	r3, r1, r3
 80075f8:	431a      	orrs	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	621a      	str	r2, [r3, #32]
}
 80075fe:	bf00      	nop
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
	...

0800760c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800761c:	2b01      	cmp	r3, #1
 800761e:	d101      	bne.n	8007624 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007620:	2302      	movs	r3, #2
 8007622:	e05a      	b.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800764a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a21      	ldr	r2, [pc, #132]	@ (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d022      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007670:	d01d      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a1d      	ldr	r2, [pc, #116]	@ (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d018      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a1b      	ldr	r2, [pc, #108]	@ (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d013      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a1a      	ldr	r2, [pc, #104]	@ (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d00e      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a18      	ldr	r2, [pc, #96]	@ (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d009      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a17      	ldr	r2, [pc, #92]	@ (80076fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d004      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a15      	ldr	r2, [pc, #84]	@ (8007700 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d10c      	bne.n	80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	40010000 	.word	0x40010000
 80076ec:	40000400 	.word	0x40000400
 80076f0:	40000800 	.word	0x40000800
 80076f4:	40000c00 	.word	0x40000c00
 80076f8:	40010400 	.word	0x40010400
 80076fc:	40014000 	.word	0x40014000
 8007700:	40001800 	.word	0x40001800

08007704 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e042      	b.n	800779c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d106      	bne.n	8007730 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7fb f93c 	bl	80029a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2224      	movs	r2, #36	@ 0x24
 8007734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68da      	ldr	r2, [r3, #12]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007746:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fd0d 	bl	8008168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800775c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695a      	ldr	r2, [r3, #20]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800776c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68da      	ldr	r2, [r3, #12]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800777c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2220      	movs	r2, #32
 8007788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2220      	movs	r2, #32
 8007790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e024      	b.n	8007800 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2224      	movs	r2, #36	@ 0x24
 80077ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077cc:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f7fb f970 	bl	8002ab4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	4613      	mov	r3, r2
 8007814:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b20      	cmp	r3, #32
 8007820:	d112      	bne.n	8007848 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <HAL_UART_Receive_IT+0x26>
 8007828:	88fb      	ldrh	r3, [r7, #6]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e00b      	b.n	800784a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007838:	88fb      	ldrh	r3, [r7, #6]
 800783a:	461a      	mov	r2, r3
 800783c:	68b9      	ldr	r1, [r7, #8]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 faba 	bl	8007db8 <UART_Start_Receive_IT>
 8007844:	4603      	mov	r3, r0
 8007846:	e000      	b.n	800784a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007848:	2302      	movs	r3, #2
  }
}
 800784a:	4618      	mov	r0, r3
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
	...

08007854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b0ba      	sub	sp, #232	@ 0xe8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800787a:	2300      	movs	r3, #0
 800787c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007880:	2300      	movs	r3, #0
 8007882:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800788a:	f003 030f 	and.w	r3, r3, #15
 800788e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10f      	bne.n	80078ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800789a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d009      	beq.n	80078ba <HAL_UART_IRQHandler+0x66>
 80078a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078aa:	f003 0320 	and.w	r3, r3, #32
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d003      	beq.n	80078ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fb99 	bl	8007fea <UART_Receive_IT>
      return;
 80078b8:	e25b      	b.n	8007d72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 80de 	beq.w	8007a80 <HAL_UART_IRQHandler+0x22c>
 80078c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078c8:	f003 0301 	and.w	r3, r3, #1
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 80d1 	beq.w	8007a80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00b      	beq.n	8007902 <HAL_UART_IRQHandler+0xae>
 80078ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d005      	beq.n	8007902 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078fa:	f043 0201 	orr.w	r2, r3, #1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <HAL_UART_IRQHandler+0xd2>
 800790e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800791e:	f043 0202 	orr.w	r2, r3, #2
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00b      	beq.n	800794a <HAL_UART_IRQHandler+0xf6>
 8007932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d005      	beq.n	800794a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007942:	f043 0204 	orr.w	r2, r3, #4
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800794a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800794e:	f003 0308 	and.w	r3, r3, #8
 8007952:	2b00      	cmp	r3, #0
 8007954:	d011      	beq.n	800797a <HAL_UART_IRQHandler+0x126>
 8007956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b00      	cmp	r3, #0
 8007960:	d105      	bne.n	800796e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007966:	f003 0301 	and.w	r3, r3, #1
 800796a:	2b00      	cmp	r3, #0
 800796c:	d005      	beq.n	800797a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007972:	f043 0208 	orr.w	r2, r3, #8
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 81f2 	beq.w	8007d68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b00      	cmp	r3, #0
 800798e:	d008      	beq.n	80079a2 <HAL_UART_IRQHandler+0x14e>
 8007990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007994:	f003 0320 	and.w	r3, r3, #32
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fb24 	bl	8007fea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079ac:	2b40      	cmp	r3, #64	@ 0x40
 80079ae:	bf0c      	ite	eq
 80079b0:	2301      	moveq	r3, #1
 80079b2:	2300      	movne	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079be:	f003 0308 	and.w	r3, r3, #8
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d103      	bne.n	80079ce <HAL_UART_IRQHandler+0x17a>
 80079c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d04f      	beq.n	8007a6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa2c 	bl	8007e2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079de:	2b40      	cmp	r3, #64	@ 0x40
 80079e0:	d141      	bne.n	8007a66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	3314      	adds	r3, #20
 80079e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80079f0:	e853 3f00 	ldrex	r3, [r3]
 80079f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80079f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3314      	adds	r3, #20
 8007a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1d9      	bne.n	80079e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d013      	beq.n	8007a5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a3a:	4a7e      	ldr	r2, [pc, #504]	@ (8007c34 <HAL_UART_IRQHandler+0x3e0>)
 8007a3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fb fd97 	bl	8003576 <HAL_DMA_Abort_IT>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d016      	beq.n	8007a7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a5c:	e00e      	b.n	8007a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f994 	bl	8007d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a64:	e00a      	b.n	8007a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f990 	bl	8007d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a6c:	e006      	b.n	8007a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f98c 	bl	8007d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007a7a:	e175      	b.n	8007d68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a7c:	bf00      	nop
    return;
 8007a7e:	e173      	b.n	8007d68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	f040 814f 	bne.w	8007d28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a8e:	f003 0310 	and.w	r3, r3, #16
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 8148 	beq.w	8007d28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 8141 	beq.w	8007d28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60bb      	str	r3, [r7, #8]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60bb      	str	r3, [r7, #8]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	60bb      	str	r3, [r7, #8]
 8007aba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ac6:	2b40      	cmp	r3, #64	@ 0x40
 8007ac8:	f040 80b6 	bne.w	8007c38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8145 	beq.w	8007d6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007aea:	429a      	cmp	r2, r3
 8007aec:	f080 813e 	bcs.w	8007d6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007af6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b02:	f000 8088 	beq.w	8007c16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	330c      	adds	r3, #12
 8007b0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b14:	e853 3f00 	ldrex	r3, [r3]
 8007b18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	330c      	adds	r3, #12
 8007b2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007b32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1d9      	bne.n	8007b06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3314      	adds	r3, #20
 8007b58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3314      	adds	r3, #20
 8007b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b82:	e841 2300 	strex	r3, r2, [r1]
 8007b86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1e1      	bne.n	8007b52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3314      	adds	r3, #20
 8007b94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3314      	adds	r3, #20
 8007bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007bb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007bb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007bc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e3      	bne.n	8007b8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	330c      	adds	r3, #12
 8007bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007be6:	f023 0310 	bic.w	r3, r3, #16
 8007bea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	330c      	adds	r3, #12
 8007bf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007bf8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007bfa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007bfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e3      	bne.n	8007bd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7fb fc40 	bl	8003496 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2202      	movs	r2, #2
 8007c1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 f8b7 	bl	8007da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c32:	e09b      	b.n	8007d6c <HAL_UART_IRQHandler+0x518>
 8007c34:	08007ef3 	.word	0x08007ef3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 808e 	beq.w	8007d70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	f000 8089 	beq.w	8007d70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	330c      	adds	r3, #12
 8007c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c68:	e853 3f00 	ldrex	r3, [r3]
 8007c6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	330c      	adds	r3, #12
 8007c7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007c82:	647a      	str	r2, [r7, #68]	@ 0x44
 8007c84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e3      	bne.n	8007c5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3314      	adds	r3, #20
 8007c9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	f023 0301 	bic.w	r3, r3, #1
 8007cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3314      	adds	r3, #20
 8007cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007cba:	633a      	str	r2, [r7, #48]	@ 0x30
 8007cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e3      	bne.n	8007c96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	330c      	adds	r3, #12
 8007ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f023 0310 	bic.w	r3, r3, #16
 8007cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	330c      	adds	r3, #12
 8007cfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007d00:	61fa      	str	r2, [r7, #28]
 8007d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	69b9      	ldr	r1, [r7, #24]
 8007d06:	69fa      	ldr	r2, [r7, #28]
 8007d08:	e841 2300 	strex	r3, r2, [r1]
 8007d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e3      	bne.n	8007cdc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2202      	movs	r2, #2
 8007d18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 f83d 	bl	8007da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d26:	e023      	b.n	8007d70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d009      	beq.n	8007d48 <HAL_UART_IRQHandler+0x4f4>
 8007d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d003      	beq.n	8007d48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f8ea 	bl	8007f1a <UART_Transmit_IT>
    return;
 8007d46:	e014      	b.n	8007d72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00e      	beq.n	8007d72 <HAL_UART_IRQHandler+0x51e>
 8007d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d008      	beq.n	8007d72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f92a 	bl	8007fba <UART_EndTransmit_IT>
    return;
 8007d66:	e004      	b.n	8007d72 <HAL_UART_IRQHandler+0x51e>
    return;
 8007d68:	bf00      	nop
 8007d6a:	e002      	b.n	8007d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8007d6c:	bf00      	nop
 8007d6e:	e000      	b.n	8007d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8007d70:	bf00      	nop
  }
}
 8007d72:	37e8      	adds	r7, #232	@ 0xe8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	88fa      	ldrh	r2, [r7, #6]
 8007dd0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	88fa      	ldrh	r2, [r7, #6]
 8007dd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2222      	movs	r2, #34	@ 0x22
 8007de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d007      	beq.n	8007dfe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68da      	ldr	r2, [r3, #12]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007dfc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695a      	ldr	r2, [r3, #20]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f042 0201 	orr.w	r2, r2, #1
 8007e0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68da      	ldr	r2, [r3, #12]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f042 0220 	orr.w	r2, r2, #32
 8007e1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b095      	sub	sp, #84	@ 0x54
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	330c      	adds	r3, #12
 8007e3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e3e:	e853 3f00 	ldrex	r3, [r3]
 8007e42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	330c      	adds	r3, #12
 8007e52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e54:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e5c:	e841 2300 	strex	r3, r2, [r1]
 8007e60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d1e5      	bne.n	8007e34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	3314      	adds	r3, #20
 8007e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	e853 3f00 	ldrex	r3, [r3]
 8007e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	f023 0301 	bic.w	r3, r3, #1
 8007e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3314      	adds	r3, #20
 8007e86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e5      	bne.n	8007e68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d119      	bne.n	8007ed8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	330c      	adds	r3, #12
 8007eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	e853 3f00 	ldrex	r3, [r3]
 8007eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	f023 0310 	bic.w	r3, r3, #16
 8007eba:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	330c      	adds	r3, #12
 8007ec2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ec4:	61ba      	str	r2, [r7, #24]
 8007ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec8:	6979      	ldr	r1, [r7, #20]
 8007eca:	69ba      	ldr	r2, [r7, #24]
 8007ecc:	e841 2300 	strex	r3, r2, [r1]
 8007ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1e5      	bne.n	8007ea4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2220      	movs	r2, #32
 8007edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007ee6:	bf00      	nop
 8007ee8:	3754      	adds	r7, #84	@ 0x54
 8007eea:	46bd      	mov	sp, r7
 8007eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef0:	4770      	bx	lr

08007ef2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007efe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7ff ff3d 	bl	8007d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f12:	bf00      	nop
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b085      	sub	sp, #20
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b21      	cmp	r3, #33	@ 0x21
 8007f2c:	d13e      	bne.n	8007fac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f36:	d114      	bne.n	8007f62 <UART_Transmit_IT+0x48>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d110      	bne.n	8007f62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a1b      	ldr	r3, [r3, #32]
 8007f44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	881b      	ldrh	r3, [r3, #0]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	1c9a      	adds	r2, r3, #2
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	621a      	str	r2, [r3, #32]
 8007f60:	e008      	b.n	8007f74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	1c59      	adds	r1, r3, #1
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	6211      	str	r1, [r2, #32]
 8007f6c:	781a      	ldrb	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	4619      	mov	r1, r3
 8007f82:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10f      	bne.n	8007fa8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fa6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e000      	b.n	8007fae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007fac:	2302      	movs	r3, #2
  }
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b082      	sub	sp, #8
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2220      	movs	r2, #32
 8007fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f7ff fecc 	bl	8007d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b08c      	sub	sp, #48	@ 0x30
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b22      	cmp	r3, #34	@ 0x22
 8007ffc:	f040 80ae 	bne.w	800815c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008008:	d117      	bne.n	800803a <UART_Receive_IT+0x50>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d113      	bne.n	800803a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008012:	2300      	movs	r3, #0
 8008014:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	b29b      	uxth	r3, r3
 8008024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008028:	b29a      	uxth	r2, r3
 800802a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008032:	1c9a      	adds	r2, r3, #2
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	629a      	str	r2, [r3, #40]	@ 0x28
 8008038:	e026      	b.n	8008088 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008040:	2300      	movs	r3, #0
 8008042:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800804c:	d007      	beq.n	800805e <UART_Receive_IT+0x74>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10a      	bne.n	800806c <UART_Receive_IT+0x82>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d106      	bne.n	800806c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	b2da      	uxtb	r2, r3
 8008066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008068:	701a      	strb	r2, [r3, #0]
 800806a:	e008      	b.n	800807e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	b2db      	uxtb	r3, r3
 8008074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008078:	b2da      	uxtb	r2, r3
 800807a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800807c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008082:	1c5a      	adds	r2, r3, #1
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800808c:	b29b      	uxth	r3, r3
 800808e:	3b01      	subs	r3, #1
 8008090:	b29b      	uxth	r3, r3
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	4619      	mov	r1, r3
 8008096:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008098:	2b00      	cmp	r3, #0
 800809a:	d15d      	bne.n	8008158 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68da      	ldr	r2, [r3, #12]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f022 0220 	bic.w	r2, r2, #32
 80080aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	68da      	ldr	r2, [r3, #12]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80080ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	695a      	ldr	r2, [r3, #20]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0201 	bic.w	r2, r2, #1
 80080ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2220      	movs	r2, #32
 80080d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d135      	bne.n	800814e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	330c      	adds	r3, #12
 80080ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	e853 3f00 	ldrex	r3, [r3]
 80080f6:	613b      	str	r3, [r7, #16]
   return(result);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	f023 0310 	bic.w	r3, r3, #16
 80080fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	330c      	adds	r3, #12
 8008106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008108:	623a      	str	r2, [r7, #32]
 800810a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810c:	69f9      	ldr	r1, [r7, #28]
 800810e:	6a3a      	ldr	r2, [r7, #32]
 8008110:	e841 2300 	strex	r3, r2, [r1]
 8008114:	61bb      	str	r3, [r7, #24]
   return(result);
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1e5      	bne.n	80080e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0310 	and.w	r3, r3, #16
 8008126:	2b10      	cmp	r3, #16
 8008128:	d10a      	bne.n	8008140 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800812a:	2300      	movs	r3, #0
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	60fb      	str	r3, [r7, #12]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	60fb      	str	r3, [r7, #12]
 800813e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff fe2a 	bl	8007da0 <HAL_UARTEx_RxEventCallback>
 800814c:	e002      	b.n	8008154 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7f9 ffb6 	bl	80020c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	e002      	b.n	800815e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008158:	2300      	movs	r3, #0
 800815a:	e000      	b.n	800815e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800815c:	2302      	movs	r3, #2
  }
}
 800815e:	4618      	mov	r0, r3
 8008160:	3730      	adds	r7, #48	@ 0x30
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
	...

08008168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800816c:	b0c0      	sub	sp, #256	@ 0x100
 800816e:	af00      	add	r7, sp, #0
 8008170:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008184:	68d9      	ldr	r1, [r3, #12]
 8008186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	ea40 0301 	orr.w	r3, r0, r1
 8008190:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008196:	689a      	ldr	r2, [r3, #8]
 8008198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	431a      	orrs	r2, r3
 80081a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081a4:	695b      	ldr	r3, [r3, #20]
 80081a6:	431a      	orrs	r2, r3
 80081a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80081b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80081c0:	f021 010c 	bic.w	r1, r1, #12
 80081c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80081ce:	430b      	orrs	r3, r1
 80081d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	695b      	ldr	r3, [r3, #20]
 80081da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80081de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e2:	6999      	ldr	r1, [r3, #24]
 80081e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	ea40 0301 	orr.w	r3, r0, r1
 80081ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	4b8f      	ldr	r3, [pc, #572]	@ (8008434 <UART_SetConfig+0x2cc>)
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d005      	beq.n	8008208 <UART_SetConfig+0xa0>
 80081fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	4b8d      	ldr	r3, [pc, #564]	@ (8008438 <UART_SetConfig+0x2d0>)
 8008204:	429a      	cmp	r2, r3
 8008206:	d104      	bne.n	8008212 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008208:	f7fe fb84 	bl	8006914 <HAL_RCC_GetPCLK2Freq>
 800820c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008210:	e003      	b.n	800821a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008212:	f7fe fb6b 	bl	80068ec <HAL_RCC_GetPCLK1Freq>
 8008216:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800821a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008224:	f040 810c 	bne.w	8008440 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800822c:	2200      	movs	r2, #0
 800822e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008232:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008236:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800823a:	4622      	mov	r2, r4
 800823c:	462b      	mov	r3, r5
 800823e:	1891      	adds	r1, r2, r2
 8008240:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008242:	415b      	adcs	r3, r3
 8008244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008246:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800824a:	4621      	mov	r1, r4
 800824c:	eb12 0801 	adds.w	r8, r2, r1
 8008250:	4629      	mov	r1, r5
 8008252:	eb43 0901 	adc.w	r9, r3, r1
 8008256:	f04f 0200 	mov.w	r2, #0
 800825a:	f04f 0300 	mov.w	r3, #0
 800825e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800826a:	4690      	mov	r8, r2
 800826c:	4699      	mov	r9, r3
 800826e:	4623      	mov	r3, r4
 8008270:	eb18 0303 	adds.w	r3, r8, r3
 8008274:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008278:	462b      	mov	r3, r5
 800827a:	eb49 0303 	adc.w	r3, r9, r3
 800827e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800828e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008296:	460b      	mov	r3, r1
 8008298:	18db      	adds	r3, r3, r3
 800829a:	653b      	str	r3, [r7, #80]	@ 0x50
 800829c:	4613      	mov	r3, r2
 800829e:	eb42 0303 	adc.w	r3, r2, r3
 80082a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80082a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80082a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80082ac:	f7f8 fc70 	bl	8000b90 <__aeabi_uldivmod>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4b61      	ldr	r3, [pc, #388]	@ (800843c <UART_SetConfig+0x2d4>)
 80082b6:	fba3 2302 	umull	r2, r3, r3, r2
 80082ba:	095b      	lsrs	r3, r3, #5
 80082bc:	011c      	lsls	r4, r3, #4
 80082be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80082c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80082cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80082d0:	4642      	mov	r2, r8
 80082d2:	464b      	mov	r3, r9
 80082d4:	1891      	adds	r1, r2, r2
 80082d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80082d8:	415b      	adcs	r3, r3
 80082da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80082e0:	4641      	mov	r1, r8
 80082e2:	eb12 0a01 	adds.w	sl, r2, r1
 80082e6:	4649      	mov	r1, r9
 80082e8:	eb43 0b01 	adc.w	fp, r3, r1
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008300:	4692      	mov	sl, r2
 8008302:	469b      	mov	fp, r3
 8008304:	4643      	mov	r3, r8
 8008306:	eb1a 0303 	adds.w	r3, sl, r3
 800830a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800830e:	464b      	mov	r3, r9
 8008310:	eb4b 0303 	adc.w	r3, fp, r3
 8008314:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008324:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008328:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800832c:	460b      	mov	r3, r1
 800832e:	18db      	adds	r3, r3, r3
 8008330:	643b      	str	r3, [r7, #64]	@ 0x40
 8008332:	4613      	mov	r3, r2
 8008334:	eb42 0303 	adc.w	r3, r2, r3
 8008338:	647b      	str	r3, [r7, #68]	@ 0x44
 800833a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800833e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008342:	f7f8 fc25 	bl	8000b90 <__aeabi_uldivmod>
 8008346:	4602      	mov	r2, r0
 8008348:	460b      	mov	r3, r1
 800834a:	4611      	mov	r1, r2
 800834c:	4b3b      	ldr	r3, [pc, #236]	@ (800843c <UART_SetConfig+0x2d4>)
 800834e:	fba3 2301 	umull	r2, r3, r3, r1
 8008352:	095b      	lsrs	r3, r3, #5
 8008354:	2264      	movs	r2, #100	@ 0x64
 8008356:	fb02 f303 	mul.w	r3, r2, r3
 800835a:	1acb      	subs	r3, r1, r3
 800835c:	00db      	lsls	r3, r3, #3
 800835e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008362:	4b36      	ldr	r3, [pc, #216]	@ (800843c <UART_SetConfig+0x2d4>)
 8008364:	fba3 2302 	umull	r2, r3, r3, r2
 8008368:	095b      	lsrs	r3, r3, #5
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008370:	441c      	add	r4, r3
 8008372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008376:	2200      	movs	r2, #0
 8008378:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800837c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008380:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008384:	4642      	mov	r2, r8
 8008386:	464b      	mov	r3, r9
 8008388:	1891      	adds	r1, r2, r2
 800838a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800838c:	415b      	adcs	r3, r3
 800838e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008390:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008394:	4641      	mov	r1, r8
 8008396:	1851      	adds	r1, r2, r1
 8008398:	6339      	str	r1, [r7, #48]	@ 0x30
 800839a:	4649      	mov	r1, r9
 800839c:	414b      	adcs	r3, r1
 800839e:	637b      	str	r3, [r7, #52]	@ 0x34
 80083a0:	f04f 0200 	mov.w	r2, #0
 80083a4:	f04f 0300 	mov.w	r3, #0
 80083a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80083ac:	4659      	mov	r1, fp
 80083ae:	00cb      	lsls	r3, r1, #3
 80083b0:	4651      	mov	r1, sl
 80083b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083b6:	4651      	mov	r1, sl
 80083b8:	00ca      	lsls	r2, r1, #3
 80083ba:	4610      	mov	r0, r2
 80083bc:	4619      	mov	r1, r3
 80083be:	4603      	mov	r3, r0
 80083c0:	4642      	mov	r2, r8
 80083c2:	189b      	adds	r3, r3, r2
 80083c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80083c8:	464b      	mov	r3, r9
 80083ca:	460a      	mov	r2, r1
 80083cc:	eb42 0303 	adc.w	r3, r2, r3
 80083d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80083d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80083e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80083e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80083e8:	460b      	mov	r3, r1
 80083ea:	18db      	adds	r3, r3, r3
 80083ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80083ee:	4613      	mov	r3, r2
 80083f0:	eb42 0303 	adc.w	r3, r2, r3
 80083f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80083fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80083fe:	f7f8 fbc7 	bl	8000b90 <__aeabi_uldivmod>
 8008402:	4602      	mov	r2, r0
 8008404:	460b      	mov	r3, r1
 8008406:	4b0d      	ldr	r3, [pc, #52]	@ (800843c <UART_SetConfig+0x2d4>)
 8008408:	fba3 1302 	umull	r1, r3, r3, r2
 800840c:	095b      	lsrs	r3, r3, #5
 800840e:	2164      	movs	r1, #100	@ 0x64
 8008410:	fb01 f303 	mul.w	r3, r1, r3
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	00db      	lsls	r3, r3, #3
 8008418:	3332      	adds	r3, #50	@ 0x32
 800841a:	4a08      	ldr	r2, [pc, #32]	@ (800843c <UART_SetConfig+0x2d4>)
 800841c:	fba2 2303 	umull	r2, r3, r2, r3
 8008420:	095b      	lsrs	r3, r3, #5
 8008422:	f003 0207 	and.w	r2, r3, #7
 8008426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4422      	add	r2, r4
 800842e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008430:	e106      	b.n	8008640 <UART_SetConfig+0x4d8>
 8008432:	bf00      	nop
 8008434:	40011000 	.word	0x40011000
 8008438:	40011400 	.word	0x40011400
 800843c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008444:	2200      	movs	r2, #0
 8008446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800844a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800844e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008452:	4642      	mov	r2, r8
 8008454:	464b      	mov	r3, r9
 8008456:	1891      	adds	r1, r2, r2
 8008458:	6239      	str	r1, [r7, #32]
 800845a:	415b      	adcs	r3, r3
 800845c:	627b      	str	r3, [r7, #36]	@ 0x24
 800845e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008462:	4641      	mov	r1, r8
 8008464:	1854      	adds	r4, r2, r1
 8008466:	4649      	mov	r1, r9
 8008468:	eb43 0501 	adc.w	r5, r3, r1
 800846c:	f04f 0200 	mov.w	r2, #0
 8008470:	f04f 0300 	mov.w	r3, #0
 8008474:	00eb      	lsls	r3, r5, #3
 8008476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800847a:	00e2      	lsls	r2, r4, #3
 800847c:	4614      	mov	r4, r2
 800847e:	461d      	mov	r5, r3
 8008480:	4643      	mov	r3, r8
 8008482:	18e3      	adds	r3, r4, r3
 8008484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008488:	464b      	mov	r3, r9
 800848a:	eb45 0303 	adc.w	r3, r5, r3
 800848e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800849e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80084a2:	f04f 0200 	mov.w	r2, #0
 80084a6:	f04f 0300 	mov.w	r3, #0
 80084aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80084ae:	4629      	mov	r1, r5
 80084b0:	008b      	lsls	r3, r1, #2
 80084b2:	4621      	mov	r1, r4
 80084b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084b8:	4621      	mov	r1, r4
 80084ba:	008a      	lsls	r2, r1, #2
 80084bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80084c0:	f7f8 fb66 	bl	8000b90 <__aeabi_uldivmod>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4b60      	ldr	r3, [pc, #384]	@ (800864c <UART_SetConfig+0x4e4>)
 80084ca:	fba3 2302 	umull	r2, r3, r3, r2
 80084ce:	095b      	lsrs	r3, r3, #5
 80084d0:	011c      	lsls	r4, r3, #4
 80084d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084d6:	2200      	movs	r2, #0
 80084d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80084dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80084e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80084e4:	4642      	mov	r2, r8
 80084e6:	464b      	mov	r3, r9
 80084e8:	1891      	adds	r1, r2, r2
 80084ea:	61b9      	str	r1, [r7, #24]
 80084ec:	415b      	adcs	r3, r3
 80084ee:	61fb      	str	r3, [r7, #28]
 80084f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084f4:	4641      	mov	r1, r8
 80084f6:	1851      	adds	r1, r2, r1
 80084f8:	6139      	str	r1, [r7, #16]
 80084fa:	4649      	mov	r1, r9
 80084fc:	414b      	adcs	r3, r1
 80084fe:	617b      	str	r3, [r7, #20]
 8008500:	f04f 0200 	mov.w	r2, #0
 8008504:	f04f 0300 	mov.w	r3, #0
 8008508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800850c:	4659      	mov	r1, fp
 800850e:	00cb      	lsls	r3, r1, #3
 8008510:	4651      	mov	r1, sl
 8008512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008516:	4651      	mov	r1, sl
 8008518:	00ca      	lsls	r2, r1, #3
 800851a:	4610      	mov	r0, r2
 800851c:	4619      	mov	r1, r3
 800851e:	4603      	mov	r3, r0
 8008520:	4642      	mov	r2, r8
 8008522:	189b      	adds	r3, r3, r2
 8008524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008528:	464b      	mov	r3, r9
 800852a:	460a      	mov	r2, r1
 800852c:	eb42 0303 	adc.w	r3, r2, r3
 8008530:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800853e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008540:	f04f 0200 	mov.w	r2, #0
 8008544:	f04f 0300 	mov.w	r3, #0
 8008548:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800854c:	4649      	mov	r1, r9
 800854e:	008b      	lsls	r3, r1, #2
 8008550:	4641      	mov	r1, r8
 8008552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008556:	4641      	mov	r1, r8
 8008558:	008a      	lsls	r2, r1, #2
 800855a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800855e:	f7f8 fb17 	bl	8000b90 <__aeabi_uldivmod>
 8008562:	4602      	mov	r2, r0
 8008564:	460b      	mov	r3, r1
 8008566:	4611      	mov	r1, r2
 8008568:	4b38      	ldr	r3, [pc, #224]	@ (800864c <UART_SetConfig+0x4e4>)
 800856a:	fba3 2301 	umull	r2, r3, r3, r1
 800856e:	095b      	lsrs	r3, r3, #5
 8008570:	2264      	movs	r2, #100	@ 0x64
 8008572:	fb02 f303 	mul.w	r3, r2, r3
 8008576:	1acb      	subs	r3, r1, r3
 8008578:	011b      	lsls	r3, r3, #4
 800857a:	3332      	adds	r3, #50	@ 0x32
 800857c:	4a33      	ldr	r2, [pc, #204]	@ (800864c <UART_SetConfig+0x4e4>)
 800857e:	fba2 2303 	umull	r2, r3, r2, r3
 8008582:	095b      	lsrs	r3, r3, #5
 8008584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008588:	441c      	add	r4, r3
 800858a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800858e:	2200      	movs	r2, #0
 8008590:	673b      	str	r3, [r7, #112]	@ 0x70
 8008592:	677a      	str	r2, [r7, #116]	@ 0x74
 8008594:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008598:	4642      	mov	r2, r8
 800859a:	464b      	mov	r3, r9
 800859c:	1891      	adds	r1, r2, r2
 800859e:	60b9      	str	r1, [r7, #8]
 80085a0:	415b      	adcs	r3, r3
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085a8:	4641      	mov	r1, r8
 80085aa:	1851      	adds	r1, r2, r1
 80085ac:	6039      	str	r1, [r7, #0]
 80085ae:	4649      	mov	r1, r9
 80085b0:	414b      	adcs	r3, r1
 80085b2:	607b      	str	r3, [r7, #4]
 80085b4:	f04f 0200 	mov.w	r2, #0
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80085c0:	4659      	mov	r1, fp
 80085c2:	00cb      	lsls	r3, r1, #3
 80085c4:	4651      	mov	r1, sl
 80085c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085ca:	4651      	mov	r1, sl
 80085cc:	00ca      	lsls	r2, r1, #3
 80085ce:	4610      	mov	r0, r2
 80085d0:	4619      	mov	r1, r3
 80085d2:	4603      	mov	r3, r0
 80085d4:	4642      	mov	r2, r8
 80085d6:	189b      	adds	r3, r3, r2
 80085d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80085da:	464b      	mov	r3, r9
 80085dc:	460a      	mov	r2, r1
 80085de:	eb42 0303 	adc.w	r3, r2, r3
 80085e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80085e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80085ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80085f0:	f04f 0200 	mov.w	r2, #0
 80085f4:	f04f 0300 	mov.w	r3, #0
 80085f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80085fc:	4649      	mov	r1, r9
 80085fe:	008b      	lsls	r3, r1, #2
 8008600:	4641      	mov	r1, r8
 8008602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008606:	4641      	mov	r1, r8
 8008608:	008a      	lsls	r2, r1, #2
 800860a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800860e:	f7f8 fabf 	bl	8000b90 <__aeabi_uldivmod>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4b0d      	ldr	r3, [pc, #52]	@ (800864c <UART_SetConfig+0x4e4>)
 8008618:	fba3 1302 	umull	r1, r3, r3, r2
 800861c:	095b      	lsrs	r3, r3, #5
 800861e:	2164      	movs	r1, #100	@ 0x64
 8008620:	fb01 f303 	mul.w	r3, r1, r3
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	011b      	lsls	r3, r3, #4
 8008628:	3332      	adds	r3, #50	@ 0x32
 800862a:	4a08      	ldr	r2, [pc, #32]	@ (800864c <UART_SetConfig+0x4e4>)
 800862c:	fba2 2303 	umull	r2, r3, r2, r3
 8008630:	095b      	lsrs	r3, r3, #5
 8008632:	f003 020f 	and.w	r2, r3, #15
 8008636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4422      	add	r2, r4
 800863e:	609a      	str	r2, [r3, #8]
}
 8008640:	bf00      	nop
 8008642:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008646:	46bd      	mov	sp, r7
 8008648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800864c:	51eb851f 	.word	0x51eb851f

08008650 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008650:	b084      	sub	sp, #16
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	f107 001c 	add.w	r0, r7, #28
 800865e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008662:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008666:	2b01      	cmp	r3, #1
 8008668:	d123      	bne.n	80086b2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800866e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800867e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008692:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008696:	2b01      	cmp	r3, #1
 8008698:	d105      	bne.n	80086a6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f001 fae8 	bl	8009c7c <USB_CoreReset>
 80086ac:	4603      	mov	r3, r0
 80086ae:	73fb      	strb	r3, [r7, #15]
 80086b0:	e01b      	b.n	80086ea <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fadc 	bl	8009c7c <USB_CoreReset>
 80086c4:	4603      	mov	r3, r0
 80086c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80086c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d106      	bne.n	80086de <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	639a      	str	r2, [r3, #56]	@ 0x38
 80086dc:	e005      	b.n	80086ea <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80086ea:	7fbb      	ldrb	r3, [r7, #30]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d10b      	bne.n	8008708 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f043 0206 	orr.w	r2, r3, #6
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f043 0220 	orr.w	r2, r3, #32
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008708:	7bfb      	ldrb	r3, [r7, #15]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008714:	b004      	add	sp, #16
 8008716:	4770      	bx	lr

08008718 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008718:	b480      	push	{r7}
 800871a:	b087      	sub	sp, #28
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	2b02      	cmp	r3, #2
 800872a:	d165      	bne.n	80087f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	4a41      	ldr	r2, [pc, #260]	@ (8008834 <USB_SetTurnaroundTime+0x11c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d906      	bls.n	8008742 <USB_SetTurnaroundTime+0x2a>
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	4a40      	ldr	r2, [pc, #256]	@ (8008838 <USB_SetTurnaroundTime+0x120>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d202      	bcs.n	8008742 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800873c:	230f      	movs	r3, #15
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	e062      	b.n	8008808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	4a3c      	ldr	r2, [pc, #240]	@ (8008838 <USB_SetTurnaroundTime+0x120>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d306      	bcc.n	8008758 <USB_SetTurnaroundTime+0x40>
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	4a3b      	ldr	r2, [pc, #236]	@ (800883c <USB_SetTurnaroundTime+0x124>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d202      	bcs.n	8008758 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008752:	230e      	movs	r3, #14
 8008754:	617b      	str	r3, [r7, #20]
 8008756:	e057      	b.n	8008808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	4a38      	ldr	r2, [pc, #224]	@ (800883c <USB_SetTurnaroundTime+0x124>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d306      	bcc.n	800876e <USB_SetTurnaroundTime+0x56>
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	4a37      	ldr	r2, [pc, #220]	@ (8008840 <USB_SetTurnaroundTime+0x128>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d202      	bcs.n	800876e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008768:	230d      	movs	r3, #13
 800876a:	617b      	str	r3, [r7, #20]
 800876c:	e04c      	b.n	8008808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	4a33      	ldr	r2, [pc, #204]	@ (8008840 <USB_SetTurnaroundTime+0x128>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d306      	bcc.n	8008784 <USB_SetTurnaroundTime+0x6c>
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	4a32      	ldr	r2, [pc, #200]	@ (8008844 <USB_SetTurnaroundTime+0x12c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d802      	bhi.n	8008784 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800877e:	230c      	movs	r3, #12
 8008780:	617b      	str	r3, [r7, #20]
 8008782:	e041      	b.n	8008808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	4a2f      	ldr	r2, [pc, #188]	@ (8008844 <USB_SetTurnaroundTime+0x12c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d906      	bls.n	800879a <USB_SetTurnaroundTime+0x82>
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	4a2e      	ldr	r2, [pc, #184]	@ (8008848 <USB_SetTurnaroundTime+0x130>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d802      	bhi.n	800879a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008794:	230b      	movs	r3, #11
 8008796:	617b      	str	r3, [r7, #20]
 8008798:	e036      	b.n	8008808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	4a2a      	ldr	r2, [pc, #168]	@ (8008848 <USB_SetTurnaroundTime+0x130>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d906      	bls.n	80087b0 <USB_SetTurnaroundTime+0x98>
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	4a29      	ldr	r2, [pc, #164]	@ (800884c <USB_SetTurnaroundTime+0x134>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d802      	bhi.n	80087b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80087aa:	230a      	movs	r3, #10
 80087ac:	617b      	str	r3, [r7, #20]
 80087ae:	e02b      	b.n	8008808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	4a26      	ldr	r2, [pc, #152]	@ (800884c <USB_SetTurnaroundTime+0x134>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d906      	bls.n	80087c6 <USB_SetTurnaroundTime+0xae>
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	4a25      	ldr	r2, [pc, #148]	@ (8008850 <USB_SetTurnaroundTime+0x138>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d202      	bcs.n	80087c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80087c0:	2309      	movs	r3, #9
 80087c2:	617b      	str	r3, [r7, #20]
 80087c4:	e020      	b.n	8008808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	4a21      	ldr	r2, [pc, #132]	@ (8008850 <USB_SetTurnaroundTime+0x138>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d306      	bcc.n	80087dc <USB_SetTurnaroundTime+0xc4>
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	4a20      	ldr	r2, [pc, #128]	@ (8008854 <USB_SetTurnaroundTime+0x13c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d802      	bhi.n	80087dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80087d6:	2308      	movs	r3, #8
 80087d8:	617b      	str	r3, [r7, #20]
 80087da:	e015      	b.n	8008808 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	4a1d      	ldr	r2, [pc, #116]	@ (8008854 <USB_SetTurnaroundTime+0x13c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d906      	bls.n	80087f2 <USB_SetTurnaroundTime+0xda>
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	4a1c      	ldr	r2, [pc, #112]	@ (8008858 <USB_SetTurnaroundTime+0x140>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d202      	bcs.n	80087f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80087ec:	2307      	movs	r3, #7
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	e00a      	b.n	8008808 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80087f2:	2306      	movs	r3, #6
 80087f4:	617b      	str	r3, [r7, #20]
 80087f6:	e007      	b.n	8008808 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d102      	bne.n	8008804 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80087fe:	2309      	movs	r3, #9
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	e001      	b.n	8008808 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008804:	2309      	movs	r3, #9
 8008806:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	68da      	ldr	r2, [r3, #12]
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	029b      	lsls	r3, r3, #10
 800881c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008820:	431a      	orrs	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008826:	2300      	movs	r3, #0
}
 8008828:	4618      	mov	r0, r3
 800882a:	371c      	adds	r7, #28
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr
 8008834:	00d8acbf 	.word	0x00d8acbf
 8008838:	00e4e1c0 	.word	0x00e4e1c0
 800883c:	00f42400 	.word	0x00f42400
 8008840:	01067380 	.word	0x01067380
 8008844:	011a499f 	.word	0x011a499f
 8008848:	01312cff 	.word	0x01312cff
 800884c:	014ca43f 	.word	0x014ca43f
 8008850:	016e3600 	.word	0x016e3600
 8008854:	01a6ab1f 	.word	0x01a6ab1f
 8008858:	01e84800 	.word	0x01e84800

0800885c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	f043 0201 	orr.w	r2, r3, #1
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800887e:	b480      	push	{r7}
 8008880:	b083      	sub	sp, #12
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	f023 0201 	bic.w	r2, r3, #1
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80088bc:	78fb      	ldrb	r3, [r7, #3]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d115      	bne.n	80088ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80088ce:	200a      	movs	r0, #10
 80088d0:	f7fa fa18 	bl	8002d04 <HAL_Delay>
      ms += 10U;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	330a      	adds	r3, #10
 80088d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f001 f93f 	bl	8009b5e <USB_GetMode>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d01e      	beq.n	8008924 <USB_SetCurrentMode+0x84>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80088ea:	d9f0      	bls.n	80088ce <USB_SetCurrentMode+0x2e>
 80088ec:	e01a      	b.n	8008924 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80088ee:	78fb      	ldrb	r3, [r7, #3]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d115      	bne.n	8008920 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008900:	200a      	movs	r0, #10
 8008902:	f7fa f9ff 	bl	8002d04 <HAL_Delay>
      ms += 10U;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	330a      	adds	r3, #10
 800890a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f001 f926 	bl	8009b5e <USB_GetMode>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d005      	beq.n	8008924 <USB_SetCurrentMode+0x84>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2bc7      	cmp	r3, #199	@ 0xc7
 800891c:	d9f0      	bls.n	8008900 <USB_SetCurrentMode+0x60>
 800891e:	e001      	b.n	8008924 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e005      	b.n	8008930 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2bc8      	cmp	r3, #200	@ 0xc8
 8008928:	d101      	bne.n	800892e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e000      	b.n	8008930 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008938:	b084      	sub	sp, #16
 800893a:	b580      	push	{r7, lr}
 800893c:	b086      	sub	sp, #24
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008946:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008952:	2300      	movs	r3, #0
 8008954:	613b      	str	r3, [r7, #16]
 8008956:	e009      	b.n	800896c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	3340      	adds	r3, #64	@ 0x40
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4413      	add	r3, r2
 8008962:	2200      	movs	r2, #0
 8008964:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	3301      	adds	r3, #1
 800896a:	613b      	str	r3, [r7, #16]
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	2b0e      	cmp	r3, #14
 8008970:	d9f2      	bls.n	8008958 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008972:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008976:	2b00      	cmp	r3, #0
 8008978:	d11c      	bne.n	80089b4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008988:	f043 0302 	orr.w	r3, r3, #2
 800898c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008992:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800899e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089aa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80089b2:	e00b      	b.n	80089cc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80089d2:	461a      	mov	r2, r3
 80089d4:	2300      	movs	r3, #0
 80089d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d10d      	bne.n	80089fc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80089e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d104      	bne.n	80089f2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80089e8:	2100      	movs	r1, #0
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f968 	bl	8008cc0 <USB_SetDevSpeed>
 80089f0:	e008      	b.n	8008a04 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80089f2:	2101      	movs	r1, #1
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 f963 	bl	8008cc0 <USB_SetDevSpeed>
 80089fa:	e003      	b.n	8008a04 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80089fc:	2103      	movs	r1, #3
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f95e 	bl	8008cc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a04:	2110      	movs	r1, #16
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 f8fa 	bl	8008c00 <USB_FlushTxFifo>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f924 	bl	8008c64 <USB_FlushRxFifo>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	2300      	movs	r3, #0
 8008a30:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a38:	461a      	mov	r2, r3
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a44:	461a      	mov	r2, r3
 8008a46:	2300      	movs	r3, #0
 8008a48:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	613b      	str	r3, [r7, #16]
 8008a4e:	e043      	b.n	8008ad8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a66:	d118      	bne.n	8008a9a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10a      	bne.n	8008a84 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	015a      	lsls	r2, r3, #5
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	4413      	add	r3, r2
 8008a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	e013      	b.n	8008aac <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a90:	461a      	mov	r2, r3
 8008a92:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008a96:	6013      	str	r3, [r2, #0]
 8008a98:	e008      	b.n	8008aac <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	015a      	lsls	r2, r3, #5
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	015a      	lsls	r2, r3, #5
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ab8:	461a      	mov	r2, r3
 8008aba:	2300      	movs	r3, #0
 8008abc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aca:	461a      	mov	r2, r3
 8008acc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008ad0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	613b      	str	r3, [r7, #16]
 8008ad8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008adc:	461a      	mov	r2, r3
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d3b5      	bcc.n	8008a50 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	613b      	str	r3, [r7, #16]
 8008ae8:	e043      	b.n	8008b72 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008afc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b00:	d118      	bne.n	8008b34 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d10a      	bne.n	8008b1e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	015a      	lsls	r2, r3, #5
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b14:	461a      	mov	r2, r3
 8008b16:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	e013      	b.n	8008b46 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	015a      	lsls	r2, r3, #5
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	4413      	add	r3, r2
 8008b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008b30:	6013      	str	r3, [r2, #0]
 8008b32:	e008      	b.n	8008b46 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	015a      	lsls	r2, r3, #5
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b40:	461a      	mov	r2, r3
 8008b42:	2300      	movs	r3, #0
 8008b44:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b52:	461a      	mov	r2, r3
 8008b54:	2300      	movs	r3, #0
 8008b56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	015a      	lsls	r2, r3, #5
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b64:	461a      	mov	r2, r3
 8008b66:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008b6a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	613b      	str	r3, [r7, #16]
 8008b72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008b76:	461a      	mov	r2, r3
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d3b5      	bcc.n	8008aea <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b90:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008b9e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008ba0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d105      	bne.n	8008bb4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	699b      	ldr	r3, [r3, #24]
 8008bac:	f043 0210 	orr.w	r2, r3, #16
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	699a      	ldr	r2, [r3, #24]
 8008bb8:	4b10      	ldr	r3, [pc, #64]	@ (8008bfc <USB_DevInit+0x2c4>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008bc0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d005      	beq.n	8008bd4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	f043 0208 	orr.w	r2, r3, #8
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008bd4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d107      	bne.n	8008bec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008be4:	f043 0304 	orr.w	r3, r3, #4
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3718      	adds	r7, #24
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bf8:	b004      	add	sp, #16
 8008bfa:	4770      	bx	lr
 8008bfc:	803c3800 	.word	0x803c3800

08008c00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3301      	adds	r3, #1
 8008c12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c1a:	d901      	bls.n	8008c20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e01b      	b.n	8008c58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	691b      	ldr	r3, [r3, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	daf2      	bge.n	8008c0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	019b      	lsls	r3, r3, #6
 8008c30:	f043 0220 	orr.w	r2, r3, #32
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c44:	d901      	bls.n	8008c4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e006      	b.n	8008c58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	f003 0320 	and.w	r3, r3, #32
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	d0f0      	beq.n	8008c38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3714      	adds	r7, #20
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	3301      	adds	r3, #1
 8008c74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008c7c:	d901      	bls.n	8008c82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e018      	b.n	8008cb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	daf2      	bge.n	8008c70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2210      	movs	r2, #16
 8008c92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3301      	adds	r3, #1
 8008c98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008ca0:	d901      	bls.n	8008ca6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e006      	b.n	8008cb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	f003 0310 	and.w	r3, r3, #16
 8008cae:	2b10      	cmp	r3, #16
 8008cb0:	d0f0      	beq.n	8008c94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	68f9      	ldr	r1, [r7, #12]
 8008cdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3714      	adds	r7, #20
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b087      	sub	sp, #28
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f003 0306 	and.w	r3, r3, #6
 8008d0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d102      	bne.n	8008d18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008d12:	2300      	movs	r3, #0
 8008d14:	75fb      	strb	r3, [r7, #23]
 8008d16:	e00a      	b.n	8008d2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d002      	beq.n	8008d24 <USB_GetDevSpeed+0x32>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2b06      	cmp	r3, #6
 8008d22:	d102      	bne.n	8008d2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008d24:	2302      	movs	r3, #2
 8008d26:	75fb      	strb	r3, [r7, #23]
 8008d28:	e001      	b.n	8008d2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008d2a:	230f      	movs	r3, #15
 8008d2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	371c      	adds	r7, #28
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	785b      	ldrb	r3, [r3, #1]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d13a      	bne.n	8008dce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d5e:	69da      	ldr	r2, [r3, #28]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	f003 030f 	and.w	r3, r3, #15
 8008d68:	2101      	movs	r1, #1
 8008d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	68f9      	ldr	r1, [r7, #12]
 8008d72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d76:	4313      	orrs	r3, r2
 8008d78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	015a      	lsls	r2, r3, #5
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4413      	add	r3, r2
 8008d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d155      	bne.n	8008e3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	791b      	ldrb	r3, [r3, #4]
 8008daa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008dac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	059b      	lsls	r3, r3, #22
 8008db2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008db4:	4313      	orrs	r3, r2
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	0151      	lsls	r1, r2, #5
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	440a      	add	r2, r1
 8008dbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008dc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dca:	6013      	str	r3, [r2, #0]
 8008dcc:	e036      	b.n	8008e3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dd4:	69da      	ldr	r2, [r3, #28]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	f003 030f 	and.w	r3, r3, #15
 8008dde:	2101      	movs	r1, #1
 8008de0:	fa01 f303 	lsl.w	r3, r1, r3
 8008de4:	041b      	lsls	r3, r3, #16
 8008de6:	68f9      	ldr	r1, [r7, #12]
 8008de8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008dec:	4313      	orrs	r3, r2
 8008dee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d11a      	bne.n	8008e3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	791b      	ldrb	r3, [r3, #4]
 8008e20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e22:	430b      	orrs	r3, r1
 8008e24:	4313      	orrs	r3, r2
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	0151      	lsls	r1, r2, #5
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	440a      	add	r2, r1
 8008e2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
	...

08008e4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	785b      	ldrb	r3, [r3, #1]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d161      	bne.n	8008f2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e7e:	d11f      	bne.n	8008ec0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	015a      	lsls	r2, r3, #5
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	0151      	lsls	r1, r2, #5
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	440a      	add	r2, r1
 8008e96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008e9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	0151      	lsls	r1, r2, #5
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	440a      	add	r2, r1
 8008eb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008eba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ebe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ec6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	f003 030f 	and.w	r3, r3, #15
 8008ed0:	2101      	movs	r1, #1
 8008ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	43db      	mvns	r3, r3
 8008eda:	68f9      	ldr	r1, [r7, #12]
 8008edc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008eea:	69da      	ldr	r2, [r3, #28]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	f003 030f 	and.w	r3, r3, #15
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	43db      	mvns	r3, r3
 8008efe:	68f9      	ldr	r1, [r7, #12]
 8008f00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008f04:	4013      	ands	r3, r2
 8008f06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	0159      	lsls	r1, r3, #5
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	440b      	add	r3, r1
 8008f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f22:	4619      	mov	r1, r3
 8008f24:	4b35      	ldr	r3, [pc, #212]	@ (8008ffc <USB_DeactivateEndpoint+0x1b0>)
 8008f26:	4013      	ands	r3, r2
 8008f28:	600b      	str	r3, [r1, #0]
 8008f2a:	e060      	b.n	8008fee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f42:	d11f      	bne.n	8008f84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	0151      	lsls	r1, r2, #5
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	440a      	add	r2, r1
 8008f5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f5e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	015a      	lsls	r2, r3, #5
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	0151      	lsls	r1, r2, #5
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	440a      	add	r2, r1
 8008f7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f8a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	f003 030f 	and.w	r3, r3, #15
 8008f94:	2101      	movs	r1, #1
 8008f96:	fa01 f303 	lsl.w	r3, r1, r3
 8008f9a:	041b      	lsls	r3, r3, #16
 8008f9c:	43db      	mvns	r3, r3
 8008f9e:	68f9      	ldr	r1, [r7, #12]
 8008fa0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fae:	69da      	ldr	r2, [r3, #28]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	f003 030f 	and.w	r3, r3, #15
 8008fb8:	2101      	movs	r1, #1
 8008fba:	fa01 f303 	lsl.w	r3, r1, r3
 8008fbe:	041b      	lsls	r3, r3, #16
 8008fc0:	43db      	mvns	r3, r3
 8008fc2:	68f9      	ldr	r1, [r7, #12]
 8008fc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008fc8:	4013      	ands	r3, r2
 8008fca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	015a      	lsls	r2, r3, #5
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	0159      	lsls	r1, r3, #5
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	440b      	add	r3, r1
 8008fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4b05      	ldr	r3, [pc, #20]	@ (8009000 <USB_DeactivateEndpoint+0x1b4>)
 8008fea:	4013      	ands	r3, r2
 8008fec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr
 8008ffc:	ec337800 	.word	0xec337800
 8009000:	eff37800 	.word	0xeff37800

08009004 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b08a      	sub	sp, #40	@ 0x28
 8009008:	af02      	add	r7, sp, #8
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	4613      	mov	r3, r2
 8009010:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	785b      	ldrb	r3, [r3, #1]
 8009020:	2b01      	cmp	r3, #1
 8009022:	f040 817f 	bne.w	8009324 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d132      	bne.n	8009094 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	015a      	lsls	r2, r3, #5
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	4413      	add	r3, r2
 8009036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	0151      	lsls	r1, r2, #5
 8009040:	69fa      	ldr	r2, [r7, #28]
 8009042:	440a      	add	r2, r1
 8009044:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009048:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800904c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009050:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	015a      	lsls	r2, r3, #5
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	4413      	add	r3, r2
 800905a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	69ba      	ldr	r2, [r7, #24]
 8009062:	0151      	lsls	r1, r2, #5
 8009064:	69fa      	ldr	r2, [r7, #28]
 8009066:	440a      	add	r2, r1
 8009068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800906c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	015a      	lsls	r2, r3, #5
 8009076:	69fb      	ldr	r3, [r7, #28]
 8009078:	4413      	add	r3, r2
 800907a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	0151      	lsls	r1, r2, #5
 8009084:	69fa      	ldr	r2, [r7, #28]
 8009086:	440a      	add	r2, r1
 8009088:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800908c:	0cdb      	lsrs	r3, r3, #19
 800908e:	04db      	lsls	r3, r3, #19
 8009090:	6113      	str	r3, [r2, #16]
 8009092:	e097      	b.n	80091c4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	015a      	lsls	r2, r3, #5
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	4413      	add	r3, r2
 800909c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	0151      	lsls	r1, r2, #5
 80090a6:	69fa      	ldr	r2, [r7, #28]
 80090a8:	440a      	add	r2, r1
 80090aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090ae:	0cdb      	lsrs	r3, r3, #19
 80090b0:	04db      	lsls	r3, r3, #19
 80090b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	015a      	lsls	r2, r3, #5
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	4413      	add	r3, r2
 80090bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	0151      	lsls	r1, r2, #5
 80090c6:	69fa      	ldr	r2, [r7, #28]
 80090c8:	440a      	add	r2, r1
 80090ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090ce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80090d2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80090d6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d11a      	bne.n	8009114 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	691a      	ldr	r2, [r3, #16]
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d903      	bls.n	80090f2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	689a      	ldr	r2, [r3, #8]
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	0151      	lsls	r1, r2, #5
 8009104:	69fa      	ldr	r2, [r7, #28]
 8009106:	440a      	add	r2, r1
 8009108:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800910c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009110:	6113      	str	r3, [r2, #16]
 8009112:	e044      	b.n	800919e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	691a      	ldr	r2, [r3, #16]
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	4413      	add	r3, r2
 800911e:	1e5a      	subs	r2, r3, #1
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	fbb2 f3f3 	udiv	r3, r2, r3
 8009128:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800912a:	69bb      	ldr	r3, [r7, #24]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009136:	691a      	ldr	r2, [r3, #16]
 8009138:	8afb      	ldrh	r3, [r7, #22]
 800913a:	04d9      	lsls	r1, r3, #19
 800913c:	4ba4      	ldr	r3, [pc, #656]	@ (80093d0 <USB_EPStartXfer+0x3cc>)
 800913e:	400b      	ands	r3, r1
 8009140:	69b9      	ldr	r1, [r7, #24]
 8009142:	0148      	lsls	r0, r1, #5
 8009144:	69f9      	ldr	r1, [r7, #28]
 8009146:	4401      	add	r1, r0
 8009148:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800914c:	4313      	orrs	r3, r2
 800914e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	791b      	ldrb	r3, [r3, #4]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d122      	bne.n	800919e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009158:	69bb      	ldr	r3, [r7, #24]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	0151      	lsls	r1, r2, #5
 800916a:	69fa      	ldr	r2, [r7, #28]
 800916c:	440a      	add	r2, r1
 800916e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009172:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009176:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009178:	69bb      	ldr	r3, [r7, #24]
 800917a:	015a      	lsls	r2, r3, #5
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	4413      	add	r3, r2
 8009180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009184:	691a      	ldr	r2, [r3, #16]
 8009186:	8afb      	ldrh	r3, [r7, #22]
 8009188:	075b      	lsls	r3, r3, #29
 800918a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800918e:	69b9      	ldr	r1, [r7, #24]
 8009190:	0148      	lsls	r0, r1, #5
 8009192:	69f9      	ldr	r1, [r7, #28]
 8009194:	4401      	add	r1, r0
 8009196:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800919a:	4313      	orrs	r3, r2
 800919c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091aa:	691a      	ldr	r2, [r3, #16]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	691b      	ldr	r3, [r3, #16]
 80091b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091b4:	69b9      	ldr	r1, [r7, #24]
 80091b6:	0148      	lsls	r0, r1, #5
 80091b8:	69f9      	ldr	r1, [r7, #28]
 80091ba:	4401      	add	r1, r0
 80091bc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80091c0:	4313      	orrs	r3, r2
 80091c2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d14b      	bne.n	8009262 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	69db      	ldr	r3, [r3, #28]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d009      	beq.n	80091e6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091de:	461a      	mov	r2, r3
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	69db      	ldr	r3, [r3, #28]
 80091e4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	791b      	ldrb	r3, [r3, #4]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d128      	bne.n	8009240 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d110      	bne.n	8009220 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	015a      	lsls	r2, r3, #5
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	4413      	add	r3, r2
 8009206:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	0151      	lsls	r1, r2, #5
 8009210:	69fa      	ldr	r2, [r7, #28]
 8009212:	440a      	add	r2, r1
 8009214:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009218:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800921c:	6013      	str	r3, [r2, #0]
 800921e:	e00f      	b.n	8009240 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	69ba      	ldr	r2, [r7, #24]
 8009230:	0151      	lsls	r1, r2, #5
 8009232:	69fa      	ldr	r2, [r7, #28]
 8009234:	440a      	add	r2, r1
 8009236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800923a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800923e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	69ba      	ldr	r2, [r7, #24]
 8009250:	0151      	lsls	r1, r2, #5
 8009252:	69fa      	ldr	r2, [r7, #28]
 8009254:	440a      	add	r2, r1
 8009256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800925a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800925e:	6013      	str	r3, [r2, #0]
 8009260:	e166      	b.n	8009530 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	69ba      	ldr	r2, [r7, #24]
 8009272:	0151      	lsls	r1, r2, #5
 8009274:	69fa      	ldr	r2, [r7, #28]
 8009276:	440a      	add	r2, r1
 8009278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800927c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009280:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	791b      	ldrb	r3, [r3, #4]
 8009286:	2b01      	cmp	r3, #1
 8009288:	d015      	beq.n	80092b6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	691b      	ldr	r3, [r3, #16]
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 814e 	beq.w	8009530 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800929a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	f003 030f 	and.w	r3, r3, #15
 80092a4:	2101      	movs	r1, #1
 80092a6:	fa01 f303 	lsl.w	r3, r1, r3
 80092aa:	69f9      	ldr	r1, [r7, #28]
 80092ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092b0:	4313      	orrs	r3, r2
 80092b2:	634b      	str	r3, [r1, #52]	@ 0x34
 80092b4:	e13c      	b.n	8009530 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d110      	bne.n	80092e8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	0151      	lsls	r1, r2, #5
 80092d8:	69fa      	ldr	r2, [r7, #28]
 80092da:	440a      	add	r2, r1
 80092dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80092e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	e00f      	b.n	8009308 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	0151      	lsls	r1, r2, #5
 80092fa:	69fa      	ldr	r2, [r7, #28]
 80092fc:	440a      	add	r2, r1
 80092fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009306:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	68d9      	ldr	r1, [r3, #12]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	781a      	ldrb	r2, [r3, #0]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	b298      	uxth	r0, r3
 8009316:	79fb      	ldrb	r3, [r7, #7]
 8009318:	9300      	str	r3, [sp, #0]
 800931a:	4603      	mov	r3, r0
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 f9b9 	bl	8009694 <USB_WritePacket>
 8009322:	e105      	b.n	8009530 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	69ba      	ldr	r2, [r7, #24]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	69fa      	ldr	r2, [r7, #28]
 8009338:	440a      	add	r2, r1
 800933a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800933e:	0cdb      	lsrs	r3, r3, #19
 8009340:	04db      	lsls	r3, r3, #19
 8009342:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	015a      	lsls	r2, r3, #5
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	4413      	add	r3, r2
 800934c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	69ba      	ldr	r2, [r7, #24]
 8009354:	0151      	lsls	r1, r2, #5
 8009356:	69fa      	ldr	r2, [r7, #28]
 8009358:	440a      	add	r2, r1
 800935a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800935e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009362:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009366:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d132      	bne.n	80093d4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d003      	beq.n	800937e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	689a      	ldr	r2, [r3, #8]
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	015a      	lsls	r2, r3, #5
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	4413      	add	r3, r2
 800938e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009392:	691a      	ldr	r2, [r3, #16]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	6a1b      	ldr	r3, [r3, #32]
 8009398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800939c:	69b9      	ldr	r1, [r7, #24]
 800939e:	0148      	lsls	r0, r1, #5
 80093a0:	69f9      	ldr	r1, [r7, #28]
 80093a2:	4401      	add	r1, r0
 80093a4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80093a8:	4313      	orrs	r3, r2
 80093aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	0151      	lsls	r1, r2, #5
 80093be:	69fa      	ldr	r2, [r7, #28]
 80093c0:	440a      	add	r2, r1
 80093c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80093ca:	6113      	str	r3, [r2, #16]
 80093cc:	e062      	b.n	8009494 <USB_EPStartXfer+0x490>
 80093ce:	bf00      	nop
 80093d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	691b      	ldr	r3, [r3, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d123      	bne.n	8009424 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093e8:	691a      	ldr	r2, [r3, #16]
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093f2:	69b9      	ldr	r1, [r7, #24]
 80093f4:	0148      	lsls	r0, r1, #5
 80093f6:	69f9      	ldr	r1, [r7, #28]
 80093f8:	4401      	add	r1, r0
 80093fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80093fe:	4313      	orrs	r3, r2
 8009400:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800940e:	691b      	ldr	r3, [r3, #16]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	0151      	lsls	r1, r2, #5
 8009414:	69fa      	ldr	r2, [r7, #28]
 8009416:	440a      	add	r2, r1
 8009418:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800941c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009420:	6113      	str	r3, [r2, #16]
 8009422:	e037      	b.n	8009494 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	691a      	ldr	r2, [r3, #16]
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	4413      	add	r3, r2
 800942e:	1e5a      	subs	r2, r3, #1
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	fbb2 f3f3 	udiv	r3, r2, r3
 8009438:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	8afa      	ldrh	r2, [r7, #22]
 8009440:	fb03 f202 	mul.w	r2, r3, r2
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	4413      	add	r3, r2
 8009450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009454:	691a      	ldr	r2, [r3, #16]
 8009456:	8afb      	ldrh	r3, [r7, #22]
 8009458:	04d9      	lsls	r1, r3, #19
 800945a:	4b38      	ldr	r3, [pc, #224]	@ (800953c <USB_EPStartXfer+0x538>)
 800945c:	400b      	ands	r3, r1
 800945e:	69b9      	ldr	r1, [r7, #24]
 8009460:	0148      	lsls	r0, r1, #5
 8009462:	69f9      	ldr	r1, [r7, #28]
 8009464:	4401      	add	r1, r0
 8009466:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800946a:	4313      	orrs	r3, r2
 800946c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	4413      	add	r3, r2
 8009476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800947a:	691a      	ldr	r2, [r3, #16]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	6a1b      	ldr	r3, [r3, #32]
 8009480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009484:	69b9      	ldr	r1, [r7, #24]
 8009486:	0148      	lsls	r0, r1, #5
 8009488:	69f9      	ldr	r1, [r7, #28]
 800948a:	4401      	add	r1, r0
 800948c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009490:	4313      	orrs	r3, r2
 8009492:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009494:	79fb      	ldrb	r3, [r7, #7]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d10d      	bne.n	80094b6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d009      	beq.n	80094b6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	68d9      	ldr	r1, [r3, #12]
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094b2:	460a      	mov	r2, r1
 80094b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	791b      	ldrb	r3, [r3, #4]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d128      	bne.n	8009510 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d110      	bne.n	80094f0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	015a      	lsls	r2, r3, #5
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	4413      	add	r3, r2
 80094d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	69ba      	ldr	r2, [r7, #24]
 80094de:	0151      	lsls	r1, r2, #5
 80094e0:	69fa      	ldr	r2, [r7, #28]
 80094e2:	440a      	add	r2, r1
 80094e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094e8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	e00f      	b.n	8009510 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	015a      	lsls	r2, r3, #5
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	4413      	add	r3, r2
 80094f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	0151      	lsls	r1, r2, #5
 8009502:	69fa      	ldr	r2, [r7, #28]
 8009504:	440a      	add	r2, r1
 8009506:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800950a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800950e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	4413      	add	r3, r2
 8009518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	69ba      	ldr	r2, [r7, #24]
 8009520:	0151      	lsls	r1, r2, #5
 8009522:	69fa      	ldr	r2, [r7, #28]
 8009524:	440a      	add	r2, r1
 8009526:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800952a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800952e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	3720      	adds	r7, #32
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	1ff80000 	.word	0x1ff80000

08009540 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	785b      	ldrb	r3, [r3, #1]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d14a      	bne.n	80095f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	015a      	lsls	r2, r3, #5
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	4413      	add	r3, r2
 8009568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009572:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009576:	f040 8086 	bne.w	8009686 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	7812      	ldrb	r2, [r2, #0]
 800958e:	0151      	lsls	r1, r2, #5
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	440a      	add	r2, r1
 8009594:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009598:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800959c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	015a      	lsls	r2, r3, #5
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	4413      	add	r3, r2
 80095a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	7812      	ldrb	r2, [r2, #0]
 80095b2:	0151      	lsls	r1, r2, #5
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	440a      	add	r2, r1
 80095b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	3301      	adds	r3, #1
 80095c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f242 7210 	movw	r2, #10000	@ 0x2710
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d902      	bls.n	80095d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	75fb      	strb	r3, [r7, #23]
          break;
 80095d6:	e056      	b.n	8009686 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80095ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095f0:	d0e7      	beq.n	80095c2 <USB_EPStopXfer+0x82>
 80095f2:	e048      	b.n	8009686 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009608:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800960c:	d13b      	bne.n	8009686 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	7812      	ldrb	r2, [r2, #0]
 8009622:	0151      	lsls	r1, r2, #5
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	440a      	add	r2, r1
 8009628:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800962c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009630:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	7812      	ldrb	r2, [r2, #0]
 8009646:	0151      	lsls	r1, r2, #5
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	440a      	add	r2, r1
 800964c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009650:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009654:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	3301      	adds	r3, #1
 800965a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009662:	4293      	cmp	r3, r2
 8009664:	d902      	bls.n	800966c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	75fb      	strb	r3, [r7, #23]
          break;
 800966a:	e00c      	b.n	8009686 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	015a      	lsls	r2, r3, #5
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	4413      	add	r3, r2
 8009676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009680:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009684:	d0e7      	beq.n	8009656 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009686:	7dfb      	ldrb	r3, [r7, #23]
}
 8009688:	4618      	mov	r0, r3
 800968a:	371c      	adds	r7, #28
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009694:	b480      	push	{r7}
 8009696:	b089      	sub	sp, #36	@ 0x24
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	4611      	mov	r1, r2
 80096a0:	461a      	mov	r2, r3
 80096a2:	460b      	mov	r3, r1
 80096a4:	71fb      	strb	r3, [r7, #7]
 80096a6:	4613      	mov	r3, r2
 80096a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80096b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d123      	bne.n	8009702 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80096ba:	88bb      	ldrh	r3, [r7, #4]
 80096bc:	3303      	adds	r3, #3
 80096be:	089b      	lsrs	r3, r3, #2
 80096c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80096c2:	2300      	movs	r3, #0
 80096c4:	61bb      	str	r3, [r7, #24]
 80096c6:	e018      	b.n	80096fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	031a      	lsls	r2, r3, #12
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096d4:	461a      	mov	r2, r3
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	3301      	adds	r3, #1
 80096e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096e2:	69fb      	ldr	r3, [r7, #28]
 80096e4:	3301      	adds	r3, #1
 80096e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	3301      	adds	r3, #1
 80096ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	3301      	adds	r3, #1
 80096f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	3301      	adds	r3, #1
 80096f8:	61bb      	str	r3, [r7, #24]
 80096fa:	69ba      	ldr	r2, [r7, #24]
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d3e2      	bcc.n	80096c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3724      	adds	r7, #36	@ 0x24
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009710:	b480      	push	{r7}
 8009712:	b08b      	sub	sp, #44	@ 0x2c
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	4613      	mov	r3, r2
 800971c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009726:	88fb      	ldrh	r3, [r7, #6]
 8009728:	089b      	lsrs	r3, r3, #2
 800972a:	b29b      	uxth	r3, r3
 800972c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800972e:	88fb      	ldrh	r3, [r7, #6]
 8009730:	f003 0303 	and.w	r3, r3, #3
 8009734:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009736:	2300      	movs	r3, #0
 8009738:	623b      	str	r3, [r7, #32]
 800973a:	e014      	b.n	8009766 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800973c:	69bb      	ldr	r3, [r7, #24]
 800973e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009746:	601a      	str	r2, [r3, #0]
    pDest++;
 8009748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974a:	3301      	adds	r3, #1
 800974c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800974e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009750:	3301      	adds	r3, #1
 8009752:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009756:	3301      	adds	r3, #1
 8009758:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	3301      	adds	r3, #1
 800975e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	3301      	adds	r3, #1
 8009764:	623b      	str	r3, [r7, #32]
 8009766:	6a3a      	ldr	r2, [r7, #32]
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	429a      	cmp	r2, r3
 800976c:	d3e6      	bcc.n	800973c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800976e:	8bfb      	ldrh	r3, [r7, #30]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d01e      	beq.n	80097b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009774:	2300      	movs	r3, #0
 8009776:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800977e:	461a      	mov	r2, r3
 8009780:	f107 0310 	add.w	r3, r7, #16
 8009784:	6812      	ldr	r2, [r2, #0]
 8009786:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	6a3b      	ldr	r3, [r7, #32]
 800978c:	b2db      	uxtb	r3, r3
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	fa22 f303 	lsr.w	r3, r2, r3
 8009794:	b2da      	uxtb	r2, r3
 8009796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009798:	701a      	strb	r2, [r3, #0]
      i++;
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	3301      	adds	r3, #1
 800979e:	623b      	str	r3, [r7, #32]
      pDest++;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a2:	3301      	adds	r3, #1
 80097a4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80097a6:	8bfb      	ldrh	r3, [r7, #30]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80097ac:	8bfb      	ldrh	r3, [r7, #30]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1ea      	bne.n	8009788 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80097b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	372c      	adds	r7, #44	@ 0x2c
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	785b      	ldrb	r3, [r3, #1]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d12c      	bne.n	8009836 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	db12      	blt.n	8009814 <USB_EPSetStall+0x54>
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00f      	beq.n	8009814 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	015a      	lsls	r2, r3, #5
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	4413      	add	r3, r2
 80097fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	0151      	lsls	r1, r2, #5
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	440a      	add	r2, r1
 800980a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800980e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009812:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	0151      	lsls	r1, r2, #5
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	440a      	add	r2, r1
 800982a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800982e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	e02b      	b.n	800988e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	015a      	lsls	r2, r3, #5
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	4413      	add	r3, r2
 800983e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	db12      	blt.n	800986e <USB_EPSetStall+0xae>
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d00f      	beq.n	800986e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	015a      	lsls	r2, r3, #5
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	4413      	add	r3, r2
 8009856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68ba      	ldr	r2, [r7, #8]
 800985e:	0151      	lsls	r1, r2, #5
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	440a      	add	r2, r1
 8009864:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009868:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800986c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	015a      	lsls	r2, r3, #5
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	4413      	add	r3, r2
 8009876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	440a      	add	r2, r1
 8009884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009888:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800988c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3714      	adds	r7, #20
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800989c:	b480      	push	{r7}
 800989e:	b085      	sub	sp, #20
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	785b      	ldrb	r3, [r3, #1]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d128      	bne.n	800990a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	0151      	lsls	r1, r2, #5
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	440a      	add	r2, r1
 80098ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80098d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	791b      	ldrb	r3, [r3, #4]
 80098dc:	2b03      	cmp	r3, #3
 80098de:	d003      	beq.n	80098e8 <USB_EPClearStall+0x4c>
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	791b      	ldrb	r3, [r3, #4]
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d138      	bne.n	800995a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	015a      	lsls	r2, r3, #5
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4413      	add	r3, r2
 80098f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	0151      	lsls	r1, r2, #5
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	440a      	add	r2, r1
 80098fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009906:	6013      	str	r3, [r2, #0]
 8009908:	e027      	b.n	800995a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	015a      	lsls	r2, r3, #5
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	4413      	add	r3, r2
 8009912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	0151      	lsls	r1, r2, #5
 800991c:	68fa      	ldr	r2, [r7, #12]
 800991e:	440a      	add	r2, r1
 8009920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009924:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009928:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	791b      	ldrb	r3, [r3, #4]
 800992e:	2b03      	cmp	r3, #3
 8009930:	d003      	beq.n	800993a <USB_EPClearStall+0x9e>
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	791b      	ldrb	r3, [r3, #4]
 8009936:	2b02      	cmp	r3, #2
 8009938:	d10f      	bne.n	800995a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	015a      	lsls	r2, r3, #5
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	4413      	add	r3, r2
 8009942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	0151      	lsls	r1, r2, #5
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	440a      	add	r2, r1
 8009950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009958:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009986:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800998a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	78fb      	ldrb	r3, [r7, #3]
 8009996:	011b      	lsls	r3, r3, #4
 8009998:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800999c:	68f9      	ldr	r1, [r7, #12]
 800999e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099a2:	4313      	orrs	r3, r2
 80099a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3714      	adds	r7, #20
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80099ce:	f023 0303 	bic.w	r3, r3, #3
 80099d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099e2:	f023 0302 	bic.w	r3, r3, #2
 80099e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80099f6:	b480      	push	{r7}
 80099f8:	b085      	sub	sp, #20
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009a10:	f023 0303 	bic.w	r3, r3, #3
 8009a14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a24:	f043 0302 	orr.w	r3, r3, #2
 8009a28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	695b      	ldr	r3, [r3, #20]
 8009a44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009a50:	68fb      	ldr	r3, [r7, #12]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr

08009a5e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a5e:	b480      	push	{r7}
 8009a60:	b085      	sub	sp, #20
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a70:	699b      	ldr	r3, [r3, #24]
 8009a72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	68ba      	ldr	r2, [r7, #8]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	0c1b      	lsrs	r3, r3, #16
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b085      	sub	sp, #20
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	68ba      	ldr	r2, [r7, #8]
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	b29b      	uxth	r3, r3
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3714      	adds	r7, #20
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b085      	sub	sp, #20
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009ad6:	78fb      	ldrb	r3, [r7, #3]
 8009ad8:	015a      	lsls	r2, r3, #5
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	4413      	add	r3, r2
 8009ade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	4013      	ands	r3, r2
 8009af2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009af4:	68bb      	ldr	r3, [r7, #8]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009b02:	b480      	push	{r7}
 8009b04:	b087      	sub	sp, #28
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b24:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009b26:	78fb      	ldrb	r3, [r7, #3]
 8009b28:	f003 030f 	and.w	r3, r3, #15
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b32:	01db      	lsls	r3, r3, #7
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	015a      	lsls	r2, r3, #5
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009b50:	68bb      	ldr	r3, [r7, #8]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	371c      	adds	r7, #28
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr

08009b5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b5e:	b480      	push	{r7}
 8009b60:	b083      	sub	sp, #12
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	f003 0301 	and.w	r3, r3, #1
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	370c      	adds	r7, #12
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr

08009b7a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009b7a:	b480      	push	{r7}
 8009b7c:	b085      	sub	sp, #20
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68fa      	ldr	r2, [r7, #12]
 8009b90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b94:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009b98:	f023 0307 	bic.w	r3, r3, #7
 8009b9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3714      	adds	r7, #20
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b087      	sub	sp, #28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	333c      	adds	r3, #60	@ 0x3c
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	4a26      	ldr	r2, [pc, #152]	@ (8009c78 <USB_EP0_OutStart+0xb8>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d90a      	bls.n	8009bfa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bf4:	d101      	bne.n	8009bfa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	e037      	b.n	8009c6a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c00:	461a      	mov	r2, r3
 8009c02:	2300      	movs	r3, #0
 8009c04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c28:	f043 0318 	orr.w	r3, r3, #24
 8009c2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	697a      	ldr	r2, [r7, #20]
 8009c38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c3c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009c40:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009c42:	7afb      	ldrb	r3, [r7, #11]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d10f      	bne.n	8009c68 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c4e:	461a      	mov	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c62:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009c66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	371c      	adds	r7, #28
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	4f54300a 	.word	0x4f54300a

08009c7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009c94:	d901      	bls.n	8009c9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e01b      	b.n	8009cd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	daf2      	bge.n	8009c88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	691b      	ldr	r3, [r3, #16]
 8009caa:	f043 0201 	orr.w	r2, r3, #1
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009cbe:	d901      	bls.n	8009cc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e006      	b.n	8009cd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d0f0      	beq.n	8009cb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
	...

08009ce0 <Motor_setup_LF>:
char* IN_RF;
char* IN_RB;
char* IN_EXTRA1;
char* IN_EXTRA2;

void Motor_setup_LF(TIM_HandleTypeDef *_TIM_14_CH1 ,TIM_HandleTypeDef *_TIM_5  ,char* _IN_LF){
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
	//Motor_setup_LF(PWM_TIM ,Encoder_TIM   ,IN_LF);

	LF_PWM = _TIM_14_CH1;
 8009cec:	4a0f      	ldr	r2, [pc, #60]	@ (8009d2c <Motor_setup_LF+0x4c>)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6013      	str	r3, [r2, #0]
	EN_LF      = _TIM_5;
 8009cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8009d30 <Motor_setup_LF+0x50>)
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LF_PWM, TIM_CHANNEL_1);       //PWM
 8009cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8009d2c <Motor_setup_LF+0x4c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fc ff44 	bl	8006b8c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LF , TIM_CHANNEL_ALL);     //Encoder
 8009d04:	4b0a      	ldr	r3, [pc, #40]	@ (8009d30 <Motor_setup_LF+0x50>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	213c      	movs	r1, #60	@ 0x3c
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fd f8ac 	bl	8006e68 <HAL_TIM_Encoder_Start>

	IN_LF = _IN_LF;
 8009d10:	4a08      	ldr	r2, [pc, #32]	@ (8009d34 <Motor_setup_LF+0x54>)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6013      	str	r3, [r2, #0]

	DutyCycle_LF_MAX = (LF_PWM->Init.Period);
 8009d16:	4b05      	ldr	r3, [pc, #20]	@ (8009d2c <Motor_setup_LF+0x4c>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	b21a      	sxth	r2, r3
 8009d1e:	4b06      	ldr	r3, [pc, #24]	@ (8009d38 <Motor_setup_LF+0x58>)
 8009d20:	801a      	strh	r2, [r3, #0]

}
 8009d22:	bf00      	nop
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	200006cc 	.word	0x200006cc
 8009d30:	200006b4 	.word	0x200006b4
 8009d34:	200006f0 	.word	0x200006f0
 8009d38:	200006e4 	.word	0x200006e4

08009d3c <Motor_setup_LB>:

void Motor_setup_LB(TIM_HandleTypeDef *_TIM_12_CH1 ,TIM_HandleTypeDef *_TIM_1  ,char* _IN_LB){
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
    //Motor_setup_LB(PWM_TIM ,Encoder_TIM  ,IN1_LB ,IN2_LB);

	LB_PWM = _TIM_12_CH1;
 8009d48:	4a0f      	ldr	r2, [pc, #60]	@ (8009d88 <Motor_setup_LB+0x4c>)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6013      	str	r3, [r2, #0]
	EN_LB      = _TIM_1;
 8009d4e:	4a0f      	ldr	r2, [pc, #60]	@ (8009d8c <Motor_setup_LB+0x50>)
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LB_PWM, TIM_CHANNEL_1);       //PWM
 8009d54:	4b0c      	ldr	r3, [pc, #48]	@ (8009d88 <Motor_setup_LB+0x4c>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	2100      	movs	r1, #0
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fc ff16 	bl	8006b8c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LB , TIM_CHANNEL_ALL);     //Encoder
 8009d60:	4b0a      	ldr	r3, [pc, #40]	@ (8009d8c <Motor_setup_LB+0x50>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	213c      	movs	r1, #60	@ 0x3c
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fd f87e 	bl	8006e68 <HAL_TIM_Encoder_Start>

	IN_LB = _IN_LB;
 8009d6c:	4a08      	ldr	r2, [pc, #32]	@ (8009d90 <Motor_setup_LB+0x54>)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6013      	str	r3, [r2, #0]

	DutyCycle_LB_MAX = (LB_PWM->Init.Period);
 8009d72:	4b05      	ldr	r3, [pc, #20]	@ (8009d88 <Motor_setup_LB+0x4c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	b21a      	sxth	r2, r3
 8009d7a:	4b06      	ldr	r3, [pc, #24]	@ (8009d94 <Motor_setup_LB+0x58>)
 8009d7c:	801a      	strh	r2, [r3, #0]

}
 8009d7e:	bf00      	nop
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	200006d0 	.word	0x200006d0
 8009d8c:	200006b8 	.word	0x200006b8
 8009d90:	200006f4 	.word	0x200006f4
 8009d94:	200006e6 	.word	0x200006e6

08009d98 <Motor_setup_RF>:

void Motor_setup_RF(TIM_HandleTypeDef *_TIM_11_CH1  ,TIM_HandleTypeDef *_TIM_8  ,char* _IN_RF){
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
    //Motor_setup_RF(PWM_TIM ,Encoder_TIM   ,IN1_RF ,IN2_RF);

	RF_PWM = _TIM_11_CH1;
 8009da4:	4a0f      	ldr	r2, [pc, #60]	@ (8009de4 <Motor_setup_RF+0x4c>)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6013      	str	r3, [r2, #0]
	EN_RF  = _TIM_8;
 8009daa:	4a0f      	ldr	r2, [pc, #60]	@ (8009de8 <Motor_setup_RF+0x50>)
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RF_PWM, TIM_CHANNEL_1);           //PWM
 8009db0:	4b0c      	ldr	r3, [pc, #48]	@ (8009de4 <Motor_setup_RF+0x4c>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2100      	movs	r1, #0
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fc fee8 	bl	8006b8c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RF , TIM_CHANNEL_ALL);     //Encoder
 8009dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8009de8 <Motor_setup_RF+0x50>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	213c      	movs	r1, #60	@ 0x3c
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fd f850 	bl	8006e68 <HAL_TIM_Encoder_Start>

	IN_RF = _IN_RF;
 8009dc8:	4a08      	ldr	r2, [pc, #32]	@ (8009dec <Motor_setup_RF+0x54>)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6013      	str	r3, [r2, #0]

	DutyCycle_RF_MAX = (RF_PWM->Init.Period);
 8009dce:	4b05      	ldr	r3, [pc, #20]	@ (8009de4 <Motor_setup_RF+0x4c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68db      	ldr	r3, [r3, #12]
 8009dd4:	b21a      	sxth	r2, r3
 8009dd6:	4b06      	ldr	r3, [pc, #24]	@ (8009df0 <Motor_setup_RF+0x58>)
 8009dd8:	801a      	strh	r2, [r3, #0]

}
 8009dda:	bf00      	nop
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	200006d4 	.word	0x200006d4
 8009de8:	200006bc 	.word	0x200006bc
 8009dec:	200006f8 	.word	0x200006f8
 8009df0:	200006e8 	.word	0x200006e8

08009df4 <Motor_setup_RB>:

void Motor_setup_RB(TIM_HandleTypeDef *_TIM_12_CH2   ,TIM_HandleTypeDef *_TIM_4 ,char* _IN_RB){
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	RB_PWM = _TIM_12_CH2;
 8009e00:	4a0f      	ldr	r2, [pc, #60]	@ (8009e40 <Motor_setup_RB+0x4c>)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6013      	str	r3, [r2, #0]
	EN_RB  = _TIM_4;
 8009e06:	4a0f      	ldr	r2, [pc, #60]	@ (8009e44 <Motor_setup_RB+0x50>)
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RB_PWM, TIM_CHANNEL_2);            //PWM
 8009e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8009e40 <Motor_setup_RB+0x4c>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2104      	movs	r1, #4
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fc feba 	bl	8006b8c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RB , TIM_CHANNEL_ALL);      //Encoder
 8009e18:	4b0a      	ldr	r3, [pc, #40]	@ (8009e44 <Motor_setup_RB+0x50>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	213c      	movs	r1, #60	@ 0x3c
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7fd f822 	bl	8006e68 <HAL_TIM_Encoder_Start>

	IN_RB = _IN_RB;
 8009e24:	4a08      	ldr	r2, [pc, #32]	@ (8009e48 <Motor_setup_RB+0x54>)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6013      	str	r3, [r2, #0]

	DutyCycle_RB_MAX = (RB_PWM->Init.Period);
 8009e2a:	4b05      	ldr	r3, [pc, #20]	@ (8009e40 <Motor_setup_RB+0x4c>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	b21a      	sxth	r2, r3
 8009e32:	4b06      	ldr	r3, [pc, #24]	@ (8009e4c <Motor_setup_RB+0x58>)
 8009e34:	801a      	strh	r2, [r3, #0]

}
 8009e36:	bf00      	nop
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	200006d8 	.word	0x200006d8
 8009e44:	200006c0 	.word	0x200006c0
 8009e48:	200006fc 	.word	0x200006fc
 8009e4c:	200006ea 	.word	0x200006ea

08009e50 <Motor_setup_EXTRA1>:

void Motor_setup_EXTRA1(TIM_HandleTypeDef *_TIM_9_CH1  ,TIM_HandleTypeDef *_TIM_3  ,char* _IN_EXTRA1){
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	60f8      	str	r0, [r7, #12]
 8009e58:	60b9      	str	r1, [r7, #8]
 8009e5a:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA1_PWM = _TIM_9_CH1;
 8009e5c:	4a0f      	ldr	r2, [pc, #60]	@ (8009e9c <Motor_setup_EXTRA1+0x4c>)
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6013      	str	r3, [r2, #0]
	EN_X  = _TIM_3;
 8009e62:	4a0f      	ldr	r2, [pc, #60]	@ (8009ea0 <Motor_setup_EXTRA1+0x50>)
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA1_PWM, TIM_CHANNEL_1);            //PWM
 8009e68:	4b0c      	ldr	r3, [pc, #48]	@ (8009e9c <Motor_setup_EXTRA1+0x4c>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fc fe8c 	bl	8006b8c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_X , TIM_CHANNEL_ALL);      //Encoder
 8009e74:	4b0a      	ldr	r3, [pc, #40]	@ (8009ea0 <Motor_setup_EXTRA1+0x50>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	213c      	movs	r1, #60	@ 0x3c
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fc fff4 	bl	8006e68 <HAL_TIM_Encoder_Start>

	IN_EXTRA1 = _IN_EXTRA1;
 8009e80:	4a08      	ldr	r2, [pc, #32]	@ (8009ea4 <Motor_setup_EXTRA1+0x54>)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA1_MAX = (EXTRA1_PWM->Init.Period);
 8009e86:	4b05      	ldr	r3, [pc, #20]	@ (8009e9c <Motor_setup_EXTRA1+0x4c>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	b21a      	sxth	r2, r3
 8009e8e:	4b06      	ldr	r3, [pc, #24]	@ (8009ea8 <Motor_setup_EXTRA1+0x58>)
 8009e90:	801a      	strh	r2, [r3, #0]

}
 8009e92:	bf00      	nop
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}
 8009e9a:	bf00      	nop
 8009e9c:	200006dc 	.word	0x200006dc
 8009ea0:	200006c4 	.word	0x200006c4
 8009ea4:	20000700 	.word	0x20000700
 8009ea8:	200006ec 	.word	0x200006ec

08009eac <Motor_setup_EXTRA2>:

void Motor_setup_EXTRA2(TIM_HandleTypeDef *_TIM_10_CH1  ,TIM_HandleTypeDef *_TIM_2 ,char* _IN_EXTRA2){
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA2_PWM = _TIM_10_CH1;
 8009eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8009ef8 <Motor_setup_EXTRA2+0x4c>)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6013      	str	r3, [r2, #0]
	EN_Y  = _TIM_2;
 8009ebe:	4a0f      	ldr	r2, [pc, #60]	@ (8009efc <Motor_setup_EXTRA2+0x50>)
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA2_PWM, TIM_CHANNEL_1);            //PWM
 8009ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ef8 <Motor_setup_EXTRA2+0x4c>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2100      	movs	r1, #0
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fc fe5e 	bl	8006b8c <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_Y , TIM_CHANNEL_ALL);      //Encoder
 8009ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8009efc <Motor_setup_EXTRA2+0x50>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	213c      	movs	r1, #60	@ 0x3c
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7fc ffc6 	bl	8006e68 <HAL_TIM_Encoder_Start>

	IN_EXTRA2 = _IN_EXTRA2;
 8009edc:	4a08      	ldr	r2, [pc, #32]	@ (8009f00 <Motor_setup_EXTRA2+0x54>)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA2_MAX = (EXTRA2_PWM->Init.Period);
 8009ee2:	4b05      	ldr	r3, [pc, #20]	@ (8009ef8 <Motor_setup_EXTRA2+0x4c>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	b21a      	sxth	r2, r3
 8009eea:	4b06      	ldr	r3, [pc, #24]	@ (8009f04 <Motor_setup_EXTRA2+0x58>)
 8009eec:	801a      	strh	r2, [r3, #0]

}
 8009eee:	bf00      	nop
 8009ef0:	3710      	adds	r7, #16
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	200006e0 	.word	0x200006e0
 8009efc:	200006c8 	.word	0x200006c8
 8009f00:	20000704 	.word	0x20000704
 8009f04:	200006ee 	.word	0x200006ee

08009f08 <getCount>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////PID///////////////////////////////////////////////////////////////

int16_t getCount(TIM_HandleTypeDef *TIM){
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
	int16_t count = ((int16_t)(TIM->Instance->CNT));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f16:	81fb      	strh	r3, [r7, #14]

	return count;
 8009f18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <Setup_CPR>:

float _RPM[6] = {0 ,0 ,0 ,0 ,0 ,0}; //Speed   //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

uint16_t CPR = 68;

void Setup_CPR(uint16_t _CPR){
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	4603      	mov	r3, r0
 8009f30:	80fb      	strh	r3, [r7, #6]
	CPR = _CPR;
 8009f32:	4a04      	ldr	r2, [pc, #16]	@ (8009f44 <Setup_CPR+0x1c>)
 8009f34:	88fb      	ldrh	r3, [r7, #6]
 8009f36:	8013      	strh	r3, [r2, #0]
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	2000000c 	.word	0x2000000c

08009f48 <Setup_Gear_Ratio>:

uint16_t Gear_Ratio = 27;

void Setup_Gear_Ratio(uint16_t _Gear_Ratio){
 8009f48:	b480      	push	{r7}
 8009f4a:	b083      	sub	sp, #12
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	4603      	mov	r3, r0
 8009f50:	80fb      	strh	r3, [r7, #6]
	Gear_Ratio = _Gear_Ratio;
 8009f52:	4a04      	ldr	r2, [pc, #16]	@ (8009f64 <Setup_Gear_Ratio+0x1c>)
 8009f54:	88fb      	ldrh	r3, [r7, #6]
 8009f56:	8013      	strh	r3, [r2, #0]
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	2000000e 	.word	0x2000000e

08009f68 <Setup_frequency_Motor>:

void Setup_frequency_Motor(uint16_t freq){
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	80fb      	strh	r3, [r7, #6]
	_freq = freq;
 8009f72:	4a04      	ldr	r2, [pc, #16]	@ (8009f84 <Setup_frequency_Motor+0x1c>)
 8009f74:	88fb      	ldrh	r3, [r7, #6]
 8009f76:	8013      	strh	r3, [r2, #0]
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	2000000a 	.word	0x2000000a

08009f88 <getRad_s_to_RPM>:
	float Rad_s = RPM * 0.10472f;

	return Rad_s;
}

float getRad_s_to_RPM(float Rad_s){
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	ed87 0a01 	vstr	s0, [r7, #4]
	float RPM__ = Rad_s * 9.549297f;
 8009f92:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f96:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8009fb8 <getRad_s_to_RPM+0x30>
 8009f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f9e:	edc7 7a03 	vstr	s15, [r7, #12]

	return RPM__;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	ee07 3a90 	vmov	s15, r3
}
 8009fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	4118c9ec 	.word	0x4118c9ec

08009fbc <getRPM_TIM_Wheel>:

float getRPM_TIM_Wheel(TIM_HandleTypeDef *TIM ,uint8_t _Wheel){
 8009fbc:	b590      	push	{r4, r7, lr}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	70fb      	strb	r3, [r7, #3]
	Present_Count[_Wheel] = (int16_t)getCount(TIM);
 8009fc8:	78fc      	ldrb	r4, [r7, #3]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f7ff ff9c 	bl	8009f08 <getCount>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	4b29      	ldr	r3, [pc, #164]	@ (800a07c <getRPM_TIM_Wheel+0xc0>)
 8009fd6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// V = count/t = count*freq
	_RPM[_Wheel] = (float)((int16_t)(Present_Count[_Wheel] - Past_Count[_Wheel]) * _freq);
 8009fda:	78fb      	ldrb	r3, [r7, #3]
 8009fdc:	4a27      	ldr	r2, [pc, #156]	@ (800a07c <getRPM_TIM_Wheel+0xc0>)
 8009fde:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	78fb      	ldrb	r3, [r7, #3]
 8009fe6:	4926      	ldr	r1, [pc, #152]	@ (800a080 <getRPM_TIM_Wheel+0xc4>)
 8009fe8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	1ad3      	subs	r3, r2, r3
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	b21b      	sxth	r3, r3
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	4b23      	ldr	r3, [pc, #140]	@ (800a084 <getRPM_TIM_Wheel+0xc8>)
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	fb03 f202 	mul.w	r2, r3, r2
 8009ffe:	78fb      	ldrb	r3, [r7, #3]
 800a000:	ee07 2a90 	vmov	s15, r2
 800a004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a008:	4a1f      	ldr	r2, [pc, #124]	@ (800a088 <getRPM_TIM_Wheel+0xcc>)
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	4413      	add	r3, r2
 800a00e:	edc3 7a00 	vstr	s15, [r3]
	_RPM[_Wheel] = (float)(((_RPM[_Wheel]* 60.0f)/CPR )/Gear_Ratio);
 800a012:	78fb      	ldrb	r3, [r7, #3]
 800a014:	4a1c      	ldr	r2, [pc, #112]	@ (800a088 <getRPM_TIM_Wheel+0xcc>)
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4413      	add	r3, r2
 800a01a:	edd3 7a00 	vldr	s15, [r3]
 800a01e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800a08c <getRPM_TIM_Wheel+0xd0>
 800a022:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a026:	4b1a      	ldr	r3, [pc, #104]	@ (800a090 <getRPM_TIM_Wheel+0xd4>)
 800a028:	881b      	ldrh	r3, [r3, #0]
 800a02a:	ee07 3a90 	vmov	s15, r3
 800a02e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a032:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a036:	4b17      	ldr	r3, [pc, #92]	@ (800a094 <getRPM_TIM_Wheel+0xd8>)
 800a038:	881b      	ldrh	r3, [r3, #0]
 800a03a:	ee07 3a90 	vmov	s15, r3
 800a03e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a042:	78fb      	ldrb	r3, [r7, #3]
 800a044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a048:	4a0f      	ldr	r2, [pc, #60]	@ (800a088 <getRPM_TIM_Wheel+0xcc>)
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	edc3 7a00 	vstr	s15, [r3]

	Past_Count[_Wheel] = Present_Count[_Wheel];
 800a052:	78fa      	ldrb	r2, [r7, #3]
 800a054:	78fb      	ldrb	r3, [r7, #3]
 800a056:	4909      	ldr	r1, [pc, #36]	@ (800a07c <getRPM_TIM_Wheel+0xc0>)
 800a058:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800a05c:	4a08      	ldr	r2, [pc, #32]	@ (800a080 <getRPM_TIM_Wheel+0xc4>)
 800a05e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return _RPM[_Wheel];
 800a062:	78fb      	ldrb	r3, [r7, #3]
 800a064:	4a08      	ldr	r2, [pc, #32]	@ (800a088 <getRPM_TIM_Wheel+0xcc>)
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	ee07 3a90 	vmov	s15, r3
}
 800a070:	eeb0 0a67 	vmov.f32	s0, s15
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	bd90      	pop	{r4, r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20000708 	.word	0x20000708
 800a080:	20000714 	.word	0x20000714
 800a084:	2000000a 	.word	0x2000000a
 800a088:	20000720 	.word	0x20000720
 800a08c:	42700000 	.word	0x42700000
 800a090:	2000000c 	.word	0x2000000c
 800a094:	2000000e 	.word	0x2000000e

0800a098 <Setup_PID_LF>:

float min_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float max_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2


void Setup_PID_LF(float Kp_LF ,float Ki_LF ,float Kd_LF ,float min_speed_LF ,float max_speed_LF){
 800a098:	b480      	push	{r7}
 800a09a:	b087      	sub	sp, #28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	ed87 0a05 	vstr	s0, [r7, #20]
 800a0a2:	edc7 0a04 	vstr	s1, [r7, #16]
 800a0a6:	ed87 1a03 	vstr	s2, [r7, #12]
 800a0aa:	edc7 1a02 	vstr	s3, [r7, #8]
 800a0ae:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[0] = Kp_LF;
 800a0b2:	4a0a      	ldr	r2, [pc, #40]	@ (800a0dc <Setup_PID_LF+0x44>)
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	6013      	str	r3, [r2, #0]
	Ki_Wheel[0] = Ki_LF;
 800a0b8:	4a09      	ldr	r2, [pc, #36]	@ (800a0e0 <Setup_PID_LF+0x48>)
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	6013      	str	r3, [r2, #0]
	Kd_Wheel[0] = Kd_LF;
 800a0be:	4a09      	ldr	r2, [pc, #36]	@ (800a0e4 <Setup_PID_LF+0x4c>)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6013      	str	r3, [r2, #0]

	min_speed[0] = min_speed_LF;
 800a0c4:	4a08      	ldr	r2, [pc, #32]	@ (800a0e8 <Setup_PID_LF+0x50>)
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	6013      	str	r3, [r2, #0]
	max_speed[0] = max_speed_LF;
 800a0ca:	4a08      	ldr	r2, [pc, #32]	@ (800a0ec <Setup_PID_LF+0x54>)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6013      	str	r3, [r2, #0]
}
 800a0d0:	bf00      	nop
 800a0d2:	371c      	adds	r7, #28
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	20000738 	.word	0x20000738
 800a0e0:	20000750 	.word	0x20000750
 800a0e4:	20000768 	.word	0x20000768
 800a0e8:	20000780 	.word	0x20000780
 800a0ec:	20000798 	.word	0x20000798

0800a0f0 <Setup_PID_LB>:

void Setup_PID_LB(float Kp_LB ,float Ki_LB ,float Kd_LB ,float min_speed_LB ,float max_speed_LB){
 800a0f0:	b480      	push	{r7}
 800a0f2:	b087      	sub	sp, #28
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	ed87 0a05 	vstr	s0, [r7, #20]
 800a0fa:	edc7 0a04 	vstr	s1, [r7, #16]
 800a0fe:	ed87 1a03 	vstr	s2, [r7, #12]
 800a102:	edc7 1a02 	vstr	s3, [r7, #8]
 800a106:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[1] = Kp_LB;
 800a10a:	4a0a      	ldr	r2, [pc, #40]	@ (800a134 <Setup_PID_LB+0x44>)
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	6053      	str	r3, [r2, #4]
	Ki_Wheel[1] = Ki_LB;
 800a110:	4a09      	ldr	r2, [pc, #36]	@ (800a138 <Setup_PID_LB+0x48>)
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	6053      	str	r3, [r2, #4]
	Kd_Wheel[1] = Kd_LB;
 800a116:	4a09      	ldr	r2, [pc, #36]	@ (800a13c <Setup_PID_LB+0x4c>)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6053      	str	r3, [r2, #4]

	min_speed[1] = min_speed_LB;
 800a11c:	4a08      	ldr	r2, [pc, #32]	@ (800a140 <Setup_PID_LB+0x50>)
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	6053      	str	r3, [r2, #4]
	max_speed[1] = max_speed_LB;
 800a122:	4a08      	ldr	r2, [pc, #32]	@ (800a144 <Setup_PID_LB+0x54>)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6053      	str	r3, [r2, #4]
}
 800a128:	bf00      	nop
 800a12a:	371c      	adds	r7, #28
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	20000738 	.word	0x20000738
 800a138:	20000750 	.word	0x20000750
 800a13c:	20000768 	.word	0x20000768
 800a140:	20000780 	.word	0x20000780
 800a144:	20000798 	.word	0x20000798

0800a148 <Setup_PID_RF>:

void Setup_PID_RF(float Kp_RF ,float Ki_RF ,float Kd_RF ,float min_speed_RF ,float max_speed_RF){
 800a148:	b480      	push	{r7}
 800a14a:	b087      	sub	sp, #28
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	ed87 0a05 	vstr	s0, [r7, #20]
 800a152:	edc7 0a04 	vstr	s1, [r7, #16]
 800a156:	ed87 1a03 	vstr	s2, [r7, #12]
 800a15a:	edc7 1a02 	vstr	s3, [r7, #8]
 800a15e:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[2] = Kp_RF;
 800a162:	4a0a      	ldr	r2, [pc, #40]	@ (800a18c <Setup_PID_RF+0x44>)
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	6093      	str	r3, [r2, #8]
	Ki_Wheel[2] = Ki_RF;
 800a168:	4a09      	ldr	r2, [pc, #36]	@ (800a190 <Setup_PID_RF+0x48>)
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	6093      	str	r3, [r2, #8]
	Kd_Wheel[2] = Kd_RF;
 800a16e:	4a09      	ldr	r2, [pc, #36]	@ (800a194 <Setup_PID_RF+0x4c>)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6093      	str	r3, [r2, #8]

	min_speed[2] = min_speed_RF;
 800a174:	4a08      	ldr	r2, [pc, #32]	@ (800a198 <Setup_PID_RF+0x50>)
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	6093      	str	r3, [r2, #8]
	max_speed[2] = max_speed_RF;
 800a17a:	4a08      	ldr	r2, [pc, #32]	@ (800a19c <Setup_PID_RF+0x54>)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6093      	str	r3, [r2, #8]
}
 800a180:	bf00      	nop
 800a182:	371c      	adds	r7, #28
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr
 800a18c:	20000738 	.word	0x20000738
 800a190:	20000750 	.word	0x20000750
 800a194:	20000768 	.word	0x20000768
 800a198:	20000780 	.word	0x20000780
 800a19c:	20000798 	.word	0x20000798

0800a1a0 <Setup_PID_RB>:

void Setup_PID_RB(float Kp_RB ,float Ki_RB ,float Kd_RB ,float min_speed_RB ,float max_speed_RB){
 800a1a0:	b480      	push	{r7}
 800a1a2:	b087      	sub	sp, #28
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	ed87 0a05 	vstr	s0, [r7, #20]
 800a1aa:	edc7 0a04 	vstr	s1, [r7, #16]
 800a1ae:	ed87 1a03 	vstr	s2, [r7, #12]
 800a1b2:	edc7 1a02 	vstr	s3, [r7, #8]
 800a1b6:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[3] = Kp_RB;
 800a1ba:	4a0a      	ldr	r2, [pc, #40]	@ (800a1e4 <Setup_PID_RB+0x44>)
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	60d3      	str	r3, [r2, #12]
	Ki_Wheel[3] = Ki_RB;
 800a1c0:	4a09      	ldr	r2, [pc, #36]	@ (800a1e8 <Setup_PID_RB+0x48>)
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	60d3      	str	r3, [r2, #12]
	Kd_Wheel[3] = Kd_RB;
 800a1c6:	4a09      	ldr	r2, [pc, #36]	@ (800a1ec <Setup_PID_RB+0x4c>)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	60d3      	str	r3, [r2, #12]

	min_speed[3] = min_speed_RB;
 800a1cc:	4a08      	ldr	r2, [pc, #32]	@ (800a1f0 <Setup_PID_RB+0x50>)
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	60d3      	str	r3, [r2, #12]
	max_speed[3] = max_speed_RB;
 800a1d2:	4a08      	ldr	r2, [pc, #32]	@ (800a1f4 <Setup_PID_RB+0x54>)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	60d3      	str	r3, [r2, #12]
}
 800a1d8:	bf00      	nop
 800a1da:	371c      	adds	r7, #28
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	20000738 	.word	0x20000738
 800a1e8:	20000750 	.word	0x20000750
 800a1ec:	20000768 	.word	0x20000768
 800a1f0:	20000780 	.word	0x20000780
 800a1f4:	20000798 	.word	0x20000798

0800a1f8 <PID_Speed>:

float Past_Error[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Output_PID[6]    = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float PID_Speed(float _Setpoint ,int16_t RPM ,uint8_t _Wheel){
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	ed87 0a01 	vstr	s0, [r7, #4]
 800a202:	4603      	mov	r3, r0
 800a204:	460a      	mov	r2, r1
 800a206:	807b      	strh	r3, [r7, #2]
 800a208:	4613      	mov	r3, r2
 800a20a:	707b      	strb	r3, [r7, #1]
//	  case 4 : getRPM_TIM_Wheel(EN_X ,EXTRA1 ); break;
//	  case 5 : getRPM_TIM_Wheel(EN_Y ,EXTRA2 ); break;
//	}

//	Error_Speed[_Wheel] = _Setpoint-_RPM[_Wheel];
	Error_Speed[_Wheel] = _Setpoint-RPM;
 800a20c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a210:	ee07 3a90 	vmov	s15, r3
 800a214:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a218:	787b      	ldrb	r3, [r7, #1]
 800a21a:	ed97 7a01 	vldr	s14, [r7, #4]
 800a21e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a222:	4a41      	ldr	r2, [pc, #260]	@ (800a328 <PID_Speed+0x130>)
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	4413      	add	r3, r2
 800a228:	edc3 7a00 	vstr	s15, [r3]

	Proportional[_Wheel] = Error_Speed[_Wheel];
 800a22c:	787a      	ldrb	r2, [r7, #1]
 800a22e:	787b      	ldrb	r3, [r7, #1]
 800a230:	493d      	ldr	r1, [pc, #244]	@ (800a328 <PID_Speed+0x130>)
 800a232:	0092      	lsls	r2, r2, #2
 800a234:	440a      	add	r2, r1
 800a236:	6812      	ldr	r2, [r2, #0]
 800a238:	493c      	ldr	r1, [pc, #240]	@ (800a32c <PID_Speed+0x134>)
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	440b      	add	r3, r1
 800a23e:	601a      	str	r2, [r3, #0]
	Integnator[_Wheel]   += Error_Speed[_Wheel];
 800a240:	787b      	ldrb	r3, [r7, #1]
 800a242:	4a3b      	ldr	r2, [pc, #236]	@ (800a330 <PID_Speed+0x138>)
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	ed93 7a00 	vldr	s14, [r3]
 800a24c:	787b      	ldrb	r3, [r7, #1]
 800a24e:	4a36      	ldr	r2, [pc, #216]	@ (800a328 <PID_Speed+0x130>)
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	edd3 7a00 	vldr	s15, [r3]
 800a258:	787b      	ldrb	r3, [r7, #1]
 800a25a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a25e:	4a34      	ldr	r2, [pc, #208]	@ (800a330 <PID_Speed+0x138>)
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	edc3 7a00 	vstr	s15, [r3]
	Derivative[_Wheel]   = Error_Speed[_Wheel] - Past_Error[_Wheel];
 800a268:	787b      	ldrb	r3, [r7, #1]
 800a26a:	4a2f      	ldr	r2, [pc, #188]	@ (800a328 <PID_Speed+0x130>)
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4413      	add	r3, r2
 800a270:	ed93 7a00 	vldr	s14, [r3]
 800a274:	787b      	ldrb	r3, [r7, #1]
 800a276:	4a2f      	ldr	r2, [pc, #188]	@ (800a334 <PID_Speed+0x13c>)
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	edd3 7a00 	vldr	s15, [r3]
 800a280:	787b      	ldrb	r3, [r7, #1]
 800a282:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a286:	4a2c      	ldr	r2, [pc, #176]	@ (800a338 <PID_Speed+0x140>)
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	edc3 7a00 	vstr	s15, [r3]

	Past_Error[_Wheel] = Error_Speed[_Wheel];
 800a290:	787a      	ldrb	r2, [r7, #1]
 800a292:	787b      	ldrb	r3, [r7, #1]
 800a294:	4924      	ldr	r1, [pc, #144]	@ (800a328 <PID_Speed+0x130>)
 800a296:	0092      	lsls	r2, r2, #2
 800a298:	440a      	add	r2, r1
 800a29a:	6812      	ldr	r2, [r2, #0]
 800a29c:	4925      	ldr	r1, [pc, #148]	@ (800a334 <PID_Speed+0x13c>)
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	440b      	add	r3, r1
 800a2a2:	601a      	str	r2, [r3, #0]

	Output_PID[_Wheel]  = (float)((Proportional[_Wheel]*Kp_Wheel[_Wheel]) + (Integnator[_Wheel]*Ki_Wheel[_Wheel]) + (Derivative[_Wheel]*Kd_Wheel[_Wheel]));
 800a2a4:	787b      	ldrb	r3, [r7, #1]
 800a2a6:	4a21      	ldr	r2, [pc, #132]	@ (800a32c <PID_Speed+0x134>)
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	ed93 7a00 	vldr	s14, [r3]
 800a2b0:	787b      	ldrb	r3, [r7, #1]
 800a2b2:	4a22      	ldr	r2, [pc, #136]	@ (800a33c <PID_Speed+0x144>)
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	edd3 7a00 	vldr	s15, [r3]
 800a2bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2c0:	787b      	ldrb	r3, [r7, #1]
 800a2c2:	4a1b      	ldr	r2, [pc, #108]	@ (800a330 <PID_Speed+0x138>)
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	4413      	add	r3, r2
 800a2c8:	edd3 6a00 	vldr	s13, [r3]
 800a2cc:	787b      	ldrb	r3, [r7, #1]
 800a2ce:	4a1c      	ldr	r2, [pc, #112]	@ (800a340 <PID_Speed+0x148>)
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	4413      	add	r3, r2
 800a2d4:	edd3 7a00 	vldr	s15, [r3]
 800a2d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2e0:	787b      	ldrb	r3, [r7, #1]
 800a2e2:	4a15      	ldr	r2, [pc, #84]	@ (800a338 <PID_Speed+0x140>)
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	edd3 6a00 	vldr	s13, [r3]
 800a2ec:	787b      	ldrb	r3, [r7, #1]
 800a2ee:	4a15      	ldr	r2, [pc, #84]	@ (800a344 <PID_Speed+0x14c>)
 800a2f0:	009b      	lsls	r3, r3, #2
 800a2f2:	4413      	add	r3, r2
 800a2f4:	edd3 7a00 	vldr	s15, [r3]
 800a2f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2fc:	787b      	ldrb	r3, [r7, #1]
 800a2fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a302:	4a11      	ldr	r2, [pc, #68]	@ (800a348 <PID_Speed+0x150>)
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4413      	add	r3, r2
 800a308:	edc3 7a00 	vstr	s15, [r3]


	return Output_PID[_Wheel];
 800a30c:	787b      	ldrb	r3, [r7, #1]
 800a30e:	4a0e      	ldr	r2, [pc, #56]	@ (800a348 <PID_Speed+0x150>)
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4413      	add	r3, r2
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	ee07 3a90 	vmov	s15, r3
}
 800a31a:	eeb0 0a67 	vmov.f32	s0, s15
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	200007b0 	.word	0x200007b0
 800a32c:	200007c8 	.word	0x200007c8
 800a330:	200007e0 	.word	0x200007e0
 800a334:	20000810 	.word	0x20000810
 800a338:	200007f8 	.word	0x200007f8
 800a33c:	20000738 	.word	0x20000738
 800a340:	20000750 	.word	0x20000750
 800a344:	20000768 	.word	0x20000768
 800a348:	20000828 	.word	0x20000828

0800a34c <Motor_DutyCycle_LF>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////Motor////////////////////////////////////////////////////////////////////
void Motor_DutyCycle_LF(int16_t DutyCycle_LF){
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	4603      	mov	r3, r0
 800a354:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LF > DutyCycle_LF_MAX) {
 800a356:	4b26      	ldr	r3, [pc, #152]	@ (800a3f0 <Motor_DutyCycle_LF+0xa4>)
 800a358:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a35c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a360:	429a      	cmp	r2, r3
 800a362:	dd03      	ble.n	800a36c <Motor_DutyCycle_LF+0x20>
	    DutyCycle_LF = DutyCycle_LF_MAX;
 800a364:	4b22      	ldr	r3, [pc, #136]	@ (800a3f0 <Motor_DutyCycle_LF+0xa4>)
 800a366:	881b      	ldrh	r3, [r3, #0]
 800a368:	80fb      	strh	r3, [r7, #6]
 800a36a:	e00e      	b.n	800a38a <Motor_DutyCycle_LF+0x3e>
	} else if (DutyCycle_LF < -DutyCycle_LF_MAX) {
 800a36c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a370:	4b1f      	ldr	r3, [pc, #124]	@ (800a3f0 <Motor_DutyCycle_LF+0xa4>)
 800a372:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a376:	425b      	negs	r3, r3
 800a378:	429a      	cmp	r2, r3
 800a37a:	da06      	bge.n	800a38a <Motor_DutyCycle_LF+0x3e>
		DutyCycle_LF = -DutyCycle_LF_MAX;
 800a37c:	4b1c      	ldr	r3, [pc, #112]	@ (800a3f0 <Motor_DutyCycle_LF+0xa4>)
 800a37e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a382:	b29b      	uxth	r3, r3
 800a384:	425b      	negs	r3, r3
 800a386:	b29b      	uxth	r3, r3
 800a388:	80fb      	strh	r3, [r7, #6]
	}

	LF_PWM->Instance->CCR1 = (DutyCycle_LF > 0) ? (int16_t)DutyCycle_LF : (DutyCycle_LF_MAX + (int16_t)DutyCycle_LF);
 800a38a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	dd02      	ble.n	800a398 <Motor_DutyCycle_LF+0x4c>
 800a392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a396:	e006      	b.n	800a3a6 <Motor_DutyCycle_LF+0x5a>
 800a398:	4b15      	ldr	r3, [pc, #84]	@ (800a3f0 <Motor_DutyCycle_LF+0xa4>)
 800a39a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	4a13      	ldr	r2, [pc, #76]	@ (800a3f4 <Motor_DutyCycle_LF+0xa8>)
 800a3a8:	6812      	ldr	r2, [r2, #0]
 800a3aa:	6812      	ldr	r2, [r2, #0]
 800a3ac:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LF , (DutyCycle_LF < 0) ? 1 : 0);
 800a3ae:	4b12      	ldr	r3, [pc, #72]	@ (800a3f8 <Motor_DutyCycle_LF+0xac>)
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3b6:	13db      	asrs	r3, r3, #15
 800a3b8:	b21b      	sxth	r3, r3
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	f003 0301 	and.w	r3, r3, #1
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	f000 fba1 	bl	800ab0c <digitalWrite>

	if(DutyCycle_LF == 0){
 800a3ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10a      	bne.n	800a3e8 <Motor_DutyCycle_LF+0x9c>
	   LF_PWM->Instance->CCR1 = 0;
 800a3d2:	4b08      	ldr	r3, [pc, #32]	@ (800a3f4 <Motor_DutyCycle_LF+0xa8>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LF ,0);
 800a3dc:	4b06      	ldr	r3, [pc, #24]	@ (800a3f8 <Motor_DutyCycle_LF+0xac>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f000 fb92 	bl	800ab0c <digitalWrite>
	}
}
 800a3e8:	bf00      	nop
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}
 800a3f0:	200006e4 	.word	0x200006e4
 800a3f4:	200006cc 	.word	0x200006cc
 800a3f8:	200006f0 	.word	0x200006f0

0800a3fc <Motor_DutyCycle_LB>:

void Motor_DutyCycle_LB(int16_t DutyCycle_LB){
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	80fb      	strh	r3, [r7, #6]
	DutyCycle_LB = -DutyCycle_LB;
 800a406:	88fb      	ldrh	r3, [r7, #6]
 800a408:	425b      	negs	r3, r3
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LB > DutyCycle_LB_MAX) {
 800a40e:	4b26      	ldr	r3, [pc, #152]	@ (800a4a8 <Motor_DutyCycle_LB+0xac>)
 800a410:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a414:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a418:	429a      	cmp	r2, r3
 800a41a:	dd03      	ble.n	800a424 <Motor_DutyCycle_LB+0x28>
		DutyCycle_LB = DutyCycle_LB_MAX;
 800a41c:	4b22      	ldr	r3, [pc, #136]	@ (800a4a8 <Motor_DutyCycle_LB+0xac>)
 800a41e:	881b      	ldrh	r3, [r3, #0]
 800a420:	80fb      	strh	r3, [r7, #6]
 800a422:	e00e      	b.n	800a442 <Motor_DutyCycle_LB+0x46>
	} else if (DutyCycle_LB < -DutyCycle_LB_MAX) {
 800a424:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a428:	4b1f      	ldr	r3, [pc, #124]	@ (800a4a8 <Motor_DutyCycle_LB+0xac>)
 800a42a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a42e:	425b      	negs	r3, r3
 800a430:	429a      	cmp	r2, r3
 800a432:	da06      	bge.n	800a442 <Motor_DutyCycle_LB+0x46>
		DutyCycle_LB = -DutyCycle_LB_MAX;
 800a434:	4b1c      	ldr	r3, [pc, #112]	@ (800a4a8 <Motor_DutyCycle_LB+0xac>)
 800a436:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	425b      	negs	r3, r3
 800a43e:	b29b      	uxth	r3, r3
 800a440:	80fb      	strh	r3, [r7, #6]
	}

	LB_PWM->Instance->CCR1 = (DutyCycle_LB > 0) ? (int16_t)DutyCycle_LB : (DutyCycle_LB_MAX + (int16_t)DutyCycle_LB);
 800a442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a446:	2b00      	cmp	r3, #0
 800a448:	dd02      	ble.n	800a450 <Motor_DutyCycle_LB+0x54>
 800a44a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a44e:	e006      	b.n	800a45e <Motor_DutyCycle_LB+0x62>
 800a450:	4b15      	ldr	r3, [pc, #84]	@ (800a4a8 <Motor_DutyCycle_LB+0xac>)
 800a452:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a456:	461a      	mov	r2, r3
 800a458:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a45c:	4413      	add	r3, r2
 800a45e:	4a13      	ldr	r2, [pc, #76]	@ (800a4ac <Motor_DutyCycle_LB+0xb0>)
 800a460:	6812      	ldr	r2, [r2, #0]
 800a462:	6812      	ldr	r2, [r2, #0]
 800a464:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LB , (DutyCycle_LB < 0) ? 1 : 0);
 800a466:	4b12      	ldr	r3, [pc, #72]	@ (800a4b0 <Motor_DutyCycle_LB+0xb4>)
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a46e:	13db      	asrs	r3, r3, #15
 800a470:	b21b      	sxth	r3, r3
 800a472:	b2db      	uxtb	r3, r3
 800a474:	f003 0301 	and.w	r3, r3, #1
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	4619      	mov	r1, r3
 800a47c:	4610      	mov	r0, r2
 800a47e:	f000 fb45 	bl	800ab0c <digitalWrite>

	if(DutyCycle_LB == 0){
 800a482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10a      	bne.n	800a4a0 <Motor_DutyCycle_LB+0xa4>
	   LB_PWM->Instance->CCR1 = 0;
 800a48a:	4b08      	ldr	r3, [pc, #32]	@ (800a4ac <Motor_DutyCycle_LB+0xb0>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2200      	movs	r2, #0
 800a492:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LB ,0);
 800a494:	4b06      	ldr	r3, [pc, #24]	@ (800a4b0 <Motor_DutyCycle_LB+0xb4>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2100      	movs	r1, #0
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fb36 	bl	800ab0c <digitalWrite>
	}
}
 800a4a0:	bf00      	nop
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	200006e6 	.word	0x200006e6
 800a4ac:	200006d0 	.word	0x200006d0
 800a4b0:	200006f4 	.word	0x200006f4

0800a4b4 <Motor_DutyCycle_RF>:

void Motor_DutyCycle_RF(int16_t DutyCycle_RF){
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	80fb      	strh	r3, [r7, #6]
	DutyCycle_RF = -DutyCycle_RF;
 800a4be:	88fb      	ldrh	r3, [r7, #6]
 800a4c0:	425b      	negs	r3, r3
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RF > DutyCycle_RF_MAX) {
 800a4c6:	4b26      	ldr	r3, [pc, #152]	@ (800a560 <Motor_DutyCycle_RF+0xac>)
 800a4c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	dd03      	ble.n	800a4dc <Motor_DutyCycle_RF+0x28>
		DutyCycle_RF = DutyCycle_RF_MAX;
 800a4d4:	4b22      	ldr	r3, [pc, #136]	@ (800a560 <Motor_DutyCycle_RF+0xac>)
 800a4d6:	881b      	ldrh	r3, [r3, #0]
 800a4d8:	80fb      	strh	r3, [r7, #6]
 800a4da:	e00e      	b.n	800a4fa <Motor_DutyCycle_RF+0x46>
	} else if (DutyCycle_RF < -DutyCycle_RF_MAX) {
 800a4dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a4e0:	4b1f      	ldr	r3, [pc, #124]	@ (800a560 <Motor_DutyCycle_RF+0xac>)
 800a4e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4e6:	425b      	negs	r3, r3
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	da06      	bge.n	800a4fa <Motor_DutyCycle_RF+0x46>
		DutyCycle_RF = -DutyCycle_RF_MAX;
 800a4ec:	4b1c      	ldr	r3, [pc, #112]	@ (800a560 <Motor_DutyCycle_RF+0xac>)
 800a4ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	425b      	negs	r3, r3
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	80fb      	strh	r3, [r7, #6]
	}

	RF_PWM->Instance->CCR1 = (DutyCycle_RF > 0) ? (int16_t)DutyCycle_RF : (DutyCycle_RF_MAX + (int16_t)DutyCycle_RF);
 800a4fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	dd02      	ble.n	800a508 <Motor_DutyCycle_RF+0x54>
 800a502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a506:	e006      	b.n	800a516 <Motor_DutyCycle_RF+0x62>
 800a508:	4b15      	ldr	r3, [pc, #84]	@ (800a560 <Motor_DutyCycle_RF+0xac>)
 800a50a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a50e:	461a      	mov	r2, r3
 800a510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a514:	4413      	add	r3, r2
 800a516:	4a13      	ldr	r2, [pc, #76]	@ (800a564 <Motor_DutyCycle_RF+0xb0>)
 800a518:	6812      	ldr	r2, [r2, #0]
 800a51a:	6812      	ldr	r2, [r2, #0]
 800a51c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_RF , (DutyCycle_RF < 0) ? 1 : 0);
 800a51e:	4b12      	ldr	r3, [pc, #72]	@ (800a568 <Motor_DutyCycle_RF+0xb4>)
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a526:	13db      	asrs	r3, r3, #15
 800a528:	b21b      	sxth	r3, r3
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	f003 0301 	and.w	r3, r3, #1
 800a530:	b2db      	uxtb	r3, r3
 800a532:	4619      	mov	r1, r3
 800a534:	4610      	mov	r0, r2
 800a536:	f000 fae9 	bl	800ab0c <digitalWrite>

	if(DutyCycle_RF == 0){
 800a53a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10a      	bne.n	800a558 <Motor_DutyCycle_RF+0xa4>
	   RF_PWM->Instance->CCR1 = 0;
 800a542:	4b08      	ldr	r3, [pc, #32]	@ (800a564 <Motor_DutyCycle_RF+0xb0>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	2200      	movs	r2, #0
 800a54a:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_RF ,0);
 800a54c:	4b06      	ldr	r3, [pc, #24]	@ (800a568 <Motor_DutyCycle_RF+0xb4>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2100      	movs	r1, #0
 800a552:	4618      	mov	r0, r3
 800a554:	f000 fada 	bl	800ab0c <digitalWrite>
	}
}
 800a558:	bf00      	nop
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	200006e8 	.word	0x200006e8
 800a564:	200006d4 	.word	0x200006d4
 800a568:	200006f8 	.word	0x200006f8

0800a56c <Motor_DutyCycle_RB>:

void Motor_DutyCycle_RB(int16_t DutyCycle_RB){
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	4603      	mov	r3, r0
 800a574:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RB > DutyCycle_RB_MAX) {
 800a576:	4b26      	ldr	r3, [pc, #152]	@ (800a610 <Motor_DutyCycle_RB+0xa4>)
 800a578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a57c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a580:	429a      	cmp	r2, r3
 800a582:	dd03      	ble.n	800a58c <Motor_DutyCycle_RB+0x20>
		DutyCycle_RB = DutyCycle_RB_MAX;
 800a584:	4b22      	ldr	r3, [pc, #136]	@ (800a610 <Motor_DutyCycle_RB+0xa4>)
 800a586:	881b      	ldrh	r3, [r3, #0]
 800a588:	80fb      	strh	r3, [r7, #6]
 800a58a:	e00e      	b.n	800a5aa <Motor_DutyCycle_RB+0x3e>
	} else if (DutyCycle_RB < -DutyCycle_RB_MAX) {
 800a58c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a590:	4b1f      	ldr	r3, [pc, #124]	@ (800a610 <Motor_DutyCycle_RB+0xa4>)
 800a592:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a596:	425b      	negs	r3, r3
 800a598:	429a      	cmp	r2, r3
 800a59a:	da06      	bge.n	800a5aa <Motor_DutyCycle_RB+0x3e>
	    DutyCycle_RB = -DutyCycle_RB_MAX;
 800a59c:	4b1c      	ldr	r3, [pc, #112]	@ (800a610 <Motor_DutyCycle_RB+0xa4>)
 800a59e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	425b      	negs	r3, r3
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	80fb      	strh	r3, [r7, #6]
	}

	RB_PWM->Instance->CCR2 = (DutyCycle_RB > 0) ? (int16_t)DutyCycle_RB : (DutyCycle_RB_MAX + (int16_t)DutyCycle_RB);
 800a5aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	dd02      	ble.n	800a5b8 <Motor_DutyCycle_RB+0x4c>
 800a5b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a5b6:	e006      	b.n	800a5c6 <Motor_DutyCycle_RB+0x5a>
 800a5b8:	4b15      	ldr	r3, [pc, #84]	@ (800a610 <Motor_DutyCycle_RB+0xa4>)
 800a5ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	4a13      	ldr	r2, [pc, #76]	@ (800a614 <Motor_DutyCycle_RB+0xa8>)
 800a5c8:	6812      	ldr	r2, [r2, #0]
 800a5ca:	6812      	ldr	r2, [r2, #0]
 800a5cc:	6393      	str	r3, [r2, #56]	@ 0x38

	digitalWrite(IN_RB , (DutyCycle_RB < 0) ? 1 : 0);
 800a5ce:	4b12      	ldr	r3, [pc, #72]	@ (800a618 <Motor_DutyCycle_RB+0xac>)
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a5d6:	13db      	asrs	r3, r3, #15
 800a5d8:	b21b      	sxth	r3, r3
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	f003 0301 	and.w	r3, r3, #1
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	4610      	mov	r0, r2
 800a5e6:	f000 fa91 	bl	800ab0c <digitalWrite>

	if(DutyCycle_RB == 0){
 800a5ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10a      	bne.n	800a608 <Motor_DutyCycle_RB+0x9c>
	    RB_PWM->Instance->CCR2 = 0;
 800a5f2:	4b08      	ldr	r3, [pc, #32]	@ (800a614 <Motor_DutyCycle_RB+0xa8>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	639a      	str	r2, [r3, #56]	@ 0x38
		digitalWrite(IN_RB ,0);
 800a5fc:	4b06      	ldr	r3, [pc, #24]	@ (800a618 <Motor_DutyCycle_RB+0xac>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2100      	movs	r1, #0
 800a602:	4618      	mov	r0, r3
 800a604:	f000 fa82 	bl	800ab0c <digitalWrite>
	}
}
 800a608:	bf00      	nop
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	200006ea 	.word	0x200006ea
 800a614:	200006d8 	.word	0x200006d8
 800a618:	200006fc 	.word	0x200006fc

0800a61c <Motor_DutyCycle_EXTRA1>:

void Motor_DutyCycle_EXTRA1(int16_t DutyCycle_EXTRA1){
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA1 > DutyCycle_EXTRA1_MAX) {
 800a626:	4b26      	ldr	r3, [pc, #152]	@ (800a6c0 <Motor_DutyCycle_EXTRA1+0xa4>)
 800a628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a62c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a630:	429a      	cmp	r2, r3
 800a632:	dd03      	ble.n	800a63c <Motor_DutyCycle_EXTRA1+0x20>
		DutyCycle_EXTRA1 = DutyCycle_EXTRA1_MAX;
 800a634:	4b22      	ldr	r3, [pc, #136]	@ (800a6c0 <Motor_DutyCycle_EXTRA1+0xa4>)
 800a636:	881b      	ldrh	r3, [r3, #0]
 800a638:	80fb      	strh	r3, [r7, #6]
 800a63a:	e00e      	b.n	800a65a <Motor_DutyCycle_EXTRA1+0x3e>
	} else if (DutyCycle_EXTRA1 < -DutyCycle_EXTRA1_MAX) {
 800a63c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a640:	4b1f      	ldr	r3, [pc, #124]	@ (800a6c0 <Motor_DutyCycle_EXTRA1+0xa4>)
 800a642:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a646:	425b      	negs	r3, r3
 800a648:	429a      	cmp	r2, r3
 800a64a:	da06      	bge.n	800a65a <Motor_DutyCycle_EXTRA1+0x3e>
		DutyCycle_EXTRA1 = -DutyCycle_EXTRA1_MAX;
 800a64c:	4b1c      	ldr	r3, [pc, #112]	@ (800a6c0 <Motor_DutyCycle_EXTRA1+0xa4>)
 800a64e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a652:	b29b      	uxth	r3, r3
 800a654:	425b      	negs	r3, r3
 800a656:	b29b      	uxth	r3, r3
 800a658:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA1_PWM->Instance->CCR1 = (DutyCycle_EXTRA1 > 0) ? (int16_t)DutyCycle_EXTRA1 : (DutyCycle_EXTRA1_MAX + (int16_t)DutyCycle_EXTRA1);
 800a65a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	dd02      	ble.n	800a668 <Motor_DutyCycle_EXTRA1+0x4c>
 800a662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a666:	e006      	b.n	800a676 <Motor_DutyCycle_EXTRA1+0x5a>
 800a668:	4b15      	ldr	r3, [pc, #84]	@ (800a6c0 <Motor_DutyCycle_EXTRA1+0xa4>)
 800a66a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a66e:	461a      	mov	r2, r3
 800a670:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a674:	4413      	add	r3, r2
 800a676:	4a13      	ldr	r2, [pc, #76]	@ (800a6c4 <Motor_DutyCycle_EXTRA1+0xa8>)
 800a678:	6812      	ldr	r2, [r2, #0]
 800a67a:	6812      	ldr	r2, [r2, #0]
 800a67c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA1 , (DutyCycle_EXTRA1 < 0) ? 1 : 0);
 800a67e:	4b12      	ldr	r3, [pc, #72]	@ (800a6c8 <Motor_DutyCycle_EXTRA1+0xac>)
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a686:	13db      	asrs	r3, r3, #15
 800a688:	b21b      	sxth	r3, r3
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	f003 0301 	and.w	r3, r3, #1
 800a690:	b2db      	uxtb	r3, r3
 800a692:	4619      	mov	r1, r3
 800a694:	4610      	mov	r0, r2
 800a696:	f000 fa39 	bl	800ab0c <digitalWrite>

	if(DutyCycle_EXTRA1 == 0){
 800a69a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d10a      	bne.n	800a6b8 <Motor_DutyCycle_EXTRA1+0x9c>
		EXTRA1_PWM->Instance->CCR1 = 0;
 800a6a2:	4b08      	ldr	r3, [pc, #32]	@ (800a6c4 <Motor_DutyCycle_EXTRA1+0xa8>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	635a      	str	r2, [r3, #52]	@ 0x34
	    digitalWrite(IN_EXTRA1 ,0);
 800a6ac:	4b06      	ldr	r3, [pc, #24]	@ (800a6c8 <Motor_DutyCycle_EXTRA1+0xac>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f000 fa2a 	bl	800ab0c <digitalWrite>
	}
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	200006ec 	.word	0x200006ec
 800a6c4:	200006dc 	.word	0x200006dc
 800a6c8:	20000700 	.word	0x20000700

0800a6cc <Motor_DutyCycle_EXTRA2>:

void Motor_DutyCycle_EXTRA2(int16_t DutyCycle_EXTRA2){
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA2 > DutyCycle_EXTRA2_MAX) {
 800a6d6:	4b26      	ldr	r3, [pc, #152]	@ (800a770 <Motor_DutyCycle_EXTRA2+0xa4>)
 800a6d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a6dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	dd03      	ble.n	800a6ec <Motor_DutyCycle_EXTRA2+0x20>
		DutyCycle_EXTRA2 = DutyCycle_EXTRA2_MAX;
 800a6e4:	4b22      	ldr	r3, [pc, #136]	@ (800a770 <Motor_DutyCycle_EXTRA2+0xa4>)
 800a6e6:	881b      	ldrh	r3, [r3, #0]
 800a6e8:	80fb      	strh	r3, [r7, #6]
 800a6ea:	e00e      	b.n	800a70a <Motor_DutyCycle_EXTRA2+0x3e>
	} else if (DutyCycle_EXTRA2 < -DutyCycle_EXTRA2_MAX) {
 800a6ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a6f0:	4b1f      	ldr	r3, [pc, #124]	@ (800a770 <Motor_DutyCycle_EXTRA2+0xa4>)
 800a6f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a6f6:	425b      	negs	r3, r3
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	da06      	bge.n	800a70a <Motor_DutyCycle_EXTRA2+0x3e>
		DutyCycle_EXTRA2 = -DutyCycle_EXTRA2_MAX;
 800a6fc:	4b1c      	ldr	r3, [pc, #112]	@ (800a770 <Motor_DutyCycle_EXTRA2+0xa4>)
 800a6fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a702:	b29b      	uxth	r3, r3
 800a704:	425b      	negs	r3, r3
 800a706:	b29b      	uxth	r3, r3
 800a708:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA2_PWM->Instance->CCR1 = (DutyCycle_EXTRA2 > 0) ? (int16_t)DutyCycle_EXTRA2 : (DutyCycle_EXTRA2_MAX + (int16_t)DutyCycle_EXTRA2);
 800a70a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	dd02      	ble.n	800a718 <Motor_DutyCycle_EXTRA2+0x4c>
 800a712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a716:	e006      	b.n	800a726 <Motor_DutyCycle_EXTRA2+0x5a>
 800a718:	4b15      	ldr	r3, [pc, #84]	@ (800a770 <Motor_DutyCycle_EXTRA2+0xa4>)
 800a71a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a71e:	461a      	mov	r2, r3
 800a720:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a724:	4413      	add	r3, r2
 800a726:	4a13      	ldr	r2, [pc, #76]	@ (800a774 <Motor_DutyCycle_EXTRA2+0xa8>)
 800a728:	6812      	ldr	r2, [r2, #0]
 800a72a:	6812      	ldr	r2, [r2, #0]
 800a72c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA2 , (DutyCycle_EXTRA2 < 0) ? 1 : 0);
 800a72e:	4b12      	ldr	r3, [pc, #72]	@ (800a778 <Motor_DutyCycle_EXTRA2+0xac>)
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a736:	13db      	asrs	r3, r3, #15
 800a738:	b21b      	sxth	r3, r3
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	f003 0301 	and.w	r3, r3, #1
 800a740:	b2db      	uxtb	r3, r3
 800a742:	4619      	mov	r1, r3
 800a744:	4610      	mov	r0, r2
 800a746:	f000 f9e1 	bl	800ab0c <digitalWrite>

	if(DutyCycle_EXTRA2 == 0){
 800a74a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10a      	bne.n	800a768 <Motor_DutyCycle_EXTRA2+0x9c>
	     EXTRA2_PWM->Instance->CCR1 = 0;
 800a752:	4b08      	ldr	r3, [pc, #32]	@ (800a774 <Motor_DutyCycle_EXTRA2+0xa8>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2200      	movs	r2, #0
 800a75a:	635a      	str	r2, [r3, #52]	@ 0x34
		 digitalWrite(IN_EXTRA2 ,0);
 800a75c:	4b06      	ldr	r3, [pc, #24]	@ (800a778 <Motor_DutyCycle_EXTRA2+0xac>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2100      	movs	r1, #0
 800a762:	4618      	mov	r0, r3
 800a764:	f000 f9d2 	bl	800ab0c <digitalWrite>
	}
}
 800a768:	bf00      	nop
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	200006ee 	.word	0x200006ee
 800a774:	200006e0 	.word	0x200006e0
 800a778:	20000704 	.word	0x20000704

0800a77c <Motor_Speed_LF>:

int16_t Duty_Cycle[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Motor_Speed_LF(int16_t RPM_INPUT ,float RPM_LF){
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	4603      	mov	r3, r0
 800a784:	ed87 0a00 	vstr	s0, [r7]
 800a788:	80fb      	strh	r3, [r7, #6]
	if (RPM_LF > max_speed[0]) {
 800a78a:	4b30      	ldr	r3, [pc, #192]	@ (800a84c <Motor_Speed_LF+0xd0>)
 800a78c:	edd3 7a00 	vldr	s15, [r3]
 800a790:	ed97 7a00 	vldr	s14, [r7]
 800a794:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a79c:	dd03      	ble.n	800a7a6 <Motor_Speed_LF+0x2a>
	   RPM_LF = max_speed[0];
 800a79e:	4b2b      	ldr	r3, [pc, #172]	@ (800a84c <Motor_Speed_LF+0xd0>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	603b      	str	r3, [r7, #0]
 800a7a4:	e012      	b.n	800a7cc <Motor_Speed_LF+0x50>
	} else if (RPM_LF < -max_speed[0]) {
 800a7a6:	4b29      	ldr	r3, [pc, #164]	@ (800a84c <Motor_Speed_LF+0xd0>)
 800a7a8:	edd3 7a00 	vldr	s15, [r3]
 800a7ac:	eef1 7a67 	vneg.f32	s15, s15
 800a7b0:	ed97 7a00 	vldr	s14, [r7]
 800a7b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a7b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7bc:	d506      	bpl.n	800a7cc <Motor_Speed_LF+0x50>
	   RPM_LF = -max_speed[0];
 800a7be:	4b23      	ldr	r3, [pc, #140]	@ (800a84c <Motor_Speed_LF+0xd0>)
 800a7c0:	edd3 7a00 	vldr	s15, [r3]
 800a7c4:	eef1 7a67 	vneg.f32	s15, s15
 800a7c8:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LF , 0);
 800a7cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a7d0:	ee07 3a90 	vmov	s15, r3
 800a7d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7d8:	edd7 7a00 	vldr	s15, [r7]
 800a7dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a7e0:	ee17 3a90 	vmov	r3, s15
 800a7e4:	b21b      	sxth	r3, r3
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	eeb0 0a47 	vmov.f32	s0, s14
 800a7ee:	f7ff fd03 	bl	800a1f8 <PID_Speed>

	Duty_Cycle[0] = (int16_t)((Output_PID[0] / ((float)(max_speed[0] - min_speed[0]))) * DutyCycle_LF_MAX);
 800a7f2:	4b17      	ldr	r3, [pc, #92]	@ (800a850 <Motor_Speed_LF+0xd4>)
 800a7f4:	edd3 6a00 	vldr	s13, [r3]
 800a7f8:	4b14      	ldr	r3, [pc, #80]	@ (800a84c <Motor_Speed_LF+0xd0>)
 800a7fa:	ed93 7a00 	vldr	s14, [r3]
 800a7fe:	4b15      	ldr	r3, [pc, #84]	@ (800a854 <Motor_Speed_LF+0xd8>)
 800a800:	edd3 7a00 	vldr	s15, [r3]
 800a804:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a808:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a80c:	4b12      	ldr	r3, [pc, #72]	@ (800a858 <Motor_Speed_LF+0xdc>)
 800a80e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a812:	ee07 3a90 	vmov	s15, r3
 800a816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a81a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a81e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a822:	ee17 3a90 	vmov	r3, s15
 800a826:	b21a      	sxth	r2, r3
 800a828:	4b0c      	ldr	r3, [pc, #48]	@ (800a85c <Motor_Speed_LF+0xe0>)
 800a82a:	801a      	strh	r2, [r3, #0]

	Motor_DutyCycle_LF(Duty_Cycle[0]);
 800a82c:	4b0b      	ldr	r3, [pc, #44]	@ (800a85c <Motor_Speed_LF+0xe0>)
 800a82e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a832:	4618      	mov	r0, r3
 800a834:	f7ff fd8a 	bl	800a34c <Motor_DutyCycle_LF>

//	return _RPM[0];
	return Output_PID[0];
 800a838:	4b05      	ldr	r3, [pc, #20]	@ (800a850 <Motor_Speed_LF+0xd4>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	ee07 3a90 	vmov	s15, r3
}
 800a840:	eeb0 0a67 	vmov.f32	s0, s15
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	20000798 	.word	0x20000798
 800a850:	20000828 	.word	0x20000828
 800a854:	20000780 	.word	0x20000780
 800a858:	200006e4 	.word	0x200006e4
 800a85c:	20000840 	.word	0x20000840

0800a860 <Motor_Speed_LB>:

float Motor_Speed_LB(int16_t RPM_INPUT ,float RPM_LB){
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	4603      	mov	r3, r0
 800a868:	ed87 0a00 	vstr	s0, [r7]
 800a86c:	80fb      	strh	r3, [r7, #6]
	if (RPM_LB > max_speed[1]) {
 800a86e:	4b30      	ldr	r3, [pc, #192]	@ (800a930 <Motor_Speed_LB+0xd0>)
 800a870:	edd3 7a01 	vldr	s15, [r3, #4]
 800a874:	ed97 7a00 	vldr	s14, [r7]
 800a878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a880:	dd03      	ble.n	800a88a <Motor_Speed_LB+0x2a>
	   RPM_LB = max_speed[1];
 800a882:	4b2b      	ldr	r3, [pc, #172]	@ (800a930 <Motor_Speed_LB+0xd0>)
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	603b      	str	r3, [r7, #0]
 800a888:	e012      	b.n	800a8b0 <Motor_Speed_LB+0x50>
	} else if (RPM_LB < -max_speed[1]) {
 800a88a:	4b29      	ldr	r3, [pc, #164]	@ (800a930 <Motor_Speed_LB+0xd0>)
 800a88c:	edd3 7a01 	vldr	s15, [r3, #4]
 800a890:	eef1 7a67 	vneg.f32	s15, s15
 800a894:	ed97 7a00 	vldr	s14, [r7]
 800a898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a0:	d506      	bpl.n	800a8b0 <Motor_Speed_LB+0x50>
	   RPM_LB = -max_speed[1];
 800a8a2:	4b23      	ldr	r3, [pc, #140]	@ (800a930 <Motor_Speed_LB+0xd0>)
 800a8a4:	edd3 7a01 	vldr	s15, [r3, #4]
 800a8a8:	eef1 7a67 	vneg.f32	s15, s15
 800a8ac:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LB ,1);
 800a8b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a8b4:	ee07 3a90 	vmov	s15, r3
 800a8b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8bc:	edd7 7a00 	vldr	s15, [r7]
 800a8c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8c4:	ee17 3a90 	vmov	r3, s15
 800a8c8:	b21b      	sxth	r3, r3
 800a8ca:	2101      	movs	r1, #1
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	eeb0 0a47 	vmov.f32	s0, s14
 800a8d2:	f7ff fc91 	bl	800a1f8 <PID_Speed>

	Duty_Cycle[1] = (int16_t)((Output_PID[1]/((float)(max_speed[1] - min_speed[1]))) * DutyCycle_LB_MAX);
 800a8d6:	4b17      	ldr	r3, [pc, #92]	@ (800a934 <Motor_Speed_LB+0xd4>)
 800a8d8:	edd3 6a01 	vldr	s13, [r3, #4]
 800a8dc:	4b14      	ldr	r3, [pc, #80]	@ (800a930 <Motor_Speed_LB+0xd0>)
 800a8de:	ed93 7a01 	vldr	s14, [r3, #4]
 800a8e2:	4b15      	ldr	r3, [pc, #84]	@ (800a938 <Motor_Speed_LB+0xd8>)
 800a8e4:	edd3 7a01 	vldr	s15, [r3, #4]
 800a8e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8f0:	4b12      	ldr	r3, [pc, #72]	@ (800a93c <Motor_Speed_LB+0xdc>)
 800a8f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a8f6:	ee07 3a90 	vmov	s15, r3
 800a8fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a906:	ee17 3a90 	vmov	r3, s15
 800a90a:	b21a      	sxth	r2, r3
 800a90c:	4b0c      	ldr	r3, [pc, #48]	@ (800a940 <Motor_Speed_LB+0xe0>)
 800a90e:	805a      	strh	r2, [r3, #2]

	Motor_DutyCycle_LB(Duty_Cycle[1]);
 800a910:	4b0b      	ldr	r3, [pc, #44]	@ (800a940 <Motor_Speed_LB+0xe0>)
 800a912:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a916:	4618      	mov	r0, r3
 800a918:	f7ff fd70 	bl	800a3fc <Motor_DutyCycle_LB>

//	return _RPM[1];
	return Output_PID[1];
 800a91c:	4b05      	ldr	r3, [pc, #20]	@ (800a934 <Motor_Speed_LB+0xd4>)
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	ee07 3a90 	vmov	s15, r3
}
 800a924:	eeb0 0a67 	vmov.f32	s0, s15
 800a928:	3708      	adds	r7, #8
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	20000798 	.word	0x20000798
 800a934:	20000828 	.word	0x20000828
 800a938:	20000780 	.word	0x20000780
 800a93c:	200006e6 	.word	0x200006e6
 800a940:	20000840 	.word	0x20000840

0800a944 <Motor_Speed_RF>:

float Motor_Speed_RF(int16_t RPM_INPUT ,float RPM_RF){
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	ed87 0a00 	vstr	s0, [r7]
 800a950:	80fb      	strh	r3, [r7, #6]
	if (RPM_RF > max_speed[2]) {
 800a952:	4b30      	ldr	r3, [pc, #192]	@ (800aa14 <Motor_Speed_RF+0xd0>)
 800a954:	edd3 7a02 	vldr	s15, [r3, #8]
 800a958:	ed97 7a00 	vldr	s14, [r7]
 800a95c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a964:	dd03      	ble.n	800a96e <Motor_Speed_RF+0x2a>
	   RPM_RF = max_speed[2];
 800a966:	4b2b      	ldr	r3, [pc, #172]	@ (800aa14 <Motor_Speed_RF+0xd0>)
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	603b      	str	r3, [r7, #0]
 800a96c:	e012      	b.n	800a994 <Motor_Speed_RF+0x50>
	} else if (RPM_RF < -max_speed[2]) {
 800a96e:	4b29      	ldr	r3, [pc, #164]	@ (800aa14 <Motor_Speed_RF+0xd0>)
 800a970:	edd3 7a02 	vldr	s15, [r3, #8]
 800a974:	eef1 7a67 	vneg.f32	s15, s15
 800a978:	ed97 7a00 	vldr	s14, [r7]
 800a97c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a984:	d506      	bpl.n	800a994 <Motor_Speed_RF+0x50>
	   RPM_RF = -max_speed[2];
 800a986:	4b23      	ldr	r3, [pc, #140]	@ (800aa14 <Motor_Speed_RF+0xd0>)
 800a988:	edd3 7a02 	vldr	s15, [r3, #8]
 800a98c:	eef1 7a67 	vneg.f32	s15, s15
 800a990:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RF ,2);
 800a994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a998:	ee07 3a90 	vmov	s15, r3
 800a99c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a9a0:	edd7 7a00 	vldr	s15, [r7]
 800a9a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9a8:	ee17 3a90 	vmov	r3, s15
 800a9ac:	b21b      	sxth	r3, r3
 800a9ae:	2102      	movs	r1, #2
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	eeb0 0a47 	vmov.f32	s0, s14
 800a9b6:	f7ff fc1f 	bl	800a1f8 <PID_Speed>

	Duty_Cycle[2] = (int16_t)((Output_PID[2]/((float)(max_speed[2] - min_speed[2]))) * DutyCycle_RF_MAX);
 800a9ba:	4b17      	ldr	r3, [pc, #92]	@ (800aa18 <Motor_Speed_RF+0xd4>)
 800a9bc:	edd3 6a02 	vldr	s13, [r3, #8]
 800a9c0:	4b14      	ldr	r3, [pc, #80]	@ (800aa14 <Motor_Speed_RF+0xd0>)
 800a9c2:	ed93 7a02 	vldr	s14, [r3, #8]
 800a9c6:	4b15      	ldr	r3, [pc, #84]	@ (800aa1c <Motor_Speed_RF+0xd8>)
 800a9c8:	edd3 7a02 	vldr	s15, [r3, #8]
 800a9cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9d4:	4b12      	ldr	r3, [pc, #72]	@ (800aa20 <Motor_Speed_RF+0xdc>)
 800a9d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a9da:	ee07 3a90 	vmov	s15, r3
 800a9de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a9ea:	ee17 3a90 	vmov	r3, s15
 800a9ee:	b21a      	sxth	r2, r3
 800a9f0:	4b0c      	ldr	r3, [pc, #48]	@ (800aa24 <Motor_Speed_RF+0xe0>)
 800a9f2:	809a      	strh	r2, [r3, #4]

	Motor_DutyCycle_RF(Duty_Cycle[2]);
 800a9f4:	4b0b      	ldr	r3, [pc, #44]	@ (800aa24 <Motor_Speed_RF+0xe0>)
 800a9f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7ff fd5a 	bl	800a4b4 <Motor_DutyCycle_RF>

//	return _RPM[2];
	return Output_PID[2];
 800aa00:	4b05      	ldr	r3, [pc, #20]	@ (800aa18 <Motor_Speed_RF+0xd4>)
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	ee07 3a90 	vmov	s15, r3
}
 800aa08:	eeb0 0a67 	vmov.f32	s0, s15
 800aa0c:	3708      	adds	r7, #8
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	20000798 	.word	0x20000798
 800aa18:	20000828 	.word	0x20000828
 800aa1c:	20000780 	.word	0x20000780
 800aa20:	200006e8 	.word	0x200006e8
 800aa24:	20000840 	.word	0x20000840

0800aa28 <Motor_Speed_RB>:

float Motor_Speed_RB(int16_t RPM_INPUT ,float RPM_RB){
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	4603      	mov	r3, r0
 800aa30:	ed87 0a00 	vstr	s0, [r7]
 800aa34:	80fb      	strh	r3, [r7, #6]
	if (RPM_RB > max_speed[3]) {
 800aa36:	4b30      	ldr	r3, [pc, #192]	@ (800aaf8 <Motor_Speed_RB+0xd0>)
 800aa38:	edd3 7a03 	vldr	s15, [r3, #12]
 800aa3c:	ed97 7a00 	vldr	s14, [r7]
 800aa40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aa44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa48:	dd03      	ble.n	800aa52 <Motor_Speed_RB+0x2a>
		RPM_RB = max_speed[3];
 800aa4a:	4b2b      	ldr	r3, [pc, #172]	@ (800aaf8 <Motor_Speed_RB+0xd0>)
 800aa4c:	68db      	ldr	r3, [r3, #12]
 800aa4e:	603b      	str	r3, [r7, #0]
 800aa50:	e012      	b.n	800aa78 <Motor_Speed_RB+0x50>
	} else if (RPM_RB < -max_speed[3]) {
 800aa52:	4b29      	ldr	r3, [pc, #164]	@ (800aaf8 <Motor_Speed_RB+0xd0>)
 800aa54:	edd3 7a03 	vldr	s15, [r3, #12]
 800aa58:	eef1 7a67 	vneg.f32	s15, s15
 800aa5c:	ed97 7a00 	vldr	s14, [r7]
 800aa60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aa64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa68:	d506      	bpl.n	800aa78 <Motor_Speed_RB+0x50>
		RPM_RB = -max_speed[3];
 800aa6a:	4b23      	ldr	r3, [pc, #140]	@ (800aaf8 <Motor_Speed_RB+0xd0>)
 800aa6c:	edd3 7a03 	vldr	s15, [r3, #12]
 800aa70:	eef1 7a67 	vneg.f32	s15, s15
 800aa74:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RB ,3);
 800aa78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa7c:	ee07 3a90 	vmov	s15, r3
 800aa80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa84:	edd7 7a00 	vldr	s15, [r7]
 800aa88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa8c:	ee17 3a90 	vmov	r3, s15
 800aa90:	b21b      	sxth	r3, r3
 800aa92:	2103      	movs	r1, #3
 800aa94:	4618      	mov	r0, r3
 800aa96:	eeb0 0a47 	vmov.f32	s0, s14
 800aa9a:	f7ff fbad 	bl	800a1f8 <PID_Speed>

	Duty_Cycle[3] = (int16_t)((Output_PID[3]/((float)(max_speed[3] - min_speed[3]))) * DutyCycle_RB_MAX);
 800aa9e:	4b17      	ldr	r3, [pc, #92]	@ (800aafc <Motor_Speed_RB+0xd4>)
 800aaa0:	edd3 6a03 	vldr	s13, [r3, #12]
 800aaa4:	4b14      	ldr	r3, [pc, #80]	@ (800aaf8 <Motor_Speed_RB+0xd0>)
 800aaa6:	ed93 7a03 	vldr	s14, [r3, #12]
 800aaaa:	4b15      	ldr	r3, [pc, #84]	@ (800ab00 <Motor_Speed_RB+0xd8>)
 800aaac:	edd3 7a03 	vldr	s15, [r3, #12]
 800aab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab8:	4b12      	ldr	r3, [pc, #72]	@ (800ab04 <Motor_Speed_RB+0xdc>)
 800aaba:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aabe:	ee07 3a90 	vmov	s15, r3
 800aac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aace:	ee17 3a90 	vmov	r3, s15
 800aad2:	b21a      	sxth	r2, r3
 800aad4:	4b0c      	ldr	r3, [pc, #48]	@ (800ab08 <Motor_Speed_RB+0xe0>)
 800aad6:	80da      	strh	r2, [r3, #6]

	Motor_DutyCycle_RB(Duty_Cycle[3]);
 800aad8:	4b0b      	ldr	r3, [pc, #44]	@ (800ab08 <Motor_Speed_RB+0xe0>)
 800aada:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800aade:	4618      	mov	r0, r3
 800aae0:	f7ff fd44 	bl	800a56c <Motor_DutyCycle_RB>

//	return _RPM[3];
	return Output_PID[3];
 800aae4:	4b05      	ldr	r3, [pc, #20]	@ (800aafc <Motor_Speed_RB+0xd4>)
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	ee07 3a90 	vmov	s15, r3
}
 800aaec:	eeb0 0a67 	vmov.f32	s0, s15
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	20000798 	.word	0x20000798
 800aafc:	20000828 	.word	0x20000828
 800ab00:	20000780 	.word	0x20000780
 800ab04:	200006ea 	.word	0x200006ea
 800ab08:	20000840 	.word	0x20000840

0800ab0c <digitalWrite>:

//	return _RPM[5];
	return Output_PID[5];
}

void digitalWrite(char* _PIN , uint8_t vlue){
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	460b      	mov	r3, r1
 800ab16:	70fb      	strb	r3, [r7, #3]
	uint8_t PIN = (_PIN[2] - '0') * 10 + (_PIN[3] - '0');
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3302      	adds	r3, #2
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	3b30      	subs	r3, #48	@ 0x30
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	461a      	mov	r2, r3
 800ab24:	0092      	lsls	r2, r2, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	005b      	lsls	r3, r3, #1
 800ab2a:	b2da      	uxtb	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3303      	adds	r3, #3
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	4413      	add	r3, r2
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	3b30      	subs	r3, #48	@ 0x30
 800ab38:	73fb      	strb	r3, [r7, #15]

	if (_PIN[1] == 'A') {
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	2b41      	cmp	r3, #65	@ 0x41
 800ab42:	f040 809f 	bne.w	800ac84 <digitalWrite+0x178>
	        switch (PIN) {
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	2b0f      	cmp	r3, #15
 800ab4a:	f200 833f 	bhi.w	800b1cc <digitalWrite+0x6c0>
 800ab4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab54 <digitalWrite+0x48>)
 800ab50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab54:	0800ab95 	.word	0x0800ab95
 800ab58:	0800aba3 	.word	0x0800aba3
 800ab5c:	0800abb1 	.word	0x0800abb1
 800ab60:	0800abbf 	.word	0x0800abbf
 800ab64:	0800abcd 	.word	0x0800abcd
 800ab68:	0800abdb 	.word	0x0800abdb
 800ab6c:	0800abe9 	.word	0x0800abe9
 800ab70:	0800abf7 	.word	0x0800abf7
 800ab74:	0800ac05 	.word	0x0800ac05
 800ab78:	0800ac15 	.word	0x0800ac15
 800ab7c:	0800ac25 	.word	0x0800ac25
 800ab80:	0800ac35 	.word	0x0800ac35
 800ab84:	0800ac45 	.word	0x0800ac45
 800ab88:	0800ac55 	.word	0x0800ac55
 800ab8c:	0800ac65 	.word	0x0800ac65
 800ab90:	0800ac75 	.word	0x0800ac75
	            case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, vlue); break;
 800ab94:	78fb      	ldrb	r3, [r7, #3]
 800ab96:	461a      	mov	r2, r3
 800ab98:	2101      	movs	r1, #1
 800ab9a:	48bd      	ldr	r0, [pc, #756]	@ (800ae90 <digitalWrite+0x384>)
 800ab9c:	f7f8 ffa6 	bl	8003aec <HAL_GPIO_WritePin>
 800aba0:	e314      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, vlue); break;
 800aba2:	78fb      	ldrb	r3, [r7, #3]
 800aba4:	461a      	mov	r2, r3
 800aba6:	2102      	movs	r1, #2
 800aba8:	48b9      	ldr	r0, [pc, #740]	@ (800ae90 <digitalWrite+0x384>)
 800abaa:	f7f8 ff9f 	bl	8003aec <HAL_GPIO_WritePin>
 800abae:	e30d      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, vlue); break;
 800abb0:	78fb      	ldrb	r3, [r7, #3]
 800abb2:	461a      	mov	r2, r3
 800abb4:	2104      	movs	r1, #4
 800abb6:	48b6      	ldr	r0, [pc, #728]	@ (800ae90 <digitalWrite+0x384>)
 800abb8:	f7f8 ff98 	bl	8003aec <HAL_GPIO_WritePin>
 800abbc:	e306      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, vlue); break;
 800abbe:	78fb      	ldrb	r3, [r7, #3]
 800abc0:	461a      	mov	r2, r3
 800abc2:	2108      	movs	r1, #8
 800abc4:	48b2      	ldr	r0, [pc, #712]	@ (800ae90 <digitalWrite+0x384>)
 800abc6:	f7f8 ff91 	bl	8003aec <HAL_GPIO_WritePin>
 800abca:	e2ff      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, vlue); break;
 800abcc:	78fb      	ldrb	r3, [r7, #3]
 800abce:	461a      	mov	r2, r3
 800abd0:	2110      	movs	r1, #16
 800abd2:	48af      	ldr	r0, [pc, #700]	@ (800ae90 <digitalWrite+0x384>)
 800abd4:	f7f8 ff8a 	bl	8003aec <HAL_GPIO_WritePin>
 800abd8:	e2f8      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, vlue); break;
 800abda:	78fb      	ldrb	r3, [r7, #3]
 800abdc:	461a      	mov	r2, r3
 800abde:	2120      	movs	r1, #32
 800abe0:	48ab      	ldr	r0, [pc, #684]	@ (800ae90 <digitalWrite+0x384>)
 800abe2:	f7f8 ff83 	bl	8003aec <HAL_GPIO_WritePin>
 800abe6:	e2f1      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, vlue); break;
 800abe8:	78fb      	ldrb	r3, [r7, #3]
 800abea:	461a      	mov	r2, r3
 800abec:	2140      	movs	r1, #64	@ 0x40
 800abee:	48a8      	ldr	r0, [pc, #672]	@ (800ae90 <digitalWrite+0x384>)
 800abf0:	f7f8 ff7c 	bl	8003aec <HAL_GPIO_WritePin>
 800abf4:	e2ea      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, vlue); break;
 800abf6:	78fb      	ldrb	r3, [r7, #3]
 800abf8:	461a      	mov	r2, r3
 800abfa:	2180      	movs	r1, #128	@ 0x80
 800abfc:	48a4      	ldr	r0, [pc, #656]	@ (800ae90 <digitalWrite+0x384>)
 800abfe:	f7f8 ff75 	bl	8003aec <HAL_GPIO_WritePin>
 800ac02:	e2e3      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, vlue); break;
 800ac04:	78fb      	ldrb	r3, [r7, #3]
 800ac06:	461a      	mov	r2, r3
 800ac08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ac0c:	48a0      	ldr	r0, [pc, #640]	@ (800ae90 <digitalWrite+0x384>)
 800ac0e:	f7f8 ff6d 	bl	8003aec <HAL_GPIO_WritePin>
 800ac12:	e2db      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, vlue); break;
 800ac14:	78fb      	ldrb	r3, [r7, #3]
 800ac16:	461a      	mov	r2, r3
 800ac18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ac1c:	489c      	ldr	r0, [pc, #624]	@ (800ae90 <digitalWrite+0x384>)
 800ac1e:	f7f8 ff65 	bl	8003aec <HAL_GPIO_WritePin>
 800ac22:	e2d3      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, vlue); break;
 800ac24:	78fb      	ldrb	r3, [r7, #3]
 800ac26:	461a      	mov	r2, r3
 800ac28:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ac2c:	4898      	ldr	r0, [pc, #608]	@ (800ae90 <digitalWrite+0x384>)
 800ac2e:	f7f8 ff5d 	bl	8003aec <HAL_GPIO_WritePin>
 800ac32:	e2cb      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, vlue); break;
 800ac34:	78fb      	ldrb	r3, [r7, #3]
 800ac36:	461a      	mov	r2, r3
 800ac38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ac3c:	4894      	ldr	r0, [pc, #592]	@ (800ae90 <digitalWrite+0x384>)
 800ac3e:	f7f8 ff55 	bl	8003aec <HAL_GPIO_WritePin>
 800ac42:	e2c3      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, vlue); break;
 800ac44:	78fb      	ldrb	r3, [r7, #3]
 800ac46:	461a      	mov	r2, r3
 800ac48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ac4c:	4890      	ldr	r0, [pc, #576]	@ (800ae90 <digitalWrite+0x384>)
 800ac4e:	f7f8 ff4d 	bl	8003aec <HAL_GPIO_WritePin>
 800ac52:	e2bb      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, vlue); break;
 800ac54:	78fb      	ldrb	r3, [r7, #3]
 800ac56:	461a      	mov	r2, r3
 800ac58:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ac5c:	488c      	ldr	r0, [pc, #560]	@ (800ae90 <digitalWrite+0x384>)
 800ac5e:	f7f8 ff45 	bl	8003aec <HAL_GPIO_WritePin>
 800ac62:	e2b3      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, vlue); break;
 800ac64:	78fb      	ldrb	r3, [r7, #3]
 800ac66:	461a      	mov	r2, r3
 800ac68:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800ac6c:	4888      	ldr	r0, [pc, #544]	@ (800ae90 <digitalWrite+0x384>)
 800ac6e:	f7f8 ff3d 	bl	8003aec <HAL_GPIO_WritePin>
 800ac72:	e2ab      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, vlue); break;
 800ac74:	78fb      	ldrb	r3, [r7, #3]
 800ac76:	461a      	mov	r2, r3
 800ac78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800ac7c:	4884      	ldr	r0, [pc, #528]	@ (800ae90 <digitalWrite+0x384>)
 800ac7e:	f7f8 ff35 	bl	8003aec <HAL_GPIO_WritePin>
 800ac82:	e2a3      	b.n	800b1cc <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'B') {
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	3301      	adds	r3, #1
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	2b42      	cmp	r3, #66	@ 0x42
 800ac8c:	f040 80a0 	bne.w	800add0 <digitalWrite+0x2c4>
	        switch (PIN) {
 800ac90:	7bfb      	ldrb	r3, [r7, #15]
 800ac92:	2b0f      	cmp	r3, #15
 800ac94:	f200 829a 	bhi.w	800b1cc <digitalWrite+0x6c0>
 800ac98:	a201      	add	r2, pc, #4	@ (adr r2, 800aca0 <digitalWrite+0x194>)
 800ac9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9e:	bf00      	nop
 800aca0:	0800ace1 	.word	0x0800ace1
 800aca4:	0800acef 	.word	0x0800acef
 800aca8:	0800acfd 	.word	0x0800acfd
 800acac:	0800ad0b 	.word	0x0800ad0b
 800acb0:	0800ad19 	.word	0x0800ad19
 800acb4:	0800ad27 	.word	0x0800ad27
 800acb8:	0800ad35 	.word	0x0800ad35
 800acbc:	0800ad43 	.word	0x0800ad43
 800acc0:	0800ad51 	.word	0x0800ad51
 800acc4:	0800ad61 	.word	0x0800ad61
 800acc8:	0800ad71 	.word	0x0800ad71
 800accc:	0800ad81 	.word	0x0800ad81
 800acd0:	0800ad91 	.word	0x0800ad91
 800acd4:	0800ada1 	.word	0x0800ada1
 800acd8:	0800adb1 	.word	0x0800adb1
 800acdc:	0800adc1 	.word	0x0800adc1
	            case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, vlue); break;
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	461a      	mov	r2, r3
 800ace4:	2101      	movs	r1, #1
 800ace6:	486b      	ldr	r0, [pc, #428]	@ (800ae94 <digitalWrite+0x388>)
 800ace8:	f7f8 ff00 	bl	8003aec <HAL_GPIO_WritePin>
 800acec:	e26e      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, vlue); break;
 800acee:	78fb      	ldrb	r3, [r7, #3]
 800acf0:	461a      	mov	r2, r3
 800acf2:	2102      	movs	r1, #2
 800acf4:	4867      	ldr	r0, [pc, #412]	@ (800ae94 <digitalWrite+0x388>)
 800acf6:	f7f8 fef9 	bl	8003aec <HAL_GPIO_WritePin>
 800acfa:	e267      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, vlue); break;
 800acfc:	78fb      	ldrb	r3, [r7, #3]
 800acfe:	461a      	mov	r2, r3
 800ad00:	2104      	movs	r1, #4
 800ad02:	4864      	ldr	r0, [pc, #400]	@ (800ae94 <digitalWrite+0x388>)
 800ad04:	f7f8 fef2 	bl	8003aec <HAL_GPIO_WritePin>
 800ad08:	e260      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, vlue); break;
 800ad0a:	78fb      	ldrb	r3, [r7, #3]
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	2108      	movs	r1, #8
 800ad10:	4860      	ldr	r0, [pc, #384]	@ (800ae94 <digitalWrite+0x388>)
 800ad12:	f7f8 feeb 	bl	8003aec <HAL_GPIO_WritePin>
 800ad16:	e259      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, vlue); break;
 800ad18:	78fb      	ldrb	r3, [r7, #3]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	2110      	movs	r1, #16
 800ad1e:	485d      	ldr	r0, [pc, #372]	@ (800ae94 <digitalWrite+0x388>)
 800ad20:	f7f8 fee4 	bl	8003aec <HAL_GPIO_WritePin>
 800ad24:	e252      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, vlue); break;
 800ad26:	78fb      	ldrb	r3, [r7, #3]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	2120      	movs	r1, #32
 800ad2c:	4859      	ldr	r0, [pc, #356]	@ (800ae94 <digitalWrite+0x388>)
 800ad2e:	f7f8 fedd 	bl	8003aec <HAL_GPIO_WritePin>
 800ad32:	e24b      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, vlue); break;
 800ad34:	78fb      	ldrb	r3, [r7, #3]
 800ad36:	461a      	mov	r2, r3
 800ad38:	2140      	movs	r1, #64	@ 0x40
 800ad3a:	4856      	ldr	r0, [pc, #344]	@ (800ae94 <digitalWrite+0x388>)
 800ad3c:	f7f8 fed6 	bl	8003aec <HAL_GPIO_WritePin>
 800ad40:	e244      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, vlue); break;
 800ad42:	78fb      	ldrb	r3, [r7, #3]
 800ad44:	461a      	mov	r2, r3
 800ad46:	2180      	movs	r1, #128	@ 0x80
 800ad48:	4852      	ldr	r0, [pc, #328]	@ (800ae94 <digitalWrite+0x388>)
 800ad4a:	f7f8 fecf 	bl	8003aec <HAL_GPIO_WritePin>
 800ad4e:	e23d      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, vlue); break;
 800ad50:	78fb      	ldrb	r3, [r7, #3]
 800ad52:	461a      	mov	r2, r3
 800ad54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ad58:	484e      	ldr	r0, [pc, #312]	@ (800ae94 <digitalWrite+0x388>)
 800ad5a:	f7f8 fec7 	bl	8003aec <HAL_GPIO_WritePin>
 800ad5e:	e235      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, vlue); break;
 800ad60:	78fb      	ldrb	r3, [r7, #3]
 800ad62:	461a      	mov	r2, r3
 800ad64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ad68:	484a      	ldr	r0, [pc, #296]	@ (800ae94 <digitalWrite+0x388>)
 800ad6a:	f7f8 febf 	bl	8003aec <HAL_GPIO_WritePin>
 800ad6e:	e22d      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, vlue); break;
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	461a      	mov	r2, r3
 800ad74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ad78:	4846      	ldr	r0, [pc, #280]	@ (800ae94 <digitalWrite+0x388>)
 800ad7a:	f7f8 feb7 	bl	8003aec <HAL_GPIO_WritePin>
 800ad7e:	e225      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, vlue); break;
 800ad80:	78fb      	ldrb	r3, [r7, #3]
 800ad82:	461a      	mov	r2, r3
 800ad84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800ad88:	4842      	ldr	r0, [pc, #264]	@ (800ae94 <digitalWrite+0x388>)
 800ad8a:	f7f8 feaf 	bl	8003aec <HAL_GPIO_WritePin>
 800ad8e:	e21d      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, vlue); break;
 800ad90:	78fb      	ldrb	r3, [r7, #3]
 800ad92:	461a      	mov	r2, r3
 800ad94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ad98:	483e      	ldr	r0, [pc, #248]	@ (800ae94 <digitalWrite+0x388>)
 800ad9a:	f7f8 fea7 	bl	8003aec <HAL_GPIO_WritePin>
 800ad9e:	e215      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, vlue); break;
 800ada0:	78fb      	ldrb	r3, [r7, #3]
 800ada2:	461a      	mov	r2, r3
 800ada4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ada8:	483a      	ldr	r0, [pc, #232]	@ (800ae94 <digitalWrite+0x388>)
 800adaa:	f7f8 fe9f 	bl	8003aec <HAL_GPIO_WritePin>
 800adae:	e20d      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, vlue); break;
 800adb0:	78fb      	ldrb	r3, [r7, #3]
 800adb2:	461a      	mov	r2, r3
 800adb4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800adb8:	4836      	ldr	r0, [pc, #216]	@ (800ae94 <digitalWrite+0x388>)
 800adba:	f7f8 fe97 	bl	8003aec <HAL_GPIO_WritePin>
 800adbe:	e205      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, vlue); break;
 800adc0:	78fb      	ldrb	r3, [r7, #3]
 800adc2:	461a      	mov	r2, r3
 800adc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800adc8:	4832      	ldr	r0, [pc, #200]	@ (800ae94 <digitalWrite+0x388>)
 800adca:	f7f8 fe8f 	bl	8003aec <HAL_GPIO_WritePin>
 800adce:	e1fd      	b.n	800b1cc <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'C') {
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	3301      	adds	r3, #1
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	2b43      	cmp	r3, #67	@ 0x43
 800add8:	f040 80a7 	bne.w	800af2a <digitalWrite+0x41e>
	        switch (PIN) {
 800addc:	7bfb      	ldrb	r3, [r7, #15]
 800adde:	2b0f      	cmp	r3, #15
 800ade0:	f200 81f4 	bhi.w	800b1cc <digitalWrite+0x6c0>
 800ade4:	a201      	add	r2, pc, #4	@ (adr r2, 800adec <digitalWrite+0x2e0>)
 800ade6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adea:	bf00      	nop
 800adec:	0800ae2d 	.word	0x0800ae2d
 800adf0:	0800ae3b 	.word	0x0800ae3b
 800adf4:	0800ae49 	.word	0x0800ae49
 800adf8:	0800ae57 	.word	0x0800ae57
 800adfc:	0800ae65 	.word	0x0800ae65
 800ae00:	0800ae73 	.word	0x0800ae73
 800ae04:	0800ae81 	.word	0x0800ae81
 800ae08:	0800ae9d 	.word	0x0800ae9d
 800ae0c:	0800aeab 	.word	0x0800aeab
 800ae10:	0800aebb 	.word	0x0800aebb
 800ae14:	0800aecb 	.word	0x0800aecb
 800ae18:	0800aedb 	.word	0x0800aedb
 800ae1c:	0800aeeb 	.word	0x0800aeeb
 800ae20:	0800aefb 	.word	0x0800aefb
 800ae24:	0800af0b 	.word	0x0800af0b
 800ae28:	0800af1b 	.word	0x0800af1b
	            case 0: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, vlue); break;
 800ae2c:	78fb      	ldrb	r3, [r7, #3]
 800ae2e:	461a      	mov	r2, r3
 800ae30:	2101      	movs	r1, #1
 800ae32:	4819      	ldr	r0, [pc, #100]	@ (800ae98 <digitalWrite+0x38c>)
 800ae34:	f7f8 fe5a 	bl	8003aec <HAL_GPIO_WritePin>
 800ae38:	e1c8      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, vlue); break;
 800ae3a:	78fb      	ldrb	r3, [r7, #3]
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	2102      	movs	r1, #2
 800ae40:	4815      	ldr	r0, [pc, #84]	@ (800ae98 <digitalWrite+0x38c>)
 800ae42:	f7f8 fe53 	bl	8003aec <HAL_GPIO_WritePin>
 800ae46:	e1c1      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, vlue); break;
 800ae48:	78fb      	ldrb	r3, [r7, #3]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	2104      	movs	r1, #4
 800ae4e:	4812      	ldr	r0, [pc, #72]	@ (800ae98 <digitalWrite+0x38c>)
 800ae50:	f7f8 fe4c 	bl	8003aec <HAL_GPIO_WritePin>
 800ae54:	e1ba      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, vlue); break;
 800ae56:	78fb      	ldrb	r3, [r7, #3]
 800ae58:	461a      	mov	r2, r3
 800ae5a:	2108      	movs	r1, #8
 800ae5c:	480e      	ldr	r0, [pc, #56]	@ (800ae98 <digitalWrite+0x38c>)
 800ae5e:	f7f8 fe45 	bl	8003aec <HAL_GPIO_WritePin>
 800ae62:	e1b3      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, vlue); break;
 800ae64:	78fb      	ldrb	r3, [r7, #3]
 800ae66:	461a      	mov	r2, r3
 800ae68:	2110      	movs	r1, #16
 800ae6a:	480b      	ldr	r0, [pc, #44]	@ (800ae98 <digitalWrite+0x38c>)
 800ae6c:	f7f8 fe3e 	bl	8003aec <HAL_GPIO_WritePin>
 800ae70:	e1ac      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, vlue); break;
 800ae72:	78fb      	ldrb	r3, [r7, #3]
 800ae74:	461a      	mov	r2, r3
 800ae76:	2120      	movs	r1, #32
 800ae78:	4807      	ldr	r0, [pc, #28]	@ (800ae98 <digitalWrite+0x38c>)
 800ae7a:	f7f8 fe37 	bl	8003aec <HAL_GPIO_WritePin>
 800ae7e:	e1a5      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, vlue); break;
 800ae80:	78fb      	ldrb	r3, [r7, #3]
 800ae82:	461a      	mov	r2, r3
 800ae84:	2140      	movs	r1, #64	@ 0x40
 800ae86:	4804      	ldr	r0, [pc, #16]	@ (800ae98 <digitalWrite+0x38c>)
 800ae88:	f7f8 fe30 	bl	8003aec <HAL_GPIO_WritePin>
 800ae8c:	e19e      	b.n	800b1cc <digitalWrite+0x6c0>
 800ae8e:	bf00      	nop
 800ae90:	40020000 	.word	0x40020000
 800ae94:	40020400 	.word	0x40020400
 800ae98:	40020800 	.word	0x40020800
	            case 7: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, vlue); break;
 800ae9c:	78fb      	ldrb	r3, [r7, #3]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	2180      	movs	r1, #128	@ 0x80
 800aea2:	48bb      	ldr	r0, [pc, #748]	@ (800b190 <digitalWrite+0x684>)
 800aea4:	f7f8 fe22 	bl	8003aec <HAL_GPIO_WritePin>
 800aea8:	e190      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, vlue); break;
 800aeaa:	78fb      	ldrb	r3, [r7, #3]
 800aeac:	461a      	mov	r2, r3
 800aeae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800aeb2:	48b7      	ldr	r0, [pc, #732]	@ (800b190 <digitalWrite+0x684>)
 800aeb4:	f7f8 fe1a 	bl	8003aec <HAL_GPIO_WritePin>
 800aeb8:	e188      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, vlue); break;
 800aeba:	78fb      	ldrb	r3, [r7, #3]
 800aebc:	461a      	mov	r2, r3
 800aebe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aec2:	48b3      	ldr	r0, [pc, #716]	@ (800b190 <digitalWrite+0x684>)
 800aec4:	f7f8 fe12 	bl	8003aec <HAL_GPIO_WritePin>
 800aec8:	e180      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, vlue); break;
 800aeca:	78fb      	ldrb	r3, [r7, #3]
 800aecc:	461a      	mov	r2, r3
 800aece:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800aed2:	48af      	ldr	r0, [pc, #700]	@ (800b190 <digitalWrite+0x684>)
 800aed4:	f7f8 fe0a 	bl	8003aec <HAL_GPIO_WritePin>
 800aed8:	e178      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, vlue); break;
 800aeda:	78fb      	ldrb	r3, [r7, #3]
 800aedc:	461a      	mov	r2, r3
 800aede:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800aee2:	48ab      	ldr	r0, [pc, #684]	@ (800b190 <digitalWrite+0x684>)
 800aee4:	f7f8 fe02 	bl	8003aec <HAL_GPIO_WritePin>
 800aee8:	e170      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, vlue); break;
 800aeea:	78fb      	ldrb	r3, [r7, #3]
 800aeec:	461a      	mov	r2, r3
 800aeee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800aef2:	48a7      	ldr	r0, [pc, #668]	@ (800b190 <digitalWrite+0x684>)
 800aef4:	f7f8 fdfa 	bl	8003aec <HAL_GPIO_WritePin>
 800aef8:	e168      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, vlue); break;
 800aefa:	78fb      	ldrb	r3, [r7, #3]
 800aefc:	461a      	mov	r2, r3
 800aefe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800af02:	48a3      	ldr	r0, [pc, #652]	@ (800b190 <digitalWrite+0x684>)
 800af04:	f7f8 fdf2 	bl	8003aec <HAL_GPIO_WritePin>
 800af08:	e160      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, vlue); break;
 800af0a:	78fb      	ldrb	r3, [r7, #3]
 800af0c:	461a      	mov	r2, r3
 800af0e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800af12:	489f      	ldr	r0, [pc, #636]	@ (800b190 <digitalWrite+0x684>)
 800af14:	f7f8 fdea 	bl	8003aec <HAL_GPIO_WritePin>
 800af18:	e158      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, vlue); break;
 800af1a:	78fb      	ldrb	r3, [r7, #3]
 800af1c:	461a      	mov	r2, r3
 800af1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800af22:	489b      	ldr	r0, [pc, #620]	@ (800b190 <digitalWrite+0x684>)
 800af24:	f7f8 fde2 	bl	8003aec <HAL_GPIO_WritePin>
 800af28:	e150      	b.n	800b1cc <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'D') {
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	3301      	adds	r3, #1
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	2b44      	cmp	r3, #68	@ 0x44
 800af32:	f040 809f 	bne.w	800b074 <digitalWrite+0x568>
	        switch (PIN) {
 800af36:	7bfb      	ldrb	r3, [r7, #15]
 800af38:	2b0f      	cmp	r3, #15
 800af3a:	f200 8147 	bhi.w	800b1cc <digitalWrite+0x6c0>
 800af3e:	a201      	add	r2, pc, #4	@ (adr r2, 800af44 <digitalWrite+0x438>)
 800af40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af44:	0800af85 	.word	0x0800af85
 800af48:	0800af93 	.word	0x0800af93
 800af4c:	0800afa1 	.word	0x0800afa1
 800af50:	0800afaf 	.word	0x0800afaf
 800af54:	0800afbd 	.word	0x0800afbd
 800af58:	0800afcb 	.word	0x0800afcb
 800af5c:	0800afd9 	.word	0x0800afd9
 800af60:	0800afe7 	.word	0x0800afe7
 800af64:	0800aff5 	.word	0x0800aff5
 800af68:	0800b005 	.word	0x0800b005
 800af6c:	0800b015 	.word	0x0800b015
 800af70:	0800b025 	.word	0x0800b025
 800af74:	0800b035 	.word	0x0800b035
 800af78:	0800b045 	.word	0x0800b045
 800af7c:	0800b055 	.word	0x0800b055
 800af80:	0800b065 	.word	0x0800b065
	            case 0: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, vlue); break;
 800af84:	78fb      	ldrb	r3, [r7, #3]
 800af86:	461a      	mov	r2, r3
 800af88:	2101      	movs	r1, #1
 800af8a:	4882      	ldr	r0, [pc, #520]	@ (800b194 <digitalWrite+0x688>)
 800af8c:	f7f8 fdae 	bl	8003aec <HAL_GPIO_WritePin>
 800af90:	e11c      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, vlue); break;
 800af92:	78fb      	ldrb	r3, [r7, #3]
 800af94:	461a      	mov	r2, r3
 800af96:	2102      	movs	r1, #2
 800af98:	487e      	ldr	r0, [pc, #504]	@ (800b194 <digitalWrite+0x688>)
 800af9a:	f7f8 fda7 	bl	8003aec <HAL_GPIO_WritePin>
 800af9e:	e115      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, vlue); break;
 800afa0:	78fb      	ldrb	r3, [r7, #3]
 800afa2:	461a      	mov	r2, r3
 800afa4:	2104      	movs	r1, #4
 800afa6:	487b      	ldr	r0, [pc, #492]	@ (800b194 <digitalWrite+0x688>)
 800afa8:	f7f8 fda0 	bl	8003aec <HAL_GPIO_WritePin>
 800afac:	e10e      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, vlue); break;
 800afae:	78fb      	ldrb	r3, [r7, #3]
 800afb0:	461a      	mov	r2, r3
 800afb2:	2108      	movs	r1, #8
 800afb4:	4877      	ldr	r0, [pc, #476]	@ (800b194 <digitalWrite+0x688>)
 800afb6:	f7f8 fd99 	bl	8003aec <HAL_GPIO_WritePin>
 800afba:	e107      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, vlue); break;
 800afbc:	78fb      	ldrb	r3, [r7, #3]
 800afbe:	461a      	mov	r2, r3
 800afc0:	2110      	movs	r1, #16
 800afc2:	4874      	ldr	r0, [pc, #464]	@ (800b194 <digitalWrite+0x688>)
 800afc4:	f7f8 fd92 	bl	8003aec <HAL_GPIO_WritePin>
 800afc8:	e100      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, vlue); break;
 800afca:	78fb      	ldrb	r3, [r7, #3]
 800afcc:	461a      	mov	r2, r3
 800afce:	2120      	movs	r1, #32
 800afd0:	4870      	ldr	r0, [pc, #448]	@ (800b194 <digitalWrite+0x688>)
 800afd2:	f7f8 fd8b 	bl	8003aec <HAL_GPIO_WritePin>
 800afd6:	e0f9      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, vlue); break;
 800afd8:	78fb      	ldrb	r3, [r7, #3]
 800afda:	461a      	mov	r2, r3
 800afdc:	2140      	movs	r1, #64	@ 0x40
 800afde:	486d      	ldr	r0, [pc, #436]	@ (800b194 <digitalWrite+0x688>)
 800afe0:	f7f8 fd84 	bl	8003aec <HAL_GPIO_WritePin>
 800afe4:	e0f2      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, vlue); break;
 800afe6:	78fb      	ldrb	r3, [r7, #3]
 800afe8:	461a      	mov	r2, r3
 800afea:	2180      	movs	r1, #128	@ 0x80
 800afec:	4869      	ldr	r0, [pc, #420]	@ (800b194 <digitalWrite+0x688>)
 800afee:	f7f8 fd7d 	bl	8003aec <HAL_GPIO_WritePin>
 800aff2:	e0eb      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, vlue); break;
 800aff4:	78fb      	ldrb	r3, [r7, #3]
 800aff6:	461a      	mov	r2, r3
 800aff8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800affc:	4865      	ldr	r0, [pc, #404]	@ (800b194 <digitalWrite+0x688>)
 800affe:	f7f8 fd75 	bl	8003aec <HAL_GPIO_WritePin>
 800b002:	e0e3      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, vlue); break;
 800b004:	78fb      	ldrb	r3, [r7, #3]
 800b006:	461a      	mov	r2, r3
 800b008:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b00c:	4861      	ldr	r0, [pc, #388]	@ (800b194 <digitalWrite+0x688>)
 800b00e:	f7f8 fd6d 	bl	8003aec <HAL_GPIO_WritePin>
 800b012:	e0db      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, vlue); break;
 800b014:	78fb      	ldrb	r3, [r7, #3]
 800b016:	461a      	mov	r2, r3
 800b018:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b01c:	485d      	ldr	r0, [pc, #372]	@ (800b194 <digitalWrite+0x688>)
 800b01e:	f7f8 fd65 	bl	8003aec <HAL_GPIO_WritePin>
 800b022:	e0d3      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, vlue); break;
 800b024:	78fb      	ldrb	r3, [r7, #3]
 800b026:	461a      	mov	r2, r3
 800b028:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b02c:	4859      	ldr	r0, [pc, #356]	@ (800b194 <digitalWrite+0x688>)
 800b02e:	f7f8 fd5d 	bl	8003aec <HAL_GPIO_WritePin>
 800b032:	e0cb      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, vlue); break;
 800b034:	78fb      	ldrb	r3, [r7, #3]
 800b036:	461a      	mov	r2, r3
 800b038:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b03c:	4855      	ldr	r0, [pc, #340]	@ (800b194 <digitalWrite+0x688>)
 800b03e:	f7f8 fd55 	bl	8003aec <HAL_GPIO_WritePin>
 800b042:	e0c3      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, vlue); break;
 800b044:	78fb      	ldrb	r3, [r7, #3]
 800b046:	461a      	mov	r2, r3
 800b048:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b04c:	4851      	ldr	r0, [pc, #324]	@ (800b194 <digitalWrite+0x688>)
 800b04e:	f7f8 fd4d 	bl	8003aec <HAL_GPIO_WritePin>
 800b052:	e0bb      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, vlue); break;
 800b054:	78fb      	ldrb	r3, [r7, #3]
 800b056:	461a      	mov	r2, r3
 800b058:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b05c:	484d      	ldr	r0, [pc, #308]	@ (800b194 <digitalWrite+0x688>)
 800b05e:	f7f8 fd45 	bl	8003aec <HAL_GPIO_WritePin>
 800b062:	e0b3      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, vlue); break;
 800b064:	78fb      	ldrb	r3, [r7, #3]
 800b066:	461a      	mov	r2, r3
 800b068:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b06c:	4849      	ldr	r0, [pc, #292]	@ (800b194 <digitalWrite+0x688>)
 800b06e:	f7f8 fd3d 	bl	8003aec <HAL_GPIO_WritePin>
 800b072:	e0ab      	b.n	800b1cc <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'E') {
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	3301      	adds	r3, #1
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	2b45      	cmp	r3, #69	@ 0x45
 800b07c:	f040 80a6 	bne.w	800b1cc <digitalWrite+0x6c0>
	        switch (PIN) {
 800b080:	7bfb      	ldrb	r3, [r7, #15]
 800b082:	2b0f      	cmp	r3, #15
 800b084:	f200 80a2 	bhi.w	800b1cc <digitalWrite+0x6c0>
 800b088:	a201      	add	r2, pc, #4	@ (adr r2, 800b090 <digitalWrite+0x584>)
 800b08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08e:	bf00      	nop
 800b090:	0800b0d1 	.word	0x0800b0d1
 800b094:	0800b0df 	.word	0x0800b0df
 800b098:	0800b0ed 	.word	0x0800b0ed
 800b09c:	0800b0fb 	.word	0x0800b0fb
 800b0a0:	0800b109 	.word	0x0800b109
 800b0a4:	0800b117 	.word	0x0800b117
 800b0a8:	0800b125 	.word	0x0800b125
 800b0ac:	0800b133 	.word	0x0800b133
 800b0b0:	0800b141 	.word	0x0800b141
 800b0b4:	0800b151 	.word	0x0800b151
 800b0b8:	0800b161 	.word	0x0800b161
 800b0bc:	0800b171 	.word	0x0800b171
 800b0c0:	0800b181 	.word	0x0800b181
 800b0c4:	0800b19d 	.word	0x0800b19d
 800b0c8:	0800b1ad 	.word	0x0800b1ad
 800b0cc:	0800b1bd 	.word	0x0800b1bd
	            case 0: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, vlue); break;
 800b0d0:	78fb      	ldrb	r3, [r7, #3]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	2101      	movs	r1, #1
 800b0d6:	4830      	ldr	r0, [pc, #192]	@ (800b198 <digitalWrite+0x68c>)
 800b0d8:	f7f8 fd08 	bl	8003aec <HAL_GPIO_WritePin>
 800b0dc:	e076      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, vlue); break;
 800b0de:	78fb      	ldrb	r3, [r7, #3]
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	2102      	movs	r1, #2
 800b0e4:	482c      	ldr	r0, [pc, #176]	@ (800b198 <digitalWrite+0x68c>)
 800b0e6:	f7f8 fd01 	bl	8003aec <HAL_GPIO_WritePin>
 800b0ea:	e06f      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, vlue); break;
 800b0ec:	78fb      	ldrb	r3, [r7, #3]
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	2104      	movs	r1, #4
 800b0f2:	4829      	ldr	r0, [pc, #164]	@ (800b198 <digitalWrite+0x68c>)
 800b0f4:	f7f8 fcfa 	bl	8003aec <HAL_GPIO_WritePin>
 800b0f8:	e068      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, vlue); break;
 800b0fa:	78fb      	ldrb	r3, [r7, #3]
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	2108      	movs	r1, #8
 800b100:	4825      	ldr	r0, [pc, #148]	@ (800b198 <digitalWrite+0x68c>)
 800b102:	f7f8 fcf3 	bl	8003aec <HAL_GPIO_WritePin>
 800b106:	e061      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, vlue); break;
 800b108:	78fb      	ldrb	r3, [r7, #3]
 800b10a:	461a      	mov	r2, r3
 800b10c:	2110      	movs	r1, #16
 800b10e:	4822      	ldr	r0, [pc, #136]	@ (800b198 <digitalWrite+0x68c>)
 800b110:	f7f8 fcec 	bl	8003aec <HAL_GPIO_WritePin>
 800b114:	e05a      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, vlue); break;
 800b116:	78fb      	ldrb	r3, [r7, #3]
 800b118:	461a      	mov	r2, r3
 800b11a:	2120      	movs	r1, #32
 800b11c:	481e      	ldr	r0, [pc, #120]	@ (800b198 <digitalWrite+0x68c>)
 800b11e:	f7f8 fce5 	bl	8003aec <HAL_GPIO_WritePin>
 800b122:	e053      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, vlue); break;
 800b124:	78fb      	ldrb	r3, [r7, #3]
 800b126:	461a      	mov	r2, r3
 800b128:	2140      	movs	r1, #64	@ 0x40
 800b12a:	481b      	ldr	r0, [pc, #108]	@ (800b198 <digitalWrite+0x68c>)
 800b12c:	f7f8 fcde 	bl	8003aec <HAL_GPIO_WritePin>
 800b130:	e04c      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, vlue); break;
 800b132:	78fb      	ldrb	r3, [r7, #3]
 800b134:	461a      	mov	r2, r3
 800b136:	2180      	movs	r1, #128	@ 0x80
 800b138:	4817      	ldr	r0, [pc, #92]	@ (800b198 <digitalWrite+0x68c>)
 800b13a:	f7f8 fcd7 	bl	8003aec <HAL_GPIO_WritePin>
 800b13e:	e045      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, vlue); break;
 800b140:	78fb      	ldrb	r3, [r7, #3]
 800b142:	461a      	mov	r2, r3
 800b144:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800b148:	4813      	ldr	r0, [pc, #76]	@ (800b198 <digitalWrite+0x68c>)
 800b14a:	f7f8 fccf 	bl	8003aec <HAL_GPIO_WritePin>
 800b14e:	e03d      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, vlue); break;
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	461a      	mov	r2, r3
 800b154:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b158:	480f      	ldr	r0, [pc, #60]	@ (800b198 <digitalWrite+0x68c>)
 800b15a:	f7f8 fcc7 	bl	8003aec <HAL_GPIO_WritePin>
 800b15e:	e035      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, vlue); break;
 800b160:	78fb      	ldrb	r3, [r7, #3]
 800b162:	461a      	mov	r2, r3
 800b164:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b168:	480b      	ldr	r0, [pc, #44]	@ (800b198 <digitalWrite+0x68c>)
 800b16a:	f7f8 fcbf 	bl	8003aec <HAL_GPIO_WritePin>
 800b16e:	e02d      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, vlue); break;
 800b170:	78fb      	ldrb	r3, [r7, #3]
 800b172:	461a      	mov	r2, r3
 800b174:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800b178:	4807      	ldr	r0, [pc, #28]	@ (800b198 <digitalWrite+0x68c>)
 800b17a:	f7f8 fcb7 	bl	8003aec <HAL_GPIO_WritePin>
 800b17e:	e025      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, vlue); break;
 800b180:	78fb      	ldrb	r3, [r7, #3]
 800b182:	461a      	mov	r2, r3
 800b184:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800b188:	4803      	ldr	r0, [pc, #12]	@ (800b198 <digitalWrite+0x68c>)
 800b18a:	f7f8 fcaf 	bl	8003aec <HAL_GPIO_WritePin>
 800b18e:	e01d      	b.n	800b1cc <digitalWrite+0x6c0>
 800b190:	40020800 	.word	0x40020800
 800b194:	40020c00 	.word	0x40020c00
 800b198:	40021000 	.word	0x40021000
	            case 13: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, vlue); break;
 800b19c:	78fb      	ldrb	r3, [r7, #3]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b1a4:	480b      	ldr	r0, [pc, #44]	@ (800b1d4 <digitalWrite+0x6c8>)
 800b1a6:	f7f8 fca1 	bl	8003aec <HAL_GPIO_WritePin>
 800b1aa:	e00f      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, vlue); break;
 800b1ac:	78fb      	ldrb	r3, [r7, #3]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800b1b4:	4807      	ldr	r0, [pc, #28]	@ (800b1d4 <digitalWrite+0x6c8>)
 800b1b6:	f7f8 fc99 	bl	8003aec <HAL_GPIO_WritePin>
 800b1ba:	e007      	b.n	800b1cc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, vlue); break;
 800b1bc:	78fb      	ldrb	r3, [r7, #3]
 800b1be:	461a      	mov	r2, r3
 800b1c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b1c4:	4803      	ldr	r0, [pc, #12]	@ (800b1d4 <digitalWrite+0x6c8>)
 800b1c6:	f7f8 fc91 	bl	8003aec <HAL_GPIO_WritePin>
 800b1ca:	bf00      	nop
	        }
	    }
}
 800b1cc:	bf00      	nop
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	40021000 	.word	0x40021000

0800b1d8 <Setup_Forward_Kinematic>:

float _Lx;
float _Ly;
float _Radius_wheel;

void Setup_Forward_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	ed87 0a03 	vstr	s0, [r7, #12]
 800b1e2:	edc7 0a02 	vstr	s1, [r7, #8]
 800b1e6:	ed87 1a01 	vstr	s2, [r7, #4]
	_Lx = Lx;
 800b1ea:	4a07      	ldr	r2, [pc, #28]	@ (800b208 <Setup_Forward_Kinematic+0x30>)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6013      	str	r3, [r2, #0]
	_Ly = Ly;
 800b1f0:	4a06      	ldr	r2, [pc, #24]	@ (800b20c <Setup_Forward_Kinematic+0x34>)
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	6013      	str	r3, [r2, #0]
	_Radius_wheel = Radius_wheel;
 800b1f6:	4a06      	ldr	r2, [pc, #24]	@ (800b210 <Setup_Forward_Kinematic+0x38>)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6013      	str	r3, [r2, #0]
}
 800b1fc:	bf00      	nop
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr
 800b208:	2000084c 	.word	0x2000084c
 800b20c:	20000850 	.word	0x20000850
 800b210:	20000854 	.word	0x20000854

0800b214 <Setup_frequency_Forward_Kinematic>:

float _Pos_X = 0.0f;
float _Pos_Y = 0.0f;
float _Pos_Z = 0.0f;

void Setup_frequency_Forward_Kinematic(uint8_t freq){
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	4603      	mov	r3, r0
 800b21c:	71fb      	strb	r3, [r7, #7]
	__freq = freq;
 800b21e:	4a04      	ldr	r2, [pc, #16]	@ (800b230 <Setup_frequency_Forward_Kinematic+0x1c>)
 800b220:	79fb      	ldrb	r3, [r7, #7]
 800b222:	7013      	strb	r3, [r2, #0]
}
 800b224:	bf00      	nop
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	20000010 	.word	0x20000010

0800b234 <Game_Play_ROBOT_1>:
	}else{
		digitalWrite("PE13", 0);
	}
}

void Game_Play_ROBOT_1(){
 800b234:	b580      	push	{r7, lr}
 800b236:	af00      	add	r7, sp, #0
	//องศาที่ยิง
	if(Str_PS2.moveBtnBit.move4 == 1){
 800b238:	4b3c      	ldr	r3, [pc, #240]	@ (800b32c <Game_Play_ROBOT_1+0xf8>)
 800b23a:	789b      	ldrb	r3, [r3, #2]
 800b23c:	f003 0308 	and.w	r3, r3, #8
 800b240:	b2db      	uxtb	r3, r3
 800b242:	2b00      	cmp	r3, #0
 800b244:	d008      	beq.n	800b258 <Game_Play_ROBOT_1+0x24>
		digitalWrite("PE10", 1);
 800b246:	2101      	movs	r1, #1
 800b248:	4839      	ldr	r0, [pc, #228]	@ (800b330 <Game_Play_ROBOT_1+0xfc>)
 800b24a:	f7ff fc5f 	bl	800ab0c <digitalWrite>
		digitalWrite("PE08", 0);
 800b24e:	2100      	movs	r1, #0
 800b250:	4838      	ldr	r0, [pc, #224]	@ (800b334 <Game_Play_ROBOT_1+0x100>)
 800b252:	f7ff fc5b 	bl	800ab0c <digitalWrite>
 800b256:	e007      	b.n	800b268 <Game_Play_ROBOT_1+0x34>
	}else{
		digitalWrite("PE10", 0);
 800b258:	2100      	movs	r1, #0
 800b25a:	4835      	ldr	r0, [pc, #212]	@ (800b330 <Game_Play_ROBOT_1+0xfc>)
 800b25c:	f7ff fc56 	bl	800ab0c <digitalWrite>
		digitalWrite("PE08", 1);
 800b260:	2101      	movs	r1, #1
 800b262:	4834      	ldr	r0, [pc, #208]	@ (800b334 <Game_Play_ROBOT_1+0x100>)
 800b264:	f7ff fc52 	bl	800ab0c <digitalWrite>
	}

	if(Str_PS2.attackBtnBit.attack2 == 1){
 800b268:	4b30      	ldr	r3, [pc, #192]	@ (800b32c <Game_Play_ROBOT_1+0xf8>)
 800b26a:	78db      	ldrb	r3, [r3, #3]
 800b26c:	f003 0302 	and.w	r3, r3, #2
 800b270:	b2db      	uxtb	r3, r3
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00c      	beq.n	800b290 <Game_Play_ROBOT_1+0x5c>
		digitalWrite("PE07", 1);
 800b276:	2101      	movs	r1, #1
 800b278:	482f      	ldr	r0, [pc, #188]	@ (800b338 <Game_Play_ROBOT_1+0x104>)
 800b27a:	f7ff fc47 	bl	800ab0c <digitalWrite>
		digitalWrite("PB00", 1);
 800b27e:	2101      	movs	r1, #1
 800b280:	482e      	ldr	r0, [pc, #184]	@ (800b33c <Game_Play_ROBOT_1+0x108>)
 800b282:	f7ff fc43 	bl	800ab0c <digitalWrite>
		digitalWrite("PE15", 1);
 800b286:	2101      	movs	r1, #1
 800b288:	482d      	ldr	r0, [pc, #180]	@ (800b340 <Game_Play_ROBOT_1+0x10c>)
 800b28a:	f7ff fc3f 	bl	800ab0c <digitalWrite>
 800b28e:	e00b      	b.n	800b2a8 <Game_Play_ROBOT_1+0x74>
	}else{
		digitalWrite("PE07", 0);
 800b290:	2100      	movs	r1, #0
 800b292:	4829      	ldr	r0, [pc, #164]	@ (800b338 <Game_Play_ROBOT_1+0x104>)
 800b294:	f7ff fc3a 	bl	800ab0c <digitalWrite>
		digitalWrite("PB00", 0);
 800b298:	2100      	movs	r1, #0
 800b29a:	4828      	ldr	r0, [pc, #160]	@ (800b33c <Game_Play_ROBOT_1+0x108>)
 800b29c:	f7ff fc36 	bl	800ab0c <digitalWrite>
		digitalWrite("PE15", 0);
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	4827      	ldr	r0, [pc, #156]	@ (800b340 <Game_Play_ROBOT_1+0x10c>)
 800b2a4:	f7ff fc32 	bl	800ab0c <digitalWrite>
	}

	if((Str_PS2.attackBtnBit.attack3 == 1) && (Str_PS2.attackBtnBit.attack4 == 0)){
 800b2a8:	4b20      	ldr	r3, [pc, #128]	@ (800b32c <Game_Play_ROBOT_1+0xf8>)
 800b2aa:	78db      	ldrb	r3, [r3, #3]
 800b2ac:	f003 0304 	and.w	r3, r3, #4
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00e      	beq.n	800b2d4 <Game_Play_ROBOT_1+0xa0>
 800b2b6:	4b1d      	ldr	r3, [pc, #116]	@ (800b32c <Game_Play_ROBOT_1+0xf8>)
 800b2b8:	78db      	ldrb	r3, [r3, #3]
 800b2ba:	f003 0308 	and.w	r3, r3, #8
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d107      	bne.n	800b2d4 <Game_Play_ROBOT_1+0xa0>
		Motor_DutyCycle_EXTRA1(-3924);
 800b2c4:	481f      	ldr	r0, [pc, #124]	@ (800b344 <Game_Play_ROBOT_1+0x110>)
 800b2c6:	f7ff f9a9 	bl	800a61c <Motor_DutyCycle_EXTRA1>
		Motor_DutyCycle_EXTRA2(3924);
 800b2ca:	f640 7054 	movw	r0, #3924	@ 0xf54
 800b2ce:	f7ff f9fd 	bl	800a6cc <Motor_DutyCycle_EXTRA2>
 800b2d2:	e01b      	b.n	800b30c <Game_Play_ROBOT_1+0xd8>
	}else if((Str_PS2.attackBtnBit.attack3 == 0) && (Str_PS2.attackBtnBit.attack4 == 1)){
 800b2d4:	4b15      	ldr	r3, [pc, #84]	@ (800b32c <Game_Play_ROBOT_1+0xf8>)
 800b2d6:	78db      	ldrb	r3, [r3, #3]
 800b2d8:	f003 0304 	and.w	r3, r3, #4
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d10e      	bne.n	800b300 <Game_Play_ROBOT_1+0xcc>
 800b2e2:	4b12      	ldr	r3, [pc, #72]	@ (800b32c <Game_Play_ROBOT_1+0xf8>)
 800b2e4:	78db      	ldrb	r3, [r3, #3]
 800b2e6:	f003 0308 	and.w	r3, r3, #8
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d007      	beq.n	800b300 <Game_Play_ROBOT_1+0xcc>
		Motor_DutyCycle_EXTRA1(-2000);
 800b2f0:	4815      	ldr	r0, [pc, #84]	@ (800b348 <Game_Play_ROBOT_1+0x114>)
 800b2f2:	f7ff f993 	bl	800a61c <Motor_DutyCycle_EXTRA1>
		Motor_DutyCycle_EXTRA2(2000);
 800b2f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b2fa:	f7ff f9e7 	bl	800a6cc <Motor_DutyCycle_EXTRA2>
 800b2fe:	e005      	b.n	800b30c <Game_Play_ROBOT_1+0xd8>
	}else{
		Motor_DutyCycle_EXTRA1(0);
 800b300:	2000      	movs	r0, #0
 800b302:	f7ff f98b 	bl	800a61c <Motor_DutyCycle_EXTRA1>
		Motor_DutyCycle_EXTRA2(0);
 800b306:	2000      	movs	r0, #0
 800b308:	f7ff f9e0 	bl	800a6cc <Motor_DutyCycle_EXTRA2>
	}

	if (Str_PS2.moveBtnBit.set2 == 1) {
 800b30c:	4b07      	ldr	r3, [pc, #28]	@ (800b32c <Game_Play_ROBOT_1+0xf8>)
 800b30e:	789b      	ldrb	r3, [r3, #2]
 800b310:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b00      	cmp	r3, #0
 800b318:	d006      	beq.n	800b328 <Game_Play_ROBOT_1+0xf4>
		Motor_DutyCycle_EXTRA1(-2000);
 800b31a:	480b      	ldr	r0, [pc, #44]	@ (800b348 <Game_Play_ROBOT_1+0x114>)
 800b31c:	f7ff f97e 	bl	800a61c <Motor_DutyCycle_EXTRA1>
		Motor_DutyCycle_EXTRA2(2000);
 800b320:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800b324:	f7ff f9d2 	bl	800a6cc <Motor_DutyCycle_EXTRA2>
	}


}
 800b328:	bf00      	nop
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	200006a8 	.word	0x200006a8
 800b330:	0800fd38 	.word	0x0800fd38
 800b334:	0800fd40 	.word	0x0800fd40
 800b338:	0800fd20 	.word	0x0800fd20
 800b33c:	0800fd28 	.word	0x0800fd28
 800b340:	0800fd48 	.word	0x0800fd48
 800b344:	fffff0ac 	.word	0xfffff0ac
 800b348:	fffff830 	.word	0xfffff830

0800b34c <Setup_Inverse_Kinematic>:

float Lx_;
float Ly_;
float Radius_wheel_;

void Setup_Inverse_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 800b34c:	b480      	push	{r7}
 800b34e:	b085      	sub	sp, #20
 800b350:	af00      	add	r7, sp, #0
 800b352:	ed87 0a03 	vstr	s0, [r7, #12]
 800b356:	edc7 0a02 	vstr	s1, [r7, #8]
 800b35a:	ed87 1a01 	vstr	s2, [r7, #4]
	Lx_ = Lx;
 800b35e:	4a07      	ldr	r2, [pc, #28]	@ (800b37c <Setup_Inverse_Kinematic+0x30>)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6013      	str	r3, [r2, #0]
	Ly_ = Ly;
 800b364:	4a06      	ldr	r2, [pc, #24]	@ (800b380 <Setup_Inverse_Kinematic+0x34>)
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	6013      	str	r3, [r2, #0]
	Radius_wheel_ = Radius_wheel;
 800b36a:	4a06      	ldr	r2, [pc, #24]	@ (800b384 <Setup_Inverse_Kinematic+0x38>)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6013      	str	r3, [r2, #0]
}
 800b370:	bf00      	nop
 800b372:	3714      	adds	r7, #20
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr
 800b37c:	20000858 	.word	0x20000858
 800b380:	2000085c 	.word	0x2000085c
 800b384:	20000860 	.word	0x20000860

0800b388 <Inverse_Kinematic_Lock_Direction>:
}




void Inverse_Kinematic_Lock_Direction(float Vx ,float Vy ,float wz ,float head_ing){
 800b388:	b5b0      	push	{r4, r5, r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	ed87 0a03 	vstr	s0, [r7, #12]
 800b392:	edc7 0a02 	vstr	s1, [r7, #8]
 800b396:	ed87 1a01 	vstr	s2, [r7, #4]
 800b39a:	edc7 1a00 	vstr	s3, [r7]
	_r = (float)(sqrt((Vx * Vx) + (Vy * Vy)));
 800b39e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3a2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b3a6:	edd7 7a02 	vldr	s15, [r7, #8]
 800b3aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b3ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3b2:	ee17 0a90 	vmov	r0, s15
 800b3b6:	f7f5 f86b 	bl	8000490 <__aeabi_f2d>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	460b      	mov	r3, r1
 800b3be:	ec43 2b10 	vmov	d0, r2, r3
 800b3c2:	f003 f899 	bl	800e4f8 <sqrt>
 800b3c6:	ec53 2b10 	vmov	r2, r3, d0
 800b3ca:	4610      	mov	r0, r2
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	f7f5 fb8f 	bl	8000af0 <__aeabi_d2f>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	4a71      	ldr	r2, [pc, #452]	@ (800b59c <Inverse_Kinematic_Lock_Direction+0x214>)
 800b3d6:	6013      	str	r3, [r2, #0]
    _Rad_s = (float)(atan2(Vy, Vx)) - head_ing;
 800b3d8:	68b8      	ldr	r0, [r7, #8]
 800b3da:	f7f5 f859 	bl	8000490 <__aeabi_f2d>
 800b3de:	4604      	mov	r4, r0
 800b3e0:	460d      	mov	r5, r1
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f7f5 f854 	bl	8000490 <__aeabi_f2d>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	ec43 2b11 	vmov	d1, r2, r3
 800b3f0:	ec45 4b10 	vmov	d0, r4, r5
 800b3f4:	f003 f87e 	bl	800e4f4 <atan2>
 800b3f8:	ec53 2b10 	vmov	r2, r3, d0
 800b3fc:	4610      	mov	r0, r2
 800b3fe:	4619      	mov	r1, r3
 800b400:	f7f5 fb76 	bl	8000af0 <__aeabi_d2f>
 800b404:	ee07 0a10 	vmov	s14, r0
 800b408:	edd7 7a00 	vldr	s15, [r7]
 800b40c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b410:	4b63      	ldr	r3, [pc, #396]	@ (800b5a0 <Inverse_Kinematic_Lock_Direction+0x218>)
 800b412:	edc3 7a00 	vstr	s15, [r3]

    __Vx = (_r * cos(_Rad_s));
 800b416:	4b61      	ldr	r3, [pc, #388]	@ (800b59c <Inverse_Kinematic_Lock_Direction+0x214>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7f5 f838 	bl	8000490 <__aeabi_f2d>
 800b420:	4604      	mov	r4, r0
 800b422:	460d      	mov	r5, r1
 800b424:	4b5e      	ldr	r3, [pc, #376]	@ (800b5a0 <Inverse_Kinematic_Lock_Direction+0x218>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4618      	mov	r0, r3
 800b42a:	f7f5 f831 	bl	8000490 <__aeabi_f2d>
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	ec43 2b10 	vmov	d0, r2, r3
 800b436:	f003 f88b 	bl	800e550 <cos>
 800b43a:	ec53 2b10 	vmov	r2, r3, d0
 800b43e:	4620      	mov	r0, r4
 800b440:	4629      	mov	r1, r5
 800b442:	f7f5 f87d 	bl	8000540 <__aeabi_dmul>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	4610      	mov	r0, r2
 800b44c:	4619      	mov	r1, r3
 800b44e:	f7f5 fb4f 	bl	8000af0 <__aeabi_d2f>
 800b452:	4603      	mov	r3, r0
 800b454:	4a53      	ldr	r2, [pc, #332]	@ (800b5a4 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800b456:	6013      	str	r3, [r2, #0]
    __Vy = (_r * sin(_Rad_s));
 800b458:	4b50      	ldr	r3, [pc, #320]	@ (800b59c <Inverse_Kinematic_Lock_Direction+0x214>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7f5 f817 	bl	8000490 <__aeabi_f2d>
 800b462:	4604      	mov	r4, r0
 800b464:	460d      	mov	r5, r1
 800b466:	4b4e      	ldr	r3, [pc, #312]	@ (800b5a0 <Inverse_Kinematic_Lock_Direction+0x218>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7f5 f810 	bl	8000490 <__aeabi_f2d>
 800b470:	4602      	mov	r2, r0
 800b472:	460b      	mov	r3, r1
 800b474:	ec43 2b10 	vmov	d0, r2, r3
 800b478:	f003 f8be 	bl	800e5f8 <sin>
 800b47c:	ec53 2b10 	vmov	r2, r3, d0
 800b480:	4620      	mov	r0, r4
 800b482:	4629      	mov	r1, r5
 800b484:	f7f5 f85c 	bl	8000540 <__aeabi_dmul>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4610      	mov	r0, r2
 800b48e:	4619      	mov	r1, r3
 800b490:	f7f5 fb2e 	bl	8000af0 <__aeabi_d2f>
 800b494:	4603      	mov	r3, r0
 800b496:	4a44      	ldr	r2, [pc, #272]	@ (800b5a8 <Inverse_Kinematic_Lock_Direction+0x220>)
 800b498:	6013      	str	r3, [r2, #0]

	w_LF = (__Vx - __Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 800b49a:	4b42      	ldr	r3, [pc, #264]	@ (800b5a4 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800b49c:	ed93 7a00 	vldr	s14, [r3]
 800b4a0:	4b41      	ldr	r3, [pc, #260]	@ (800b5a8 <Inverse_Kinematic_Lock_Direction+0x220>)
 800b4a2:	edd3 7a00 	vldr	s15, [r3]
 800b4a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b4aa:	4b40      	ldr	r3, [pc, #256]	@ (800b5ac <Inverse_Kinematic_Lock_Direction+0x224>)
 800b4ac:	edd3 6a00 	vldr	s13, [r3]
 800b4b0:	4b3f      	ldr	r3, [pc, #252]	@ (800b5b0 <Inverse_Kinematic_Lock_Direction+0x228>)
 800b4b2:	edd3 7a00 	vldr	s15, [r3]
 800b4b6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b4ba:	edd7 7a01 	vldr	s15, [r7, #4]
 800b4be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b4c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b4c6:	4b3b      	ldr	r3, [pc, #236]	@ (800b5b4 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800b4c8:	ed93 7a00 	vldr	s14, [r3]
 800b4cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4d0:	4b39      	ldr	r3, [pc, #228]	@ (800b5b8 <Inverse_Kinematic_Lock_Direction+0x230>)
 800b4d2:	edc3 7a00 	vstr	s15, [r3]
	w_RF = -(__Vx + __Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 800b4d6:	4b33      	ldr	r3, [pc, #204]	@ (800b5a4 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800b4d8:	ed93 7a00 	vldr	s14, [r3]
 800b4dc:	4b32      	ldr	r3, [pc, #200]	@ (800b5a8 <Inverse_Kinematic_Lock_Direction+0x220>)
 800b4de:	edd3 7a00 	vldr	s15, [r3]
 800b4e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b4e6:	4b31      	ldr	r3, [pc, #196]	@ (800b5ac <Inverse_Kinematic_Lock_Direction+0x224>)
 800b4e8:	edd3 6a00 	vldr	s13, [r3]
 800b4ec:	4b30      	ldr	r3, [pc, #192]	@ (800b5b0 <Inverse_Kinematic_Lock_Direction+0x228>)
 800b4ee:	edd3 7a00 	vldr	s15, [r3]
 800b4f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b4f6:	edd7 7a01 	vldr	s15, [r7, #4]
 800b4fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b4fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b502:	eef1 6a67 	vneg.f32	s13, s15
 800b506:	4b2b      	ldr	r3, [pc, #172]	@ (800b5b4 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800b508:	ed93 7a00 	vldr	s14, [r3]
 800b50c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b510:	4b2a      	ldr	r3, [pc, #168]	@ (800b5bc <Inverse_Kinematic_Lock_Direction+0x234>)
 800b512:	edc3 7a00 	vstr	s15, [r3]
	w_LB = (__Vx + __Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 800b516:	4b23      	ldr	r3, [pc, #140]	@ (800b5a4 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800b518:	ed93 7a00 	vldr	s14, [r3]
 800b51c:	4b22      	ldr	r3, [pc, #136]	@ (800b5a8 <Inverse_Kinematic_Lock_Direction+0x220>)
 800b51e:	edd3 7a00 	vldr	s15, [r3]
 800b522:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b526:	4b21      	ldr	r3, [pc, #132]	@ (800b5ac <Inverse_Kinematic_Lock_Direction+0x224>)
 800b528:	edd3 6a00 	vldr	s13, [r3]
 800b52c:	4b20      	ldr	r3, [pc, #128]	@ (800b5b0 <Inverse_Kinematic_Lock_Direction+0x228>)
 800b52e:	edd3 7a00 	vldr	s15, [r3]
 800b532:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b536:	edd7 7a01 	vldr	s15, [r7, #4]
 800b53a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b53e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b542:	4b1c      	ldr	r3, [pc, #112]	@ (800b5b4 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800b544:	ed93 7a00 	vldr	s14, [r3]
 800b548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b54c:	4b1c      	ldr	r3, [pc, #112]	@ (800b5c0 <Inverse_Kinematic_Lock_Direction+0x238>)
 800b54e:	edc3 7a00 	vstr	s15, [r3]
	w_RB = -(__Vx - __Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 800b552:	4b14      	ldr	r3, [pc, #80]	@ (800b5a4 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800b554:	ed93 7a00 	vldr	s14, [r3]
 800b558:	4b13      	ldr	r3, [pc, #76]	@ (800b5a8 <Inverse_Kinematic_Lock_Direction+0x220>)
 800b55a:	edd3 7a00 	vldr	s15, [r3]
 800b55e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b562:	4b12      	ldr	r3, [pc, #72]	@ (800b5ac <Inverse_Kinematic_Lock_Direction+0x224>)
 800b564:	edd3 6a00 	vldr	s13, [r3]
 800b568:	4b11      	ldr	r3, [pc, #68]	@ (800b5b0 <Inverse_Kinematic_Lock_Direction+0x228>)
 800b56a:	edd3 7a00 	vldr	s15, [r3]
 800b56e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800b572:	edd7 7a01 	vldr	s15, [r7, #4]
 800b576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b57a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b57e:	eef1 6a67 	vneg.f32	s13, s15
 800b582:	4b0c      	ldr	r3, [pc, #48]	@ (800b5b4 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800b584:	ed93 7a00 	vldr	s14, [r3]
 800b588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b58c:	4b0d      	ldr	r3, [pc, #52]	@ (800b5c4 <Inverse_Kinematic_Lock_Direction+0x23c>)
 800b58e:	edc3 7a00 	vstr	s15, [r3]
}
 800b592:	bf00      	nop
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bdb0      	pop	{r4, r5, r7, pc}
 800b59a:	bf00      	nop
 800b59c:	2000088c 	.word	0x2000088c
 800b5a0:	20000890 	.word	0x20000890
 800b5a4:	20000894 	.word	0x20000894
 800b5a8:	20000898 	.word	0x20000898
 800b5ac:	20000858 	.word	0x20000858
 800b5b0:	2000085c 	.word	0x2000085c
 800b5b4:	20000860 	.word	0x20000860
 800b5b8:	20000864 	.word	0x20000864
 800b5bc:	2000086c 	.word	0x2000086c
 800b5c0:	20000868 	.word	0x20000868
 800b5c4:	20000870 	.word	0x20000870

0800b5c8 <get_w_LF>:

float get_w_LF(){
 800b5c8:	b480      	push	{r7}
 800b5ca:	af00      	add	r7, sp, #0
	return w_LF;
 800b5cc:	4b04      	ldr	r3, [pc, #16]	@ (800b5e0 <get_w_LF+0x18>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	ee07 3a90 	vmov	s15, r3
}
 800b5d4:	eeb0 0a67 	vmov.f32	s0, s15
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr
 800b5e0:	20000864 	.word	0x20000864

0800b5e4 <get_w_LB>:

float get_w_LB(){
 800b5e4:	b480      	push	{r7}
 800b5e6:	af00      	add	r7, sp, #0
	return w_LB;
 800b5e8:	4b04      	ldr	r3, [pc, #16]	@ (800b5fc <get_w_LB+0x18>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	ee07 3a90 	vmov	s15, r3
}
 800b5f0:	eeb0 0a67 	vmov.f32	s0, s15
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr
 800b5fc:	20000868 	.word	0x20000868

0800b600 <get_w_RF>:

float get_w_RF(){
 800b600:	b480      	push	{r7}
 800b602:	af00      	add	r7, sp, #0
	return w_RF;
 800b604:	4b04      	ldr	r3, [pc, #16]	@ (800b618 <get_w_RF+0x18>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	ee07 3a90 	vmov	s15, r3
}
 800b60c:	eeb0 0a67 	vmov.f32	s0, s15
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr
 800b618:	2000086c 	.word	0x2000086c

0800b61c <get_w_RB>:

float get_w_RB(){
 800b61c:	b480      	push	{r7}
 800b61e:	af00      	add	r7, sp, #0
	return w_RB;
 800b620:	4b04      	ldr	r3, [pc, #16]	@ (800b634 <get_w_RB+0x18>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	ee07 3a90 	vmov	s15, r3
}
 800b628:	eeb0 0a67 	vmov.f32	s0, s15
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr
 800b634:	20000870 	.word	0x20000870

0800b638 <map>:

float map(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
 800b638:	b480      	push	{r7}
 800b63a:	b087      	sub	sp, #28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	ed87 0a05 	vstr	s0, [r7, #20]
 800b642:	edc7 0a04 	vstr	s1, [r7, #16]
 800b646:	ed87 1a03 	vstr	s2, [r7, #12]
 800b64a:	edc7 1a02 	vstr	s3, [r7, #8]
 800b64e:	ed87 2a01 	vstr	s4, [r7, #4]
    return toLow + (toHigh - toLow) * ((value - fromLow) / (fromHigh - fromLow));
 800b652:	ed97 7a01 	vldr	s14, [r7, #4]
 800b656:	edd7 7a02 	vldr	s15, [r7, #8]
 800b65a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b65e:	edd7 6a05 	vldr	s13, [r7, #20]
 800b662:	edd7 7a04 	vldr	s15, [r7, #16]
 800b666:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800b66a:	edd7 6a03 	vldr	s13, [r7, #12]
 800b66e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b672:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b676:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b67a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b67e:	edd7 7a02 	vldr	s15, [r7, #8]
 800b682:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800b686:	eeb0 0a67 	vmov.f32	s0, s15
 800b68a:	371c      	adds	r7, #28
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <Setup_MPU6050>:
	return _addr;
}

I2C_HandleTypeDef* I2C_MPU6050;

void Setup_MPU6050(I2C_HandleTypeDef *I2Cinstance){
 800b694:	b580      	push	{r7, lr}
 800b696:	b088      	sub	sp, #32
 800b698:	af04      	add	r7, sp, #16
 800b69a:	6078      	str	r0, [r7, #4]
		I2C_MPU6050 = I2Cinstance;
 800b69c:	4a26      	ldr	r2, [pc, #152]	@ (800b738 <Setup_MPU6050+0xa4>)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6013      	str	r3, [r2, #0]

		// power management register 0X6B we should write all 0's to wake the sensor up
		uint8_t Data = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C_MPU6050, MPU6050_ADDR, power_management, 1, &Data, 1, 2000);
 800b6a6:	4b24      	ldr	r3, [pc, #144]	@ (800b738 <Setup_MPU6050+0xa4>)
 800b6a8:	6818      	ldr	r0, [r3, #0]
 800b6aa:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800b6ae:	9302      	str	r3, [sp, #8]
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	9301      	str	r3, [sp, #4]
 800b6b4:	f107 030f 	add.w	r3, r7, #15
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	226b      	movs	r2, #107	@ 0x6b
 800b6be:	21d0      	movs	r1, #208	@ 0xd0
 800b6c0:	f7f8 fb72 	bl	8003da8 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 800b6c4:	2307      	movs	r3, #7
 800b6c6:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C_MPU6050, MPU6050_ADDR, DATA_RATE, 1, &Data, 1, 2000);
 800b6c8:	4b1b      	ldr	r3, [pc, #108]	@ (800b738 <Setup_MPU6050+0xa4>)
 800b6ca:	6818      	ldr	r0, [r3, #0]
 800b6cc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800b6d0:	9302      	str	r3, [sp, #8]
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	9301      	str	r3, [sp, #4]
 800b6d6:	f107 030f 	add.w	r3, r7, #15
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	2301      	movs	r3, #1
 800b6de:	2219      	movs	r2, #25
 800b6e0:	21d0      	movs	r1, #208	@ 0xd0
 800b6e2:	f7f8 fb61 	bl	8003da8 <HAL_I2C_Mem_Write>

//		Data = 0x03;
//		HAL_I2C_Mem_Write(I2C_MPU6050, MPU6050_ADDR, REG_DLPFCONF, 1, &Data, 1, 2000);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		Data = 0x00;  // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C_MPU6050, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 2000);
 800b6ea:	4b13      	ldr	r3, [pc, #76]	@ (800b738 <Setup_MPU6050+0xa4>)
 800b6ec:	6818      	ldr	r0, [r3, #0]
 800b6ee:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800b6f2:	9302      	str	r3, [sp, #8]
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	9301      	str	r3, [sp, #4]
 800b6f8:	f107 030f 	add.w	r3, r7, #15
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	2301      	movs	r3, #1
 800b700:	221c      	movs	r2, #28
 800b702:	21d0      	movs	r1, #208	@ 0xd0
 800b704:	f7f8 fb50 	bl	8003da8 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		Data = 0x00;  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 ̐/s
 800b708:	2300      	movs	r3, #0
 800b70a:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C_MPU6050, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 2000);
 800b70c:	4b0a      	ldr	r3, [pc, #40]	@ (800b738 <Setup_MPU6050+0xa4>)
 800b70e:	6818      	ldr	r0, [r3, #0]
 800b710:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800b714:	9302      	str	r3, [sp, #8]
 800b716:	2301      	movs	r3, #1
 800b718:	9301      	str	r3, [sp, #4]
 800b71a:	f107 030f 	add.w	r3, r7, #15
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	2301      	movs	r3, #1
 800b722:	221b      	movs	r2, #27
 800b724:	21d0      	movs	r1, #208	@ 0xd0
 800b726:	f7f8 fb3f 	bl	8003da8 <HAL_I2C_Mem_Write>


		MPU6050_calib();
 800b72a:	f000 f865 	bl	800b7f8 <MPU6050_calib>
}
 800b72e:	bf00      	nop
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
 800b736:	bf00      	nop
 800b738:	20000874 	.word	0x20000874

0800b73c <ReadMPU6050>:

MPU6050 imu_data;

float gyro_offset = 0;

void ReadMPU6050(){
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b088      	sub	sp, #32
 800b740:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (I2C_MPU6050, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 800b742:	4b2b      	ldr	r3, [pc, #172]	@ (800b7f0 <ReadMPU6050+0xb4>)
 800b744:	6818      	ldr	r0, [r3, #0]
 800b746:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b74a:	9302      	str	r3, [sp, #8]
 800b74c:	2306      	movs	r3, #6
 800b74e:	9301      	str	r3, [sp, #4]
 800b750:	f107 0308 	add.w	r3, r7, #8
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	2301      	movs	r3, #1
 800b758:	223b      	movs	r2, #59	@ 0x3b
 800b75a:	21d0      	movs	r1, #208	@ 0xd0
 800b75c:	f7f8 fc1e 	bl	8003f9c <HAL_I2C_Mem_Read>

	imu_data.Ax = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800b760:	7a3b      	ldrb	r3, [r7, #8]
 800b762:	021b      	lsls	r3, r3, #8
 800b764:	b21a      	sxth	r2, r3
 800b766:	7a7b      	ldrb	r3, [r7, #9]
 800b768:	b21b      	sxth	r3, r3
 800b76a:	4313      	orrs	r3, r2
 800b76c:	b21a      	sxth	r2, r3
 800b76e:	4b21      	ldr	r3, [pc, #132]	@ (800b7f4 <ReadMPU6050+0xb8>)
 800b770:	80da      	strh	r2, [r3, #6]
	imu_data.Ay = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800b772:	7abb      	ldrb	r3, [r7, #10]
 800b774:	021b      	lsls	r3, r3, #8
 800b776:	b21a      	sxth	r2, r3
 800b778:	7afb      	ldrb	r3, [r7, #11]
 800b77a:	b21b      	sxth	r3, r3
 800b77c:	4313      	orrs	r3, r2
 800b77e:	b21a      	sxth	r2, r3
 800b780:	4b1c      	ldr	r3, [pc, #112]	@ (800b7f4 <ReadMPU6050+0xb8>)
 800b782:	811a      	strh	r2, [r3, #8]
	imu_data.Az = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800b784:	7b3b      	ldrb	r3, [r7, #12]
 800b786:	021b      	lsls	r3, r3, #8
 800b788:	b21a      	sxth	r2, r3
 800b78a:	7b7b      	ldrb	r3, [r7, #13]
 800b78c:	b21b      	sxth	r3, r3
 800b78e:	4313      	orrs	r3, r2
 800b790:	b21a      	sxth	r2, r3
 800b792:	4b18      	ldr	r3, [pc, #96]	@ (800b7f4 <ReadMPU6050+0xb8>)
 800b794:	815a      	strh	r2, [r3, #10]

	uint8_t data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read (I2C_MPU6050, MPU6050_ADDR, GYRO_XOUT_H, 1, data, 6, 1000);
 800b796:	4b16      	ldr	r3, [pc, #88]	@ (800b7f0 <ReadMPU6050+0xb4>)
 800b798:	6818      	ldr	r0, [r3, #0]
 800b79a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b79e:	9302      	str	r3, [sp, #8]
 800b7a0:	2306      	movs	r3, #6
 800b7a2:	9301      	str	r3, [sp, #4]
 800b7a4:	463b      	mov	r3, r7
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	2243      	movs	r2, #67	@ 0x43
 800b7ac:	21d0      	movs	r1, #208	@ 0xd0
 800b7ae:	f7f8 fbf5 	bl	8003f9c <HAL_I2C_Mem_Read>

	// Step 3: Combine the high and low bytes into 16-bit values
	imu_data.gx = (int16_t)(data[0] << 8 | data[1]);  // X-axis gyroscope data
 800b7b2:	783b      	ldrb	r3, [r7, #0]
 800b7b4:	021b      	lsls	r3, r3, #8
 800b7b6:	b21a      	sxth	r2, r3
 800b7b8:	787b      	ldrb	r3, [r7, #1]
 800b7ba:	b21b      	sxth	r3, r3
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	b21a      	sxth	r2, r3
 800b7c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b7f4 <ReadMPU6050+0xb8>)
 800b7c2:	801a      	strh	r2, [r3, #0]
	imu_data.gy = (int16_t)(data[2] << 8 | data[3]);  // Y-axis gyroscope data
 800b7c4:	78bb      	ldrb	r3, [r7, #2]
 800b7c6:	021b      	lsls	r3, r3, #8
 800b7c8:	b21a      	sxth	r2, r3
 800b7ca:	78fb      	ldrb	r3, [r7, #3]
 800b7cc:	b21b      	sxth	r3, r3
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	b21a      	sxth	r2, r3
 800b7d2:	4b08      	ldr	r3, [pc, #32]	@ (800b7f4 <ReadMPU6050+0xb8>)
 800b7d4:	805a      	strh	r2, [r3, #2]
	imu_data.gz = (int16_t)(data[4] << 8 | data[5]);  // Z-axis gyroscope data
 800b7d6:	793b      	ldrb	r3, [r7, #4]
 800b7d8:	021b      	lsls	r3, r3, #8
 800b7da:	b21a      	sxth	r2, r3
 800b7dc:	797b      	ldrb	r3, [r7, #5]
 800b7de:	b21b      	sxth	r3, r3
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	b21a      	sxth	r2, r3
 800b7e4:	4b03      	ldr	r3, [pc, #12]	@ (800b7f4 <ReadMPU6050+0xb8>)
 800b7e6:	809a      	strh	r2, [r3, #4]

//	imu_data.gz = imu_data.gz - gyro_offset;
}
 800b7e8:	bf00      	nop
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	20000874 	.word	0x20000874
 800b7f4:	20000878 	.word	0x20000878

0800b7f8 <MPU6050_calib>:


float gyro_raw = 0;

void MPU6050_calib(){
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
	for(uint16_t i=0; i < 2000; i++){
 800b7fe:	2300      	movs	r3, #0
 800b800:	80fb      	strh	r3, [r7, #6]
 800b802:	e016      	b.n	800b832 <MPU6050_calib+0x3a>
		ReadMPU6050();
 800b804:	f7ff ff9a 	bl	800b73c <ReadMPU6050>
		gyro_raw += imu_data.gz;
 800b808:	4b13      	ldr	r3, [pc, #76]	@ (800b858 <MPU6050_calib+0x60>)
 800b80a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b80e:	ee07 3a90 	vmov	s15, r3
 800b812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b816:	4b11      	ldr	r3, [pc, #68]	@ (800b85c <MPU6050_calib+0x64>)
 800b818:	edd3 7a00 	vldr	s15, [r3]
 800b81c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b820:	4b0e      	ldr	r3, [pc, #56]	@ (800b85c <MPU6050_calib+0x64>)
 800b822:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 800b826:	2001      	movs	r0, #1
 800b828:	f7f7 fa6c 	bl	8002d04 <HAL_Delay>
	for(uint16_t i=0; i < 2000; i++){
 800b82c:	88fb      	ldrh	r3, [r7, #6]
 800b82e:	3301      	adds	r3, #1
 800b830:	80fb      	strh	r3, [r7, #6]
 800b832:	88fb      	ldrh	r3, [r7, #6]
 800b834:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b838:	d3e4      	bcc.n	800b804 <MPU6050_calib+0xc>
	}
	gyro_offset = ((float)gyro_raw)/2000.0f;
 800b83a:	4b08      	ldr	r3, [pc, #32]	@ (800b85c <MPU6050_calib+0x64>)
 800b83c:	ed93 7a00 	vldr	s14, [r3]
 800b840:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800b860 <MPU6050_calib+0x68>
 800b844:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b848:	4b06      	ldr	r3, [pc, #24]	@ (800b864 <MPU6050_calib+0x6c>)
 800b84a:	edc3 7a00 	vstr	s15, [r3]
}
 800b84e:	bf00      	nop
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	20000878 	.word	0x20000878
 800b85c:	20000888 	.word	0x20000888
 800b860:	44fa0000 	.word	0x44fa0000
 800b864:	20000884 	.word	0x20000884

0800b868 <app_ros_comm_runner>:
// Private variable
uint8_t comm_fsm        = 0;
uint8_t rx_timeOutFlag = 0;


void app_ros_comm_runner(){
 800b868:	b580      	push	{r7, lr}
 800b86a:	af00      	add	r7, sp, #0

  if((uwTick - commTimeout_millis) > COMM_TIMEOUT_MS){
 800b86c:	4b1c      	ldr	r3, [pc, #112]	@ (800b8e0 <app_ros_comm_runner+0x78>)
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	4b1c      	ldr	r3, [pc, #112]	@ (800b8e4 <app_ros_comm_runner+0x7c>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	2b27      	cmp	r3, #39	@ 0x27
 800b878:	d919      	bls.n	800b8ae <app_ros_comm_runner+0x46>
    commTimeout_millis = uwTick;
 800b87a:	4b19      	ldr	r3, [pc, #100]	@ (800b8e0 <app_ros_comm_runner+0x78>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a19      	ldr	r2, [pc, #100]	@ (800b8e4 <app_ros_comm_runner+0x7c>)
 800b880:	6013      	str	r3, [r2, #0]
    comm_fsm = COMMSTATE_WAITFORREPLY;
 800b882:	4b19      	ldr	r3, [pc, #100]	@ (800b8e8 <app_ros_comm_runner+0x80>)
 800b884:	2200      	movs	r2, #0
 800b886:	701a      	strb	r2, [r3, #0]
    rx_timeOutFlag = 1;
 800b888:	4b18      	ldr	r3, [pc, #96]	@ (800b8ec <app_ros_comm_runner+0x84>)
 800b88a:	2201      	movs	r2, #1
 800b88c:	701a      	strb	r2, [r3, #0]

    motor_cmdvel_ptr_t.v1 = 0.0f;
 800b88e:	4b18      	ldr	r3, [pc, #96]	@ (800b8f0 <app_ros_comm_runner+0x88>)
 800b890:	f04f 0200 	mov.w	r2, #0
 800b894:	601a      	str	r2, [r3, #0]
    motor_cmdvel_ptr_t.v2 = 0.0f;
 800b896:	4b16      	ldr	r3, [pc, #88]	@ (800b8f0 <app_ros_comm_runner+0x88>)
 800b898:	f04f 0200 	mov.w	r2, #0
 800b89c:	605a      	str	r2, [r3, #4]
    motor_cmdvel_ptr_t.v3 = 0.0f;
 800b89e:	4b14      	ldr	r3, [pc, #80]	@ (800b8f0 <app_ros_comm_runner+0x88>)
 800b8a0:	f04f 0200 	mov.w	r2, #0
 800b8a4:	609a      	str	r2, [r3, #8]
    motor_cmdvel_ptr_t.v4 = 0.0f;
 800b8a6:	4b12      	ldr	r3, [pc, #72]	@ (800b8f0 <app_ros_comm_runner+0x88>)
 800b8a8:	f04f 0200 	mov.w	r2, #0
 800b8ac:	60da      	str	r2, [r3, #12]
  }

  switch(comm_fsm){
 800b8ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b8e8 <app_ros_comm_runner+0x80>)
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <app_ros_comm_runner+0x54>
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d00a      	beq.n	800b8d0 <app_ros_comm_runner+0x68>
        comm_fsm = COMMSTATE_WAITFORREPLY;
    }
    break;
  }

}
 800b8ba:	e00f      	b.n	800b8dc <app_ros_comm_runner+0x74>
      commTimeout_millis = uwTick;
 800b8bc:	4b08      	ldr	r3, [pc, #32]	@ (800b8e0 <app_ros_comm_runner+0x78>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a08      	ldr	r2, [pc, #32]	@ (800b8e4 <app_ros_comm_runner+0x7c>)
 800b8c2:	6013      	str	r3, [r2, #0]
      rx_timeOutFlag = 0;
 800b8c4:	4b09      	ldr	r3, [pc, #36]	@ (800b8ec <app_ros_comm_runner+0x84>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	701a      	strb	r2, [r3, #0]
      app_ros_comm_processRX();
 800b8ca:	f000 f813 	bl	800b8f4 <app_ros_comm_processRX>
    break;
 800b8ce:	e005      	b.n	800b8dc <app_ros_comm_runner+0x74>
    	app_ros_comm_txPoll();
 800b8d0:	f000 f862 	bl	800b998 <app_ros_comm_txPoll>
        comm_fsm = COMMSTATE_WAITFORREPLY;
 800b8d4:	4b04      	ldr	r3, [pc, #16]	@ (800b8e8 <app_ros_comm_runner+0x80>)
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	701a      	strb	r2, [r3, #0]
    break;
 800b8da:	bf00      	nop
}
 800b8dc:	bf00      	nop
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	200006b0 	.word	0x200006b0
 800b8e4:	200008dc 	.word	0x200008dc
 800b8e8:	200008e0 	.word	0x200008e0
 800b8ec:	200008e1 	.word	0x200008e1
 800b8f0:	2000089c 	.word	0x2000089c

0800b8f4 <app_ros_comm_processRX>:

void app_ros_comm_processRX(){
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	af00      	add	r7, sp, #0
  if(
  (rbc_Packet_t.rbcHeader[0] != 'R')  ||
 800b8f8:	4b20      	ldr	r3, [pc, #128]	@ (800b97c <app_ros_comm_processRX+0x88>)
 800b8fa:	781b      	ldrb	r3, [r3, #0]
  if(
 800b8fc:	2b52      	cmp	r3, #82	@ 0x52
 800b8fe:	d13a      	bne.n	800b976 <app_ros_comm_processRX+0x82>
  (rbc_Packet_t.rbcHeader[1] != 'B')
 800b900:	4b1e      	ldr	r3, [pc, #120]	@ (800b97c <app_ros_comm_processRX+0x88>)
 800b902:	785b      	ldrb	r3, [r3, #1]
  (rbc_Packet_t.rbcHeader[0] != 'R')  ||
 800b904:	2b42      	cmp	r3, #66	@ 0x42
 800b906:	d136      	bne.n	800b976 <app_ros_comm_processRX+0x82>
  )
    return;

  // Apply header
  rbc_Packet_t.ajbHeader[0] = 'J';
 800b908:	4b1c      	ldr	r3, [pc, #112]	@ (800b97c <app_ros_comm_processRX+0x88>)
 800b90a:	224a      	movs	r2, #74	@ 0x4a
 800b90c:	735a      	strb	r2, [r3, #13]
  rbc_Packet_t.ajbHeader[1] = 'B';
 800b90e:	4b1b      	ldr	r3, [pc, #108]	@ (800b97c <app_ros_comm_processRX+0x88>)
 800b910:	2242      	movs	r2, #66	@ 0x42
 800b912:	739a      	strb	r2, [r3, #14]

  // Apply motor RPM command
  motor_cmdvel_ptr_t.v1  =
    (float)rbc_Packet_t.motorControl.motor1_ctrl;// LF
 800b914:	4b19      	ldr	r3, [pc, #100]	@ (800b97c <app_ros_comm_processRX+0x88>)
 800b916:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b91a:	ee07 3a90 	vmov	s15, r3
 800b91e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  motor_cmdvel_ptr_t.v1  =
 800b922:	4b17      	ldr	r3, [pc, #92]	@ (800b980 <app_ros_comm_processRX+0x8c>)
 800b924:	edc3 7a00 	vstr	s15, [r3]
  motor_cmdvel_ptr_t.v2  =
    (float)rbc_Packet_t.motorControl.motor2_ctrl;// LB
 800b928:	4b14      	ldr	r3, [pc, #80]	@ (800b97c <app_ros_comm_processRX+0x88>)
 800b92a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b92e:	ee07 3a90 	vmov	s15, r3
 800b932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  motor_cmdvel_ptr_t.v2  =
 800b936:	4b12      	ldr	r3, [pc, #72]	@ (800b980 <app_ros_comm_processRX+0x8c>)
 800b938:	edc3 7a01 	vstr	s15, [r3, #4]
  motor_cmdvel_ptr_t.v3  =
    (float)rbc_Packet_t.motorControl.motor3_ctrl;// RB
 800b93c:	4b0f      	ldr	r3, [pc, #60]	@ (800b97c <app_ros_comm_processRX+0x88>)
 800b93e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b942:	ee07 3a90 	vmov	s15, r3
 800b946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  motor_cmdvel_ptr_t.v3  =
 800b94a:	4b0d      	ldr	r3, [pc, #52]	@ (800b980 <app_ros_comm_processRX+0x8c>)
 800b94c:	edc3 7a02 	vstr	s15, [r3, #8]
  motor_cmdvel_ptr_t.v4  =
    (float)rbc_Packet_t.motorControl.motor4_ctrl;// RF
 800b950:	4b0a      	ldr	r3, [pc, #40]	@ (800b97c <app_ros_comm_processRX+0x88>)
 800b952:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800b956:	ee07 3a90 	vmov	s15, r3
 800b95a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  motor_cmdvel_ptr_t.v4  =
 800b95e:	4b08      	ldr	r3, [pc, #32]	@ (800b980 <app_ros_comm_processRX+0x8c>)
 800b960:	edc3 7a03 	vstr	s15, [r3, #12]

  // Reply command
  rbc_Packet_t.cmdDataMCU = 0x00;
 800b964:	4b05      	ldr	r3, [pc, #20]	@ (800b97c <app_ros_comm_processRX+0x88>)
 800b966:	2200      	movs	r2, #0
 800b968:	73da      	strb	r2, [r3, #15]

  // Process PC command
  app_ros_comm_comandProcessor();
 800b96a:	f000 f80d 	bl	800b988 <app_ros_comm_comandProcessor>

  comm_fsm = COMMSTATE_REPLYDATA;
 800b96e:	4b05      	ldr	r3, [pc, #20]	@ (800b984 <app_ros_comm_processRX+0x90>)
 800b970:	2201      	movs	r2, #1
 800b972:	701a      	strb	r2, [r3, #0]
 800b974:	e000      	b.n	800b978 <app_ros_comm_processRX+0x84>
    return;
 800b976:	bf00      	nop
}
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	200008ac 	.word	0x200008ac
 800b980:	2000089c 	.word	0x2000089c
 800b984:	200008e0 	.word	0x200008e0

0800b988 <app_ros_comm_comandProcessor>:

void app_ros_comm_comandProcessor(){
 800b988:	b480      	push	{r7}
 800b98a:	af00      	add	r7, sp, #0
//        // Reply command
//        rbc_Packet_t.cmdDataMCU = 0x00;
//      break;
//  }
//
}
 800b98c:	bf00      	nop
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
	...

0800b998 <app_ros_comm_txPoll>:

void app_ros_comm_txPoll(){
 800b998:	b580      	push	{r7, lr}
 800b99a:	af00      	add	r7, sp, #0
	// Send encoder RPM count
	  rbc_Packet_t.motorFeedBack.motor1_fb  = _RPM[0];                       // LF
 800b99c:	4b2a      	ldr	r3, [pc, #168]	@ (800ba48 <app_ros_comm_txPoll+0xb0>)
 800b99e:	edd3 7a00 	vldr	s15, [r3]
 800b9a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9a6:	ee17 3a90 	vmov	r3, s15
 800b9aa:	b21a      	sxth	r2, r3
 800b9ac:	4b27      	ldr	r3, [pc, #156]	@ (800ba4c <app_ros_comm_txPoll+0xb4>)
 800b9ae:	821a      	strh	r2, [r3, #16]
	  rbc_Packet_t.motorFeedBack.motor2_fb  = _RPM[1];                       // LB
 800b9b0:	4b25      	ldr	r3, [pc, #148]	@ (800ba48 <app_ros_comm_txPoll+0xb0>)
 800b9b2:	edd3 7a01 	vldr	s15, [r3, #4]
 800b9b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9ba:	ee17 3a90 	vmov	r3, s15
 800b9be:	b21a      	sxth	r2, r3
 800b9c0:	4b22      	ldr	r3, [pc, #136]	@ (800ba4c <app_ros_comm_txPoll+0xb4>)
 800b9c2:	825a      	strh	r2, [r3, #18]
	  rbc_Packet_t.motorFeedBack.motor3_fb  = _RPM[2];                       // RB
 800b9c4:	4b20      	ldr	r3, [pc, #128]	@ (800ba48 <app_ros_comm_txPoll+0xb0>)
 800b9c6:	edd3 7a02 	vldr	s15, [r3, #8]
 800b9ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9ce:	ee17 3a90 	vmov	r3, s15
 800b9d2:	b21a      	sxth	r2, r3
 800b9d4:	4b1d      	ldr	r3, [pc, #116]	@ (800ba4c <app_ros_comm_txPoll+0xb4>)
 800b9d6:	829a      	strh	r2, [r3, #20]
	  rbc_Packet_t.motorFeedBack.motor4_fb  = _RPM[3];                       // RF
 800b9d8:	4b1b      	ldr	r3, [pc, #108]	@ (800ba48 <app_ros_comm_txPoll+0xb0>)
 800b9da:	edd3 7a03 	vldr	s15, [r3, #12]
 800b9de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9e2:	ee17 3a90 	vmov	r3, s15
 800b9e6:	b21a      	sxth	r2, r3
 800b9e8:	4b18      	ldr	r3, [pc, #96]	@ (800ba4c <app_ros_comm_txPoll+0xb4>)
 800b9ea:	82da      	strh	r2, [r3, #22]

	// Send gyro data
	  rbc_Packet_t.gyro_x_raw = imu_data.gx;
 800b9ec:	4b18      	ldr	r3, [pc, #96]	@ (800ba50 <app_ros_comm_txPoll+0xb8>)
 800b9ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 800b9f2:	4b16      	ldr	r3, [pc, #88]	@ (800ba4c <app_ros_comm_txPoll+0xb4>)
 800b9f4:	835a      	strh	r2, [r3, #26]
	  rbc_Packet_t.gyro_y_raw = imu_data.gy;
 800b9f6:	4b16      	ldr	r3, [pc, #88]	@ (800ba50 <app_ros_comm_txPoll+0xb8>)
 800b9f8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b9fc:	4b13      	ldr	r3, [pc, #76]	@ (800ba4c <app_ros_comm_txPoll+0xb4>)
 800b9fe:	839a      	strh	r2, [r3, #28]
	  rbc_Packet_t.gyro_z_raw = imu_data.gz;
 800ba00:	4b13      	ldr	r3, [pc, #76]	@ (800ba50 <app_ros_comm_txPoll+0xb8>)
 800ba02:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800ba06:	4b11      	ldr	r3, [pc, #68]	@ (800ba4c <app_ros_comm_txPoll+0xb4>)
 800ba08:	83da      	strh	r2, [r3, #30]
		// Send mag data
//	  rbc_Packet_t.mag_x_raw = imu_acmag_data_ptr_t->mag_x;
//	  rbc_Packet_t.mag_y_raw = imu_acmag_data_ptr_t->mag_y;
//	  rbc_Packet_t.mag_z_raw = imu_acmag_data_ptr_t->mag_z;

	  rbc_Packet_t.mag_x_raw = 0;
 800ba0a:	4b10      	ldr	r3, [pc, #64]	@ (800ba4c <app_ros_comm_txPoll+0xb4>)
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	841a      	strh	r2, [r3, #32]
	  rbc_Packet_t.mag_y_raw = 0;
 800ba10:	4b0e      	ldr	r3, [pc, #56]	@ (800ba4c <app_ros_comm_txPoll+0xb4>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	845a      	strh	r2, [r3, #34]	@ 0x22
	  rbc_Packet_t.mag_z_raw = 0;
 800ba16:	4b0d      	ldr	r3, [pc, #52]	@ (800ba4c <app_ros_comm_txPoll+0xb4>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	849a      	strh	r2, [r3, #36]	@ 0x24

		// Send accel data
	  rbc_Packet_t.acc_x_raw = imu_data.Ax;
 800ba1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ba50 <app_ros_comm_txPoll+0xb8>)
 800ba1e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800ba22:	4b0a      	ldr	r3, [pc, #40]	@ (800ba4c <app_ros_comm_txPoll+0xb4>)
 800ba24:	84da      	strh	r2, [r3, #38]	@ 0x26
	  rbc_Packet_t.acc_y_raw = imu_data.Ay;
 800ba26:	4b0a      	ldr	r3, [pc, #40]	@ (800ba50 <app_ros_comm_txPoll+0xb8>)
 800ba28:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800ba2c:	4b07      	ldr	r3, [pc, #28]	@ (800ba4c <app_ros_comm_txPoll+0xb4>)
 800ba2e:	851a      	strh	r2, [r3, #40]	@ 0x28
	  rbc_Packet_t.acc_z_raw = imu_data.Az;
 800ba30:	4b07      	ldr	r3, [pc, #28]	@ (800ba50 <app_ros_comm_txPoll+0xb8>)
 800ba32:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800ba36:	4b05      	ldr	r3, [pc, #20]	@ (800ba4c <app_ros_comm_txPoll+0xb4>)
 800ba38:	855a      	strh	r2, [r3, #42]	@ 0x2a


	  CDC_Transmit_FS((uint8_t *)(&rbc_Packet_t.ajbHeader), ROS_COMM_TX_SIZE);
 800ba3a:	2120      	movs	r1, #32
 800ba3c:	4805      	ldr	r0, [pc, #20]	@ (800ba54 <app_ros_comm_txPoll+0xbc>)
 800ba3e:	f002 f8b3 	bl	800dba8 <CDC_Transmit_FS>

}
 800ba42:	bf00      	nop
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	20000720 	.word	0x20000720
 800ba4c:	200008ac 	.word	0x200008ac
 800ba50:	20000878 	.word	0x20000878
 800ba54:	200008b9 	.word	0x200008b9

0800ba58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	460b      	mov	r3, r1
 800ba62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ba64:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ba68:	f002 fcc0 	bl	800e3ec <USBD_static_malloc>
 800ba6c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d109      	bne.n	800ba88 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	32b0      	adds	r2, #176	@ 0xb0
 800ba7e:	2100      	movs	r1, #0
 800ba80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ba84:	2302      	movs	r3, #2
 800ba86:	e0d4      	b.n	800bc32 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ba88:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	68f8      	ldr	r0, [r7, #12]
 800ba90:	f002 fcf0 	bl	800e474 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	32b0      	adds	r2, #176	@ 0xb0
 800ba9e:	68f9      	ldr	r1, [r7, #12]
 800baa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	32b0      	adds	r2, #176	@ 0xb0
 800baae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	7c1b      	ldrb	r3, [r3, #16]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d138      	bne.n	800bb32 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bac0:	4b5e      	ldr	r3, [pc, #376]	@ (800bc3c <USBD_CDC_Init+0x1e4>)
 800bac2:	7819      	ldrb	r1, [r3, #0]
 800bac4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bac8:	2202      	movs	r2, #2
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f002 fb6b 	bl	800e1a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bad0:	4b5a      	ldr	r3, [pc, #360]	@ (800bc3c <USBD_CDC_Init+0x1e4>)
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	f003 020f 	and.w	r2, r3, #15
 800bad8:	6879      	ldr	r1, [r7, #4]
 800bada:	4613      	mov	r3, r2
 800badc:	009b      	lsls	r3, r3, #2
 800bade:	4413      	add	r3, r2
 800bae0:	009b      	lsls	r3, r3, #2
 800bae2:	440b      	add	r3, r1
 800bae4:	3324      	adds	r3, #36	@ 0x24
 800bae6:	2201      	movs	r2, #1
 800bae8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800baea:	4b55      	ldr	r3, [pc, #340]	@ (800bc40 <USBD_CDC_Init+0x1e8>)
 800baec:	7819      	ldrb	r1, [r3, #0]
 800baee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800baf2:	2202      	movs	r2, #2
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f002 fb56 	bl	800e1a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bafa:	4b51      	ldr	r3, [pc, #324]	@ (800bc40 <USBD_CDC_Init+0x1e8>)
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	f003 020f 	and.w	r2, r3, #15
 800bb02:	6879      	ldr	r1, [r7, #4]
 800bb04:	4613      	mov	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4413      	add	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	440b      	add	r3, r1
 800bb0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb12:	2201      	movs	r2, #1
 800bb14:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bb16:	4b4b      	ldr	r3, [pc, #300]	@ (800bc44 <USBD_CDC_Init+0x1ec>)
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	f003 020f 	and.w	r2, r3, #15
 800bb1e:	6879      	ldr	r1, [r7, #4]
 800bb20:	4613      	mov	r3, r2
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	440b      	add	r3, r1
 800bb2a:	3326      	adds	r3, #38	@ 0x26
 800bb2c:	2210      	movs	r2, #16
 800bb2e:	801a      	strh	r2, [r3, #0]
 800bb30:	e035      	b.n	800bb9e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bb32:	4b42      	ldr	r3, [pc, #264]	@ (800bc3c <USBD_CDC_Init+0x1e4>)
 800bb34:	7819      	ldrb	r1, [r3, #0]
 800bb36:	2340      	movs	r3, #64	@ 0x40
 800bb38:	2202      	movs	r2, #2
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f002 fb33 	bl	800e1a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bb40:	4b3e      	ldr	r3, [pc, #248]	@ (800bc3c <USBD_CDC_Init+0x1e4>)
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	f003 020f 	and.w	r2, r3, #15
 800bb48:	6879      	ldr	r1, [r7, #4]
 800bb4a:	4613      	mov	r3, r2
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4413      	add	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	440b      	add	r3, r1
 800bb54:	3324      	adds	r3, #36	@ 0x24
 800bb56:	2201      	movs	r2, #1
 800bb58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bb5a:	4b39      	ldr	r3, [pc, #228]	@ (800bc40 <USBD_CDC_Init+0x1e8>)
 800bb5c:	7819      	ldrb	r1, [r3, #0]
 800bb5e:	2340      	movs	r3, #64	@ 0x40
 800bb60:	2202      	movs	r2, #2
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f002 fb1f 	bl	800e1a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bb68:	4b35      	ldr	r3, [pc, #212]	@ (800bc40 <USBD_CDC_Init+0x1e8>)
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	f003 020f 	and.w	r2, r3, #15
 800bb70:	6879      	ldr	r1, [r7, #4]
 800bb72:	4613      	mov	r3, r2
 800bb74:	009b      	lsls	r3, r3, #2
 800bb76:	4413      	add	r3, r2
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	440b      	add	r3, r1
 800bb7c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bb80:	2201      	movs	r2, #1
 800bb82:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bb84:	4b2f      	ldr	r3, [pc, #188]	@ (800bc44 <USBD_CDC_Init+0x1ec>)
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	f003 020f 	and.w	r2, r3, #15
 800bb8c:	6879      	ldr	r1, [r7, #4]
 800bb8e:	4613      	mov	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4413      	add	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	440b      	add	r3, r1
 800bb98:	3326      	adds	r3, #38	@ 0x26
 800bb9a:	2210      	movs	r2, #16
 800bb9c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bb9e:	4b29      	ldr	r3, [pc, #164]	@ (800bc44 <USBD_CDC_Init+0x1ec>)
 800bba0:	7819      	ldrb	r1, [r3, #0]
 800bba2:	2308      	movs	r3, #8
 800bba4:	2203      	movs	r2, #3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f002 fafd 	bl	800e1a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bbac:	4b25      	ldr	r3, [pc, #148]	@ (800bc44 <USBD_CDC_Init+0x1ec>)
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	f003 020f 	and.w	r2, r3, #15
 800bbb4:	6879      	ldr	r1, [r7, #4]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	4413      	add	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	440b      	add	r3, r1
 800bbc0:	3324      	adds	r3, #36	@ 0x24
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	33b0      	adds	r3, #176	@ 0xb0
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	2200      	movs	r2, #0
 800bbee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	e018      	b.n	800bc32 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	7c1b      	ldrb	r3, [r3, #16]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10a      	bne.n	800bc1e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bc08:	4b0d      	ldr	r3, [pc, #52]	@ (800bc40 <USBD_CDC_Init+0x1e8>)
 800bc0a:	7819      	ldrb	r1, [r3, #0]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bc12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f002 fbb4 	bl	800e384 <USBD_LL_PrepareReceive>
 800bc1c:	e008      	b.n	800bc30 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bc1e:	4b08      	ldr	r3, [pc, #32]	@ (800bc40 <USBD_CDC_Init+0x1e8>)
 800bc20:	7819      	ldrb	r1, [r3, #0]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bc28:	2340      	movs	r3, #64	@ 0x40
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f002 fbaa 	bl	800e384 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	2000009b 	.word	0x2000009b
 800bc40:	2000009c 	.word	0x2000009c
 800bc44:	2000009d 	.word	0x2000009d

0800bc48 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bc54:	4b3a      	ldr	r3, [pc, #232]	@ (800bd40 <USBD_CDC_DeInit+0xf8>)
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f002 fac9 	bl	800e1f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bc60:	4b37      	ldr	r3, [pc, #220]	@ (800bd40 <USBD_CDC_DeInit+0xf8>)
 800bc62:	781b      	ldrb	r3, [r3, #0]
 800bc64:	f003 020f 	and.w	r2, r3, #15
 800bc68:	6879      	ldr	r1, [r7, #4]
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	4413      	add	r3, r2
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	440b      	add	r3, r1
 800bc74:	3324      	adds	r3, #36	@ 0x24
 800bc76:	2200      	movs	r2, #0
 800bc78:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bc7a:	4b32      	ldr	r3, [pc, #200]	@ (800bd44 <USBD_CDC_DeInit+0xfc>)
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	4619      	mov	r1, r3
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f002 fab6 	bl	800e1f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bc86:	4b2f      	ldr	r3, [pc, #188]	@ (800bd44 <USBD_CDC_DeInit+0xfc>)
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	f003 020f 	and.w	r2, r3, #15
 800bc8e:	6879      	ldr	r1, [r7, #4]
 800bc90:	4613      	mov	r3, r2
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	4413      	add	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	440b      	add	r3, r1
 800bc9a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc9e:	2200      	movs	r2, #0
 800bca0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bca2:	4b29      	ldr	r3, [pc, #164]	@ (800bd48 <USBD_CDC_DeInit+0x100>)
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	4619      	mov	r1, r3
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f002 faa2 	bl	800e1f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bcae:	4b26      	ldr	r3, [pc, #152]	@ (800bd48 <USBD_CDC_DeInit+0x100>)
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	f003 020f 	and.w	r2, r3, #15
 800bcb6:	6879      	ldr	r1, [r7, #4]
 800bcb8:	4613      	mov	r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	4413      	add	r3, r2
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	440b      	add	r3, r1
 800bcc2:	3324      	adds	r3, #36	@ 0x24
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bcc8:	4b1f      	ldr	r3, [pc, #124]	@ (800bd48 <USBD_CDC_DeInit+0x100>)
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	f003 020f 	and.w	r2, r3, #15
 800bcd0:	6879      	ldr	r1, [r7, #4]
 800bcd2:	4613      	mov	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	4413      	add	r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	440b      	add	r3, r1
 800bcdc:	3326      	adds	r3, #38	@ 0x26
 800bcde:	2200      	movs	r2, #0
 800bce0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	32b0      	adds	r2, #176	@ 0xb0
 800bcec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d01f      	beq.n	800bd34 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	33b0      	adds	r3, #176	@ 0xb0
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	4413      	add	r3, r2
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	32b0      	adds	r2, #176	@ 0xb0
 800bd12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd16:	4618      	mov	r0, r3
 800bd18:	f002 fb76 	bl	800e408 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	32b0      	adds	r2, #176	@ 0xb0
 800bd26:	2100      	movs	r1, #0
 800bd28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	2000009b 	.word	0x2000009b
 800bd44:	2000009c 	.word	0x2000009c
 800bd48:	2000009d 	.word	0x2000009d

0800bd4c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	32b0      	adds	r2, #176	@ 0xb0
 800bd60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd64:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bd66:	2300      	movs	r3, #0
 800bd68:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d101      	bne.n	800bd7c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bd78:	2303      	movs	r3, #3
 800bd7a:	e0bf      	b.n	800befc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d050      	beq.n	800be2a <USBD_CDC_Setup+0xde>
 800bd88:	2b20      	cmp	r3, #32
 800bd8a:	f040 80af 	bne.w	800beec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	88db      	ldrh	r3, [r3, #6]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d03a      	beq.n	800be0c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	b25b      	sxtb	r3, r3
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	da1b      	bge.n	800bdd8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	33b0      	adds	r3, #176	@ 0xb0
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	4413      	add	r3, r2
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bdb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	88d2      	ldrh	r2, [r2, #6]
 800bdbc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	88db      	ldrh	r3, [r3, #6]
 800bdc2:	2b07      	cmp	r3, #7
 800bdc4:	bf28      	it	cs
 800bdc6:	2307      	movcs	r3, #7
 800bdc8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	89fa      	ldrh	r2, [r7, #14]
 800bdce:	4619      	mov	r1, r3
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f001 fd93 	bl	800d8fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bdd6:	e090      	b.n	800befa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	785a      	ldrb	r2, [r3, #1]
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	88db      	ldrh	r3, [r3, #6]
 800bde6:	2b3f      	cmp	r3, #63	@ 0x3f
 800bde8:	d803      	bhi.n	800bdf2 <USBD_CDC_Setup+0xa6>
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	88db      	ldrh	r3, [r3, #6]
 800bdee:	b2da      	uxtb	r2, r3
 800bdf0:	e000      	b.n	800bdf4 <USBD_CDC_Setup+0xa8>
 800bdf2:	2240      	movs	r2, #64	@ 0x40
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bdfa:	6939      	ldr	r1, [r7, #16]
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800be02:	461a      	mov	r2, r3
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f001 fda5 	bl	800d954 <USBD_CtlPrepareRx>
      break;
 800be0a:	e076      	b.n	800befa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	33b0      	adds	r3, #176	@ 0xb0
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	4413      	add	r3, r2
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	683a      	ldr	r2, [r7, #0]
 800be20:	7850      	ldrb	r0, [r2, #1]
 800be22:	2200      	movs	r2, #0
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	4798      	blx	r3
      break;
 800be28:	e067      	b.n	800befa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	785b      	ldrb	r3, [r3, #1]
 800be2e:	2b0b      	cmp	r3, #11
 800be30:	d851      	bhi.n	800bed6 <USBD_CDC_Setup+0x18a>
 800be32:	a201      	add	r2, pc, #4	@ (adr r2, 800be38 <USBD_CDC_Setup+0xec>)
 800be34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be38:	0800be69 	.word	0x0800be69
 800be3c:	0800bee5 	.word	0x0800bee5
 800be40:	0800bed7 	.word	0x0800bed7
 800be44:	0800bed7 	.word	0x0800bed7
 800be48:	0800bed7 	.word	0x0800bed7
 800be4c:	0800bed7 	.word	0x0800bed7
 800be50:	0800bed7 	.word	0x0800bed7
 800be54:	0800bed7 	.word	0x0800bed7
 800be58:	0800bed7 	.word	0x0800bed7
 800be5c:	0800bed7 	.word	0x0800bed7
 800be60:	0800be93 	.word	0x0800be93
 800be64:	0800bebd 	.word	0x0800bebd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be6e:	b2db      	uxtb	r3, r3
 800be70:	2b03      	cmp	r3, #3
 800be72:	d107      	bne.n	800be84 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800be74:	f107 030a 	add.w	r3, r7, #10
 800be78:	2202      	movs	r2, #2
 800be7a:	4619      	mov	r1, r3
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f001 fd3d 	bl	800d8fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be82:	e032      	b.n	800beea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800be84:	6839      	ldr	r1, [r7, #0]
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f001 fcbb 	bl	800d802 <USBD_CtlError>
            ret = USBD_FAIL;
 800be8c:	2303      	movs	r3, #3
 800be8e:	75fb      	strb	r3, [r7, #23]
          break;
 800be90:	e02b      	b.n	800beea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b03      	cmp	r3, #3
 800be9c:	d107      	bne.n	800beae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800be9e:	f107 030d 	add.w	r3, r7, #13
 800bea2:	2201      	movs	r2, #1
 800bea4:	4619      	mov	r1, r3
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f001 fd28 	bl	800d8fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800beac:	e01d      	b.n	800beea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800beae:	6839      	ldr	r1, [r7, #0]
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f001 fca6 	bl	800d802 <USBD_CtlError>
            ret = USBD_FAIL;
 800beb6:	2303      	movs	r3, #3
 800beb8:	75fb      	strb	r3, [r7, #23]
          break;
 800beba:	e016      	b.n	800beea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	2b03      	cmp	r3, #3
 800bec6:	d00f      	beq.n	800bee8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f001 fc99 	bl	800d802 <USBD_CtlError>
            ret = USBD_FAIL;
 800bed0:	2303      	movs	r3, #3
 800bed2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bed4:	e008      	b.n	800bee8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f001 fc92 	bl	800d802 <USBD_CtlError>
          ret = USBD_FAIL;
 800bede:	2303      	movs	r3, #3
 800bee0:	75fb      	strb	r3, [r7, #23]
          break;
 800bee2:	e002      	b.n	800beea <USBD_CDC_Setup+0x19e>
          break;
 800bee4:	bf00      	nop
 800bee6:	e008      	b.n	800befa <USBD_CDC_Setup+0x1ae>
          break;
 800bee8:	bf00      	nop
      }
      break;
 800beea:	e006      	b.n	800befa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800beec:	6839      	ldr	r1, [r7, #0]
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f001 fc87 	bl	800d802 <USBD_CtlError>
      ret = USBD_FAIL;
 800bef4:	2303      	movs	r3, #3
 800bef6:	75fb      	strb	r3, [r7, #23]
      break;
 800bef8:	bf00      	nop
  }

  return (uint8_t)ret;
 800befa:	7dfb      	ldrb	r3, [r7, #23]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3718      	adds	r7, #24
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	32b0      	adds	r2, #176	@ 0xb0
 800bf22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d101      	bne.n	800bf2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	e065      	b.n	800bffa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	32b0      	adds	r2, #176	@ 0xb0
 800bf38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bf3e:	78fb      	ldrb	r3, [r7, #3]
 800bf40:	f003 020f 	and.w	r2, r3, #15
 800bf44:	6879      	ldr	r1, [r7, #4]
 800bf46:	4613      	mov	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	4413      	add	r3, r2
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	440b      	add	r3, r1
 800bf50:	3318      	adds	r3, #24
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d02f      	beq.n	800bfb8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bf58:	78fb      	ldrb	r3, [r7, #3]
 800bf5a:	f003 020f 	and.w	r2, r3, #15
 800bf5e:	6879      	ldr	r1, [r7, #4]
 800bf60:	4613      	mov	r3, r2
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	4413      	add	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	440b      	add	r3, r1
 800bf6a:	3318      	adds	r3, #24
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	78fb      	ldrb	r3, [r7, #3]
 800bf70:	f003 010f 	and.w	r1, r3, #15
 800bf74:	68f8      	ldr	r0, [r7, #12]
 800bf76:	460b      	mov	r3, r1
 800bf78:	00db      	lsls	r3, r3, #3
 800bf7a:	440b      	add	r3, r1
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	4403      	add	r3, r0
 800bf80:	331c      	adds	r3, #28
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	fbb2 f1f3 	udiv	r1, r2, r3
 800bf88:	fb01 f303 	mul.w	r3, r1, r3
 800bf8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d112      	bne.n	800bfb8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bf92:	78fb      	ldrb	r3, [r7, #3]
 800bf94:	f003 020f 	and.w	r2, r3, #15
 800bf98:	6879      	ldr	r1, [r7, #4]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	440b      	add	r3, r1
 800bfa4:	3318      	adds	r3, #24
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bfaa:	78f9      	ldrb	r1, [r7, #3]
 800bfac:	2300      	movs	r3, #0
 800bfae:	2200      	movs	r2, #0
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f002 f9c6 	bl	800e342 <USBD_LL_Transmit>
 800bfb6:	e01f      	b.n	800bff8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	33b0      	adds	r3, #176	@ 0xb0
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d010      	beq.n	800bff8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	33b0      	adds	r3, #176	@ 0xb0
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	4413      	add	r3, r2
 800bfe4:	685b      	ldr	r3, [r3, #4]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bfee:	68ba      	ldr	r2, [r7, #8]
 800bff0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bff4:	78fa      	ldrb	r2, [r7, #3]
 800bff6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bff8:	2300      	movs	r3, #0
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}

0800c002 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c002:	b580      	push	{r7, lr}
 800c004:	b084      	sub	sp, #16
 800c006:	af00      	add	r7, sp, #0
 800c008:	6078      	str	r0, [r7, #4]
 800c00a:	460b      	mov	r3, r1
 800c00c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	32b0      	adds	r2, #176	@ 0xb0
 800c018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c01c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	32b0      	adds	r2, #176	@ 0xb0
 800c028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d101      	bne.n	800c034 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c030:	2303      	movs	r3, #3
 800c032:	e01a      	b.n	800c06a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c034:	78fb      	ldrb	r3, [r7, #3]
 800c036:	4619      	mov	r1, r3
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f002 f9c4 	bl	800e3c6 <USBD_LL_GetRxDataSize>
 800c03e:	4602      	mov	r2, r0
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c04c:	687a      	ldr	r2, [r7, #4]
 800c04e:	33b0      	adds	r3, #176	@ 0xb0
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	4413      	add	r3, r2
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	68fa      	ldr	r2, [r7, #12]
 800c05a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c064:	4611      	mov	r1, r2
 800c066:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c068:	2300      	movs	r3, #0
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}

0800c072 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c072:	b580      	push	{r7, lr}
 800c074:	b084      	sub	sp, #16
 800c076:	af00      	add	r7, sp, #0
 800c078:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	32b0      	adds	r2, #176	@ 0xb0
 800c084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c088:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d101      	bne.n	800c094 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c090:	2303      	movs	r3, #3
 800c092:	e024      	b.n	800c0de <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	33b0      	adds	r3, #176	@ 0xb0
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4413      	add	r3, r2
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d019      	beq.n	800c0dc <USBD_CDC_EP0_RxReady+0x6a>
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c0ae:	2bff      	cmp	r3, #255	@ 0xff
 800c0b0:	d014      	beq.n	800c0dc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	33b0      	adds	r3, #176	@ 0xb0
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4413      	add	r3, r2
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c0ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c0d2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	22ff      	movs	r2, #255	@ 0xff
 800c0d8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3710      	adds	r7, #16
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
	...

0800c0e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b086      	sub	sp, #24
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c0f0:	2182      	movs	r1, #130	@ 0x82
 800c0f2:	4818      	ldr	r0, [pc, #96]	@ (800c154 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c0f4:	f000 fd4f 	bl	800cb96 <USBD_GetEpDesc>
 800c0f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c0fa:	2101      	movs	r1, #1
 800c0fc:	4815      	ldr	r0, [pc, #84]	@ (800c154 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c0fe:	f000 fd4a 	bl	800cb96 <USBD_GetEpDesc>
 800c102:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c104:	2181      	movs	r1, #129	@ 0x81
 800c106:	4813      	ldr	r0, [pc, #76]	@ (800c154 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c108:	f000 fd45 	bl	800cb96 <USBD_GetEpDesc>
 800c10c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d002      	beq.n	800c11a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	2210      	movs	r2, #16
 800c118:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d006      	beq.n	800c12e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	2200      	movs	r2, #0
 800c124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c128:	711a      	strb	r2, [r3, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d006      	beq.n	800c142 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c13c:	711a      	strb	r2, [r3, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	2243      	movs	r2, #67	@ 0x43
 800c146:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c148:	4b02      	ldr	r3, [pc, #8]	@ (800c154 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3718      	adds	r7, #24
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}
 800c152:	bf00      	nop
 800c154:	20000058 	.word	0x20000058

0800c158 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b086      	sub	sp, #24
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c160:	2182      	movs	r1, #130	@ 0x82
 800c162:	4818      	ldr	r0, [pc, #96]	@ (800c1c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c164:	f000 fd17 	bl	800cb96 <USBD_GetEpDesc>
 800c168:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c16a:	2101      	movs	r1, #1
 800c16c:	4815      	ldr	r0, [pc, #84]	@ (800c1c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c16e:	f000 fd12 	bl	800cb96 <USBD_GetEpDesc>
 800c172:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c174:	2181      	movs	r1, #129	@ 0x81
 800c176:	4813      	ldr	r0, [pc, #76]	@ (800c1c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c178:	f000 fd0d 	bl	800cb96 <USBD_GetEpDesc>
 800c17c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d002      	beq.n	800c18a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	2210      	movs	r2, #16
 800c188:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d006      	beq.n	800c19e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	2200      	movs	r2, #0
 800c194:	711a      	strb	r2, [r3, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	f042 0202 	orr.w	r2, r2, #2
 800c19c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d006      	beq.n	800c1b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	711a      	strb	r2, [r3, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	f042 0202 	orr.w	r2, r2, #2
 800c1b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2243      	movs	r2, #67	@ 0x43
 800c1b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c1b8:	4b02      	ldr	r3, [pc, #8]	@ (800c1c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	20000058 	.word	0x20000058

0800c1c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c1d0:	2182      	movs	r1, #130	@ 0x82
 800c1d2:	4818      	ldr	r0, [pc, #96]	@ (800c234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c1d4:	f000 fcdf 	bl	800cb96 <USBD_GetEpDesc>
 800c1d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c1da:	2101      	movs	r1, #1
 800c1dc:	4815      	ldr	r0, [pc, #84]	@ (800c234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c1de:	f000 fcda 	bl	800cb96 <USBD_GetEpDesc>
 800c1e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c1e4:	2181      	movs	r1, #129	@ 0x81
 800c1e6:	4813      	ldr	r0, [pc, #76]	@ (800c234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c1e8:	f000 fcd5 	bl	800cb96 <USBD_GetEpDesc>
 800c1ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d002      	beq.n	800c1fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	2210      	movs	r2, #16
 800c1f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d006      	beq.n	800c20e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	2200      	movs	r2, #0
 800c204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c208:	711a      	strb	r2, [r3, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d006      	beq.n	800c222 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2200      	movs	r2, #0
 800c218:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c21c:	711a      	strb	r2, [r3, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2243      	movs	r2, #67	@ 0x43
 800c226:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c228:	4b02      	ldr	r3, [pc, #8]	@ (800c234 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3718      	adds	r7, #24
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	20000058 	.word	0x20000058

0800c238 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	220a      	movs	r2, #10
 800c244:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c246:	4b03      	ldr	r3, [pc, #12]	@ (800c254 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c248:	4618      	mov	r0, r3
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr
 800c254:	20000014 	.word	0x20000014

0800c258 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c258:	b480      	push	{r7}
 800c25a:	b083      	sub	sp, #12
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c268:	2303      	movs	r3, #3
 800c26a:	e009      	b.n	800c280 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	33b0      	adds	r3, #176	@ 0xb0
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	4413      	add	r3, r2
 800c27a:	683a      	ldr	r2, [r7, #0]
 800c27c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	370c      	adds	r7, #12
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b087      	sub	sp, #28
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	32b0      	adds	r2, #176	@ 0xb0
 800c2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c2ae:	2303      	movs	r3, #3
 800c2b0:	e008      	b.n	800c2c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c2c2:	2300      	movs	r3, #0
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	371c      	adds	r7, #28
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr

0800c2d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	32b0      	adds	r2, #176	@ 0xb0
 800c2e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d101      	bne.n	800c2f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e004      	b.n	800c2fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	683a      	ldr	r2, [r7, #0]
 800c2f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c2fc:	2300      	movs	r3, #0
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3714      	adds	r7, #20
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
	...

0800c30c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	32b0      	adds	r2, #176	@ 0xb0
 800c31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c322:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c324:	2301      	movs	r3, #1
 800c326:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c32e:	2303      	movs	r3, #3
 800c330:	e025      	b.n	800c37e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d11f      	bne.n	800c37c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2201      	movs	r2, #1
 800c340:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c344:	4b10      	ldr	r3, [pc, #64]	@ (800c388 <USBD_CDC_TransmitPacket+0x7c>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	f003 020f 	and.w	r2, r3, #15
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c352:	6878      	ldr	r0, [r7, #4]
 800c354:	4613      	mov	r3, r2
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	4413      	add	r3, r2
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	4403      	add	r3, r0
 800c35e:	3318      	adds	r3, #24
 800c360:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c362:	4b09      	ldr	r3, [pc, #36]	@ (800c388 <USBD_CDC_TransmitPacket+0x7c>)
 800c364:	7819      	ldrb	r1, [r3, #0]
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f001 ffe5 	bl	800e342 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c378:	2300      	movs	r3, #0
 800c37a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3710      	adds	r7, #16
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	2000009b 	.word	0x2000009b

0800c38c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	32b0      	adds	r2, #176	@ 0xb0
 800c39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3a2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	32b0      	adds	r2, #176	@ 0xb0
 800c3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d101      	bne.n	800c3ba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c3b6:	2303      	movs	r3, #3
 800c3b8:	e018      	b.n	800c3ec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	7c1b      	ldrb	r3, [r3, #16]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10a      	bne.n	800c3d8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c3c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c3f4 <USBD_CDC_ReceivePacket+0x68>)
 800c3c4:	7819      	ldrb	r1, [r3, #0]
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c3cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f001 ffd7 	bl	800e384 <USBD_LL_PrepareReceive>
 800c3d6:	e008      	b.n	800c3ea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c3d8:	4b06      	ldr	r3, [pc, #24]	@ (800c3f4 <USBD_CDC_ReceivePacket+0x68>)
 800c3da:	7819      	ldrb	r1, [r3, #0]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c3e2:	2340      	movs	r3, #64	@ 0x40
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f001 ffcd 	bl	800e384 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	2000009c 	.word	0x2000009c

0800c3f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	4613      	mov	r3, r2
 800c404:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d101      	bne.n	800c410 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c40c:	2303      	movs	r3, #3
 800c40e:	e01f      	b.n	800c450 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2200      	movs	r2, #0
 800c414:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2200      	movs	r2, #0
 800c41c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2200      	movs	r2, #0
 800c424:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d003      	beq.n	800c436 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2201      	movs	r2, #1
 800c43a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	79fa      	ldrb	r2, [r7, #7]
 800c442:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f001 fe47 	bl	800e0d8 <USBD_LL_Init>
 800c44a:	4603      	mov	r3, r0
 800c44c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c44e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c450:	4618      	mov	r0, r3
 800c452:	3718      	adds	r7, #24
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c462:	2300      	movs	r3, #0
 800c464:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d101      	bne.n	800c470 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c46c:	2303      	movs	r3, #3
 800c46e:	e025      	b.n	800c4bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	683a      	ldr	r2, [r7, #0]
 800c474:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	32ae      	adds	r2, #174	@ 0xae
 800c482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d00f      	beq.n	800c4ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	32ae      	adds	r2, #174	@ 0xae
 800c496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c49c:	f107 020e 	add.w	r2, r7, #14
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	4798      	blx	r3
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c4b2:	1c5a      	adds	r2, r3, #1
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c4ba:	2300      	movs	r3, #0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f001 fe4f 	bl	800e170 <USBD_LL_Start>
 800c4d2:	4603      	mov	r3, r0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3708      	adds	r7, #8
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c4e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	370c      	adds	r7, #12
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr

0800c4f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b084      	sub	sp, #16
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4fe:	2300      	movs	r3, #0
 800c500:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d009      	beq.n	800c520 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	78fa      	ldrb	r2, [r7, #3]
 800c516:	4611      	mov	r1, r2
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	4798      	blx	r3
 800c51c:	4603      	mov	r3, r0
 800c51e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c520:	7bfb      	ldrb	r3, [r7, #15]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b084      	sub	sp, #16
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
 800c532:	460b      	mov	r3, r1
 800c534:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c536:	2300      	movs	r3, #0
 800c538:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	78fa      	ldrb	r2, [r7, #3]
 800c544:	4611      	mov	r1, r2
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	4798      	blx	r3
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d001      	beq.n	800c554 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c550:	2303      	movs	r3, #3
 800c552:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c554:	7bfb      	ldrb	r3, [r7, #15]
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}

0800c55e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c55e:	b580      	push	{r7, lr}
 800c560:	b084      	sub	sp, #16
 800c562:	af00      	add	r7, sp, #0
 800c564:	6078      	str	r0, [r7, #4]
 800c566:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c56e:	6839      	ldr	r1, [r7, #0]
 800c570:	4618      	mov	r0, r3
 800c572:	f001 f90c 	bl	800d78e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2201      	movs	r2, #1
 800c57a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c584:	461a      	mov	r2, r3
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c592:	f003 031f 	and.w	r3, r3, #31
 800c596:	2b02      	cmp	r3, #2
 800c598:	d01a      	beq.n	800c5d0 <USBD_LL_SetupStage+0x72>
 800c59a:	2b02      	cmp	r3, #2
 800c59c:	d822      	bhi.n	800c5e4 <USBD_LL_SetupStage+0x86>
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d002      	beq.n	800c5a8 <USBD_LL_SetupStage+0x4a>
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	d00a      	beq.n	800c5bc <USBD_LL_SetupStage+0x5e>
 800c5a6:	e01d      	b.n	800c5e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c5ae:	4619      	mov	r1, r3
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 fb63 	bl	800cc7c <USBD_StdDevReq>
 800c5b6:	4603      	mov	r3, r0
 800c5b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c5ba:	e020      	b.n	800c5fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c5c2:	4619      	mov	r1, r3
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f000 fbcb 	bl	800cd60 <USBD_StdItfReq>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	73fb      	strb	r3, [r7, #15]
      break;
 800c5ce:	e016      	b.n	800c5fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 fc2d 	bl	800ce38 <USBD_StdEPReq>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c5e2:	e00c      	b.n	800c5fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c5ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f001 fe1c 	bl	800e230 <USBD_LL_StallEP>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c5fc:	bf00      	nop
  }

  return ret;
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c600:	4618      	mov	r0, r3
 800c602:	3710      	adds	r7, #16
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}

0800c608 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b086      	sub	sp, #24
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	60f8      	str	r0, [r7, #12]
 800c610:	460b      	mov	r3, r1
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c616:	2300      	movs	r3, #0
 800c618:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c61a:	7afb      	ldrb	r3, [r7, #11]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d16e      	bne.n	800c6fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c626:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c62e:	2b03      	cmp	r3, #3
 800c630:	f040 8098 	bne.w	800c764 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	689a      	ldr	r2, [r3, #8]
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	68db      	ldr	r3, [r3, #12]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d913      	bls.n	800c668 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	689a      	ldr	r2, [r3, #8]
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	1ad2      	subs	r2, r2, r3
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	68da      	ldr	r2, [r3, #12]
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	689b      	ldr	r3, [r3, #8]
 800c656:	4293      	cmp	r3, r2
 800c658:	bf28      	it	cs
 800c65a:	4613      	movcs	r3, r2
 800c65c:	461a      	mov	r2, r3
 800c65e:	6879      	ldr	r1, [r7, #4]
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f001 f994 	bl	800d98e <USBD_CtlContinueRx>
 800c666:	e07d      	b.n	800c764 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c66e:	f003 031f 	and.w	r3, r3, #31
 800c672:	2b02      	cmp	r3, #2
 800c674:	d014      	beq.n	800c6a0 <USBD_LL_DataOutStage+0x98>
 800c676:	2b02      	cmp	r3, #2
 800c678:	d81d      	bhi.n	800c6b6 <USBD_LL_DataOutStage+0xae>
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d002      	beq.n	800c684 <USBD_LL_DataOutStage+0x7c>
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d003      	beq.n	800c68a <USBD_LL_DataOutStage+0x82>
 800c682:	e018      	b.n	800c6b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c684:	2300      	movs	r3, #0
 800c686:	75bb      	strb	r3, [r7, #22]
            break;
 800c688:	e018      	b.n	800c6bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c690:	b2db      	uxtb	r3, r3
 800c692:	4619      	mov	r1, r3
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f000 fa64 	bl	800cb62 <USBD_CoreFindIF>
 800c69a:	4603      	mov	r3, r0
 800c69c:	75bb      	strb	r3, [r7, #22]
            break;
 800c69e:	e00d      	b.n	800c6bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f000 fa66 	bl	800cb7c <USBD_CoreFindEP>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	75bb      	strb	r3, [r7, #22]
            break;
 800c6b4:	e002      	b.n	800c6bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	75bb      	strb	r3, [r7, #22]
            break;
 800c6ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c6bc:	7dbb      	ldrb	r3, [r7, #22]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d119      	bne.n	800c6f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2b03      	cmp	r3, #3
 800c6cc:	d113      	bne.n	800c6f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c6ce:	7dba      	ldrb	r2, [r7, #22]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	32ae      	adds	r2, #174	@ 0xae
 800c6d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00b      	beq.n	800c6f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c6de:	7dba      	ldrb	r2, [r7, #22]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c6e6:	7dba      	ldrb	r2, [r7, #22]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	32ae      	adds	r2, #174	@ 0xae
 800c6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6f0:	691b      	ldr	r3, [r3, #16]
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f001 f95a 	bl	800d9b0 <USBD_CtlSendStatus>
 800c6fc:	e032      	b.n	800c764 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c6fe:	7afb      	ldrb	r3, [r7, #11]
 800c700:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c704:	b2db      	uxtb	r3, r3
 800c706:	4619      	mov	r1, r3
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	f000 fa37 	bl	800cb7c <USBD_CoreFindEP>
 800c70e:	4603      	mov	r3, r0
 800c710:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c712:	7dbb      	ldrb	r3, [r7, #22]
 800c714:	2bff      	cmp	r3, #255	@ 0xff
 800c716:	d025      	beq.n	800c764 <USBD_LL_DataOutStage+0x15c>
 800c718:	7dbb      	ldrb	r3, [r7, #22]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d122      	bne.n	800c764 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c724:	b2db      	uxtb	r3, r3
 800c726:	2b03      	cmp	r3, #3
 800c728:	d117      	bne.n	800c75a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c72a:	7dba      	ldrb	r2, [r7, #22]
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	32ae      	adds	r2, #174	@ 0xae
 800c730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00f      	beq.n	800c75a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c73a:	7dba      	ldrb	r2, [r7, #22]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c742:	7dba      	ldrb	r2, [r7, #22]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	32ae      	adds	r2, #174	@ 0xae
 800c748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c74c:	699b      	ldr	r3, [r3, #24]
 800c74e:	7afa      	ldrb	r2, [r7, #11]
 800c750:	4611      	mov	r1, r2
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	4798      	blx	r3
 800c756:	4603      	mov	r3, r0
 800c758:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c75a:	7dfb      	ldrb	r3, [r7, #23]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d001      	beq.n	800c764 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c760:	7dfb      	ldrb	r3, [r7, #23]
 800c762:	e000      	b.n	800c766 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c764:	2300      	movs	r3, #0
}
 800c766:	4618      	mov	r0, r3
 800c768:	3718      	adds	r7, #24
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}

0800c76e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c76e:	b580      	push	{r7, lr}
 800c770:	b086      	sub	sp, #24
 800c772:	af00      	add	r7, sp, #0
 800c774:	60f8      	str	r0, [r7, #12]
 800c776:	460b      	mov	r3, r1
 800c778:	607a      	str	r2, [r7, #4]
 800c77a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c77c:	7afb      	ldrb	r3, [r7, #11]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d16f      	bne.n	800c862 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	3314      	adds	r3, #20
 800c786:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c78e:	2b02      	cmp	r3, #2
 800c790:	d15a      	bne.n	800c848 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	689a      	ldr	r2, [r3, #8]
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d914      	bls.n	800c7c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	689a      	ldr	r2, [r3, #8]
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	1ad2      	subs	r2, r2, r3
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	689b      	ldr	r3, [r3, #8]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	6879      	ldr	r1, [r7, #4]
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f001 f8bc 	bl	800d932 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	2200      	movs	r2, #0
 800c7be:	2100      	movs	r1, #0
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	f001 fddf 	bl	800e384 <USBD_LL_PrepareReceive>
 800c7c6:	e03f      	b.n	800c848 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	68da      	ldr	r2, [r3, #12]
 800c7cc:	693b      	ldr	r3, [r7, #16]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	429a      	cmp	r2, r3
 800c7d2:	d11c      	bne.n	800c80e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	685a      	ldr	r2, [r3, #4]
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d316      	bcc.n	800c80e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	685a      	ldr	r2, [r3, #4]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d20f      	bcs.n	800c80e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f001 f89d 	bl	800d932 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c800:	2300      	movs	r3, #0
 800c802:	2200      	movs	r2, #0
 800c804:	2100      	movs	r1, #0
 800c806:	68f8      	ldr	r0, [r7, #12]
 800c808:	f001 fdbc 	bl	800e384 <USBD_LL_PrepareReceive>
 800c80c:	e01c      	b.n	800c848 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c814:	b2db      	uxtb	r3, r3
 800c816:	2b03      	cmp	r3, #3
 800c818:	d10f      	bne.n	800c83a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d009      	beq.n	800c83a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2200      	movs	r2, #0
 800c82a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	68f8      	ldr	r0, [r7, #12]
 800c838:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c83a:	2180      	movs	r1, #128	@ 0x80
 800c83c:	68f8      	ldr	r0, [r7, #12]
 800c83e:	f001 fcf7 	bl	800e230 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f001 f8c7 	bl	800d9d6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d03a      	beq.n	800c8c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f7ff fe42 	bl	800c4dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2200      	movs	r2, #0
 800c85c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c860:	e032      	b.n	800c8c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c862:	7afb      	ldrb	r3, [r7, #11]
 800c864:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	4619      	mov	r1, r3
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f000 f985 	bl	800cb7c <USBD_CoreFindEP>
 800c872:	4603      	mov	r3, r0
 800c874:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c876:	7dfb      	ldrb	r3, [r7, #23]
 800c878:	2bff      	cmp	r3, #255	@ 0xff
 800c87a:	d025      	beq.n	800c8c8 <USBD_LL_DataInStage+0x15a>
 800c87c:	7dfb      	ldrb	r3, [r7, #23]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d122      	bne.n	800c8c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	2b03      	cmp	r3, #3
 800c88c:	d11c      	bne.n	800c8c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c88e:	7dfa      	ldrb	r2, [r7, #23]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	32ae      	adds	r2, #174	@ 0xae
 800c894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c898:	695b      	ldr	r3, [r3, #20]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d014      	beq.n	800c8c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c89e:	7dfa      	ldrb	r2, [r7, #23]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c8a6:	7dfa      	ldrb	r2, [r7, #23]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	32ae      	adds	r2, #174	@ 0xae
 800c8ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8b0:	695b      	ldr	r3, [r3, #20]
 800c8b2:	7afa      	ldrb	r2, [r7, #11]
 800c8b4:	4611      	mov	r1, r2
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	4798      	blx	r3
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c8be:	7dbb      	ldrb	r3, [r7, #22]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c8c4:	7dbb      	ldrb	r3, [r7, #22]
 800c8c6:	e000      	b.n	800c8ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3718      	adds	r7, #24
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b084      	sub	sp, #16
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d014      	beq.n	800c938 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00e      	beq.n	800c938 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	6852      	ldr	r2, [r2, #4]
 800c926:	b2d2      	uxtb	r2, r2
 800c928:	4611      	mov	r1, r2
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	4798      	blx	r3
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d001      	beq.n	800c938 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c934:	2303      	movs	r3, #3
 800c936:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c938:	2340      	movs	r3, #64	@ 0x40
 800c93a:	2200      	movs	r2, #0
 800c93c:	2100      	movs	r1, #0
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f001 fc31 	bl	800e1a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2201      	movs	r2, #1
 800c948:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2240      	movs	r2, #64	@ 0x40
 800c950:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c954:	2340      	movs	r3, #64	@ 0x40
 800c956:	2200      	movs	r2, #0
 800c958:	2180      	movs	r1, #128	@ 0x80
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f001 fc23 	bl	800e1a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2201      	movs	r2, #1
 800c964:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2240      	movs	r2, #64	@ 0x40
 800c96a:	621a      	str	r2, [r3, #32]

  return ret;
 800c96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c976:	b480      	push	{r7}
 800c978:	b083      	sub	sp, #12
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
 800c97e:	460b      	mov	r3, r1
 800c980:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	78fa      	ldrb	r2, [r7, #3]
 800c986:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c988:	2300      	movs	r3, #0
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	370c      	adds	r7, #12
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr

0800c996 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c996:	b480      	push	{r7}
 800c998:	b083      	sub	sp, #12
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	2b04      	cmp	r3, #4
 800c9a8:	d006      	beq.n	800c9b8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2204      	movs	r2, #4
 800c9bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	370c      	adds	r7, #12
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr

0800c9ce <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c9ce:	b480      	push	{r7}
 800c9d0:	b083      	sub	sp, #12
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	2b04      	cmp	r3, #4
 800c9e0:	d106      	bne.n	800c9f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c9e8:	b2da      	uxtb	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c9f0:	2300      	movs	r3, #0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	370c      	adds	r7, #12
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fc:	4770      	bx	lr

0800c9fe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	2b03      	cmp	r3, #3
 800ca10:	d110      	bne.n	800ca34 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d00b      	beq.n	800ca34 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca22:	69db      	ldr	r3, [r3, #28]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d005      	beq.n	800ca34 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca2e:	69db      	ldr	r3, [r3, #28]
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b082      	sub	sp, #8
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	460b      	mov	r3, r1
 800ca48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	32ae      	adds	r2, #174	@ 0xae
 800ca54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d101      	bne.n	800ca60 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ca5c:	2303      	movs	r3, #3
 800ca5e:	e01c      	b.n	800ca9a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	2b03      	cmp	r3, #3
 800ca6a:	d115      	bne.n	800ca98 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	32ae      	adds	r2, #174	@ 0xae
 800ca76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca7a:	6a1b      	ldr	r3, [r3, #32]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00b      	beq.n	800ca98 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	32ae      	adds	r2, #174	@ 0xae
 800ca8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca8e:	6a1b      	ldr	r3, [r3, #32]
 800ca90:	78fa      	ldrb	r2, [r7, #3]
 800ca92:	4611      	mov	r1, r2
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3708      	adds	r7, #8
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b082      	sub	sp, #8
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
 800caaa:	460b      	mov	r3, r1
 800caac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	32ae      	adds	r2, #174	@ 0xae
 800cab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d101      	bne.n	800cac4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cac0:	2303      	movs	r3, #3
 800cac2:	e01c      	b.n	800cafe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	2b03      	cmp	r3, #3
 800cace:	d115      	bne.n	800cafc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	32ae      	adds	r2, #174	@ 0xae
 800cada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00b      	beq.n	800cafc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	32ae      	adds	r2, #174	@ 0xae
 800caee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caf4:	78fa      	ldrb	r2, [r7, #3]
 800caf6:	4611      	mov	r1, r2
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cb06:	b480      	push	{r7}
 800cb08:	b083      	sub	sp, #12
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cb0e:	2300      	movs	r3, #0
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cb24:	2300      	movs	r3, #0
 800cb26:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00e      	beq.n	800cb58 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	6852      	ldr	r2, [r2, #4]
 800cb46:	b2d2      	uxtb	r2, r2
 800cb48:	4611      	mov	r1, r2
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	4798      	blx	r3
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d001      	beq.n	800cb58 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cb54:	2303      	movs	r3, #3
 800cb56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	3710      	adds	r7, #16
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}

0800cb62 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cb62:	b480      	push	{r7}
 800cb64:	b083      	sub	sp, #12
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cb6e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	460b      	mov	r3, r1
 800cb86:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cb88:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	370c      	adds	r7, #12
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr

0800cb96 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cb96:	b580      	push	{r7, lr}
 800cb98:	b086      	sub	sp, #24
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	460b      	mov	r3, r1
 800cba0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	885b      	ldrh	r3, [r3, #2]
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	7812      	ldrb	r2, [r2, #0]
 800cbb8:	4293      	cmp	r3, r2
 800cbba:	d91f      	bls.n	800cbfc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cbc2:	e013      	b.n	800cbec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cbc4:	f107 030a 	add.w	r3, r7, #10
 800cbc8:	4619      	mov	r1, r3
 800cbca:	6978      	ldr	r0, [r7, #20]
 800cbcc:	f000 f81b 	bl	800cc06 <USBD_GetNextDesc>
 800cbd0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	785b      	ldrb	r3, [r3, #1]
 800cbd6:	2b05      	cmp	r3, #5
 800cbd8:	d108      	bne.n	800cbec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	789b      	ldrb	r3, [r3, #2]
 800cbe2:	78fa      	ldrb	r2, [r7, #3]
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d008      	beq.n	800cbfa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	885b      	ldrh	r3, [r3, #2]
 800cbf0:	b29a      	uxth	r2, r3
 800cbf2:	897b      	ldrh	r3, [r7, #10]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d8e5      	bhi.n	800cbc4 <USBD_GetEpDesc+0x2e>
 800cbf8:	e000      	b.n	800cbfc <USBD_GetEpDesc+0x66>
          break;
 800cbfa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cbfc:	693b      	ldr	r3, [r7, #16]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3718      	adds	r7, #24
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cc06:	b480      	push	{r7}
 800cc08:	b085      	sub	sp, #20
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
 800cc0e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	881b      	ldrh	r3, [r3, #0]
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	7812      	ldrb	r2, [r2, #0]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	b29a      	uxth	r2, r3
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	461a      	mov	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cc30:	68fb      	ldr	r3, [r7, #12]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cc3e:	b480      	push	{r7}
 800cc40:	b087      	sub	sp, #28
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	3301      	adds	r3, #1
 800cc54:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cc5c:	8a3b      	ldrh	r3, [r7, #16]
 800cc5e:	021b      	lsls	r3, r3, #8
 800cc60:	b21a      	sxth	r2, r3
 800cc62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	b21b      	sxth	r3, r3
 800cc6a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cc6c:	89fb      	ldrh	r3, [r7, #14]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	371c      	adds	r7, #28
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
	...

0800cc7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cc92:	2b40      	cmp	r3, #64	@ 0x40
 800cc94:	d005      	beq.n	800cca2 <USBD_StdDevReq+0x26>
 800cc96:	2b40      	cmp	r3, #64	@ 0x40
 800cc98:	d857      	bhi.n	800cd4a <USBD_StdDevReq+0xce>
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d00f      	beq.n	800ccbe <USBD_StdDevReq+0x42>
 800cc9e:	2b20      	cmp	r3, #32
 800cca0:	d153      	bne.n	800cd4a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	32ae      	adds	r2, #174	@ 0xae
 800ccac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	6839      	ldr	r1, [r7, #0]
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	4798      	blx	r3
 800ccb8:	4603      	mov	r3, r0
 800ccba:	73fb      	strb	r3, [r7, #15]
      break;
 800ccbc:	e04a      	b.n	800cd54 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	785b      	ldrb	r3, [r3, #1]
 800ccc2:	2b09      	cmp	r3, #9
 800ccc4:	d83b      	bhi.n	800cd3e <USBD_StdDevReq+0xc2>
 800ccc6:	a201      	add	r2, pc, #4	@ (adr r2, 800cccc <USBD_StdDevReq+0x50>)
 800ccc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cccc:	0800cd21 	.word	0x0800cd21
 800ccd0:	0800cd35 	.word	0x0800cd35
 800ccd4:	0800cd3f 	.word	0x0800cd3f
 800ccd8:	0800cd2b 	.word	0x0800cd2b
 800ccdc:	0800cd3f 	.word	0x0800cd3f
 800cce0:	0800ccff 	.word	0x0800ccff
 800cce4:	0800ccf5 	.word	0x0800ccf5
 800cce8:	0800cd3f 	.word	0x0800cd3f
 800ccec:	0800cd17 	.word	0x0800cd17
 800ccf0:	0800cd09 	.word	0x0800cd09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ccf4:	6839      	ldr	r1, [r7, #0]
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 fa3c 	bl	800d174 <USBD_GetDescriptor>
          break;
 800ccfc:	e024      	b.n	800cd48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ccfe:	6839      	ldr	r1, [r7, #0]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 fba1 	bl	800d448 <USBD_SetAddress>
          break;
 800cd06:	e01f      	b.n	800cd48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cd08:	6839      	ldr	r1, [r7, #0]
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 fbe0 	bl	800d4d0 <USBD_SetConfig>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73fb      	strb	r3, [r7, #15]
          break;
 800cd14:	e018      	b.n	800cd48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cd16:	6839      	ldr	r1, [r7, #0]
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 fc83 	bl	800d624 <USBD_GetConfig>
          break;
 800cd1e:	e013      	b.n	800cd48 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cd20:	6839      	ldr	r1, [r7, #0]
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f000 fcb4 	bl	800d690 <USBD_GetStatus>
          break;
 800cd28:	e00e      	b.n	800cd48 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cd2a:	6839      	ldr	r1, [r7, #0]
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 fce3 	bl	800d6f8 <USBD_SetFeature>
          break;
 800cd32:	e009      	b.n	800cd48 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cd34:	6839      	ldr	r1, [r7, #0]
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f000 fd07 	bl	800d74a <USBD_ClrFeature>
          break;
 800cd3c:	e004      	b.n	800cd48 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cd3e:	6839      	ldr	r1, [r7, #0]
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 fd5e 	bl	800d802 <USBD_CtlError>
          break;
 800cd46:	bf00      	nop
      }
      break;
 800cd48:	e004      	b.n	800cd54 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cd4a:	6839      	ldr	r1, [r7, #0]
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 fd58 	bl	800d802 <USBD_CtlError>
      break;
 800cd52:	bf00      	nop
  }

  return ret;
 800cd54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop

0800cd60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b084      	sub	sp, #16
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cd76:	2b40      	cmp	r3, #64	@ 0x40
 800cd78:	d005      	beq.n	800cd86 <USBD_StdItfReq+0x26>
 800cd7a:	2b40      	cmp	r3, #64	@ 0x40
 800cd7c:	d852      	bhi.n	800ce24 <USBD_StdItfReq+0xc4>
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d001      	beq.n	800cd86 <USBD_StdItfReq+0x26>
 800cd82:	2b20      	cmp	r3, #32
 800cd84:	d14e      	bne.n	800ce24 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d840      	bhi.n	800ce16 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	889b      	ldrh	r3, [r3, #4]
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	2b01      	cmp	r3, #1
 800cd9c:	d836      	bhi.n	800ce0c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	889b      	ldrh	r3, [r3, #4]
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	4619      	mov	r1, r3
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7ff fedb 	bl	800cb62 <USBD_CoreFindIF>
 800cdac:	4603      	mov	r3, r0
 800cdae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cdb0:	7bbb      	ldrb	r3, [r7, #14]
 800cdb2:	2bff      	cmp	r3, #255	@ 0xff
 800cdb4:	d01d      	beq.n	800cdf2 <USBD_StdItfReq+0x92>
 800cdb6:	7bbb      	ldrb	r3, [r7, #14]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d11a      	bne.n	800cdf2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cdbc:	7bba      	ldrb	r2, [r7, #14]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	32ae      	adds	r2, #174	@ 0xae
 800cdc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d00f      	beq.n	800cdec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cdcc:	7bba      	ldrb	r2, [r7, #14]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cdd4:	7bba      	ldrb	r2, [r7, #14]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	32ae      	adds	r2, #174	@ 0xae
 800cdda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	6839      	ldr	r1, [r7, #0]
 800cde2:	6878      	ldr	r0, [r7, #4]
 800cde4:	4798      	blx	r3
 800cde6:	4603      	mov	r3, r0
 800cde8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cdea:	e004      	b.n	800cdf6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cdec:	2303      	movs	r3, #3
 800cdee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cdf0:	e001      	b.n	800cdf6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cdf2:	2303      	movs	r3, #3
 800cdf4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	88db      	ldrh	r3, [r3, #6]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d110      	bne.n	800ce20 <USBD_StdItfReq+0xc0>
 800cdfe:	7bfb      	ldrb	r3, [r7, #15]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d10d      	bne.n	800ce20 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 fdd3 	bl	800d9b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ce0a:	e009      	b.n	800ce20 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ce0c:	6839      	ldr	r1, [r7, #0]
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 fcf7 	bl	800d802 <USBD_CtlError>
          break;
 800ce14:	e004      	b.n	800ce20 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ce16:	6839      	ldr	r1, [r7, #0]
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 fcf2 	bl	800d802 <USBD_CtlError>
          break;
 800ce1e:	e000      	b.n	800ce22 <USBD_StdItfReq+0xc2>
          break;
 800ce20:	bf00      	nop
      }
      break;
 800ce22:	e004      	b.n	800ce2e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f000 fceb 	bl	800d802 <USBD_CtlError>
      break;
 800ce2c:	bf00      	nop
  }

  return ret;
 800ce2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ce42:	2300      	movs	r3, #0
 800ce44:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	889b      	ldrh	r3, [r3, #4]
 800ce4a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ce54:	2b40      	cmp	r3, #64	@ 0x40
 800ce56:	d007      	beq.n	800ce68 <USBD_StdEPReq+0x30>
 800ce58:	2b40      	cmp	r3, #64	@ 0x40
 800ce5a:	f200 817f 	bhi.w	800d15c <USBD_StdEPReq+0x324>
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d02a      	beq.n	800ceb8 <USBD_StdEPReq+0x80>
 800ce62:	2b20      	cmp	r3, #32
 800ce64:	f040 817a 	bne.w	800d15c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ce68:	7bbb      	ldrb	r3, [r7, #14]
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f7ff fe85 	bl	800cb7c <USBD_CoreFindEP>
 800ce72:	4603      	mov	r3, r0
 800ce74:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ce76:	7b7b      	ldrb	r3, [r7, #13]
 800ce78:	2bff      	cmp	r3, #255	@ 0xff
 800ce7a:	f000 8174 	beq.w	800d166 <USBD_StdEPReq+0x32e>
 800ce7e:	7b7b      	ldrb	r3, [r7, #13]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f040 8170 	bne.w	800d166 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ce86:	7b7a      	ldrb	r2, [r7, #13]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ce8e:	7b7a      	ldrb	r2, [r7, #13]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	32ae      	adds	r2, #174	@ 0xae
 800ce94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce98:	689b      	ldr	r3, [r3, #8]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	f000 8163 	beq.w	800d166 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cea0:	7b7a      	ldrb	r2, [r7, #13]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	32ae      	adds	r2, #174	@ 0xae
 800cea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceaa:	689b      	ldr	r3, [r3, #8]
 800ceac:	6839      	ldr	r1, [r7, #0]
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	4798      	blx	r3
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ceb6:	e156      	b.n	800d166 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	785b      	ldrb	r3, [r3, #1]
 800cebc:	2b03      	cmp	r3, #3
 800cebe:	d008      	beq.n	800ced2 <USBD_StdEPReq+0x9a>
 800cec0:	2b03      	cmp	r3, #3
 800cec2:	f300 8145 	bgt.w	800d150 <USBD_StdEPReq+0x318>
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f000 809b 	beq.w	800d002 <USBD_StdEPReq+0x1ca>
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d03c      	beq.n	800cf4a <USBD_StdEPReq+0x112>
 800ced0:	e13e      	b.n	800d150 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	2b02      	cmp	r3, #2
 800cedc:	d002      	beq.n	800cee4 <USBD_StdEPReq+0xac>
 800cede:	2b03      	cmp	r3, #3
 800cee0:	d016      	beq.n	800cf10 <USBD_StdEPReq+0xd8>
 800cee2:	e02c      	b.n	800cf3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cee4:	7bbb      	ldrb	r3, [r7, #14]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00d      	beq.n	800cf06 <USBD_StdEPReq+0xce>
 800ceea:	7bbb      	ldrb	r3, [r7, #14]
 800ceec:	2b80      	cmp	r3, #128	@ 0x80
 800ceee:	d00a      	beq.n	800cf06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cef0:	7bbb      	ldrb	r3, [r7, #14]
 800cef2:	4619      	mov	r1, r3
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f001 f99b 	bl	800e230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cefa:	2180      	movs	r1, #128	@ 0x80
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f001 f997 	bl	800e230 <USBD_LL_StallEP>
 800cf02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cf04:	e020      	b.n	800cf48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cf06:	6839      	ldr	r1, [r7, #0]
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 fc7a 	bl	800d802 <USBD_CtlError>
              break;
 800cf0e:	e01b      	b.n	800cf48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	885b      	ldrh	r3, [r3, #2]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d10e      	bne.n	800cf36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cf18:	7bbb      	ldrb	r3, [r7, #14]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00b      	beq.n	800cf36 <USBD_StdEPReq+0xfe>
 800cf1e:	7bbb      	ldrb	r3, [r7, #14]
 800cf20:	2b80      	cmp	r3, #128	@ 0x80
 800cf22:	d008      	beq.n	800cf36 <USBD_StdEPReq+0xfe>
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	88db      	ldrh	r3, [r3, #6]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d104      	bne.n	800cf36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf2c:	7bbb      	ldrb	r3, [r7, #14]
 800cf2e:	4619      	mov	r1, r3
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f001 f97d 	bl	800e230 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f000 fd3a 	bl	800d9b0 <USBD_CtlSendStatus>

              break;
 800cf3c:	e004      	b.n	800cf48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cf3e:	6839      	ldr	r1, [r7, #0]
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 fc5e 	bl	800d802 <USBD_CtlError>
              break;
 800cf46:	bf00      	nop
          }
          break;
 800cf48:	e107      	b.n	800d15a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf50:	b2db      	uxtb	r3, r3
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	d002      	beq.n	800cf5c <USBD_StdEPReq+0x124>
 800cf56:	2b03      	cmp	r3, #3
 800cf58:	d016      	beq.n	800cf88 <USBD_StdEPReq+0x150>
 800cf5a:	e04b      	b.n	800cff4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf5c:	7bbb      	ldrb	r3, [r7, #14]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d00d      	beq.n	800cf7e <USBD_StdEPReq+0x146>
 800cf62:	7bbb      	ldrb	r3, [r7, #14]
 800cf64:	2b80      	cmp	r3, #128	@ 0x80
 800cf66:	d00a      	beq.n	800cf7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cf68:	7bbb      	ldrb	r3, [r7, #14]
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f001 f95f 	bl	800e230 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cf72:	2180      	movs	r1, #128	@ 0x80
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f001 f95b 	bl	800e230 <USBD_LL_StallEP>
 800cf7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cf7c:	e040      	b.n	800d000 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cf7e:	6839      	ldr	r1, [r7, #0]
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 fc3e 	bl	800d802 <USBD_CtlError>
              break;
 800cf86:	e03b      	b.n	800d000 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	885b      	ldrh	r3, [r3, #2]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d136      	bne.n	800cffe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cf90:	7bbb      	ldrb	r3, [r7, #14]
 800cf92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d004      	beq.n	800cfa4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cf9a:	7bbb      	ldrb	r3, [r7, #14]
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f001 f965 	bl	800e26e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fd03 	bl	800d9b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cfaa:	7bbb      	ldrb	r3, [r7, #14]
 800cfac:	4619      	mov	r1, r3
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7ff fde4 	bl	800cb7c <USBD_CoreFindEP>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cfb8:	7b7b      	ldrb	r3, [r7, #13]
 800cfba:	2bff      	cmp	r3, #255	@ 0xff
 800cfbc:	d01f      	beq.n	800cffe <USBD_StdEPReq+0x1c6>
 800cfbe:	7b7b      	ldrb	r3, [r7, #13]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d11c      	bne.n	800cffe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cfc4:	7b7a      	ldrb	r2, [r7, #13]
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cfcc:	7b7a      	ldrb	r2, [r7, #13]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	32ae      	adds	r2, #174	@ 0xae
 800cfd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfd6:	689b      	ldr	r3, [r3, #8]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d010      	beq.n	800cffe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cfdc:	7b7a      	ldrb	r2, [r7, #13]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	32ae      	adds	r2, #174	@ 0xae
 800cfe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	6839      	ldr	r1, [r7, #0]
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	4798      	blx	r3
 800cfee:	4603      	mov	r3, r0
 800cff0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cff2:	e004      	b.n	800cffe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cff4:	6839      	ldr	r1, [r7, #0]
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 fc03 	bl	800d802 <USBD_CtlError>
              break;
 800cffc:	e000      	b.n	800d000 <USBD_StdEPReq+0x1c8>
              break;
 800cffe:	bf00      	nop
          }
          break;
 800d000:	e0ab      	b.n	800d15a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	2b02      	cmp	r3, #2
 800d00c:	d002      	beq.n	800d014 <USBD_StdEPReq+0x1dc>
 800d00e:	2b03      	cmp	r3, #3
 800d010:	d032      	beq.n	800d078 <USBD_StdEPReq+0x240>
 800d012:	e097      	b.n	800d144 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d014:	7bbb      	ldrb	r3, [r7, #14]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d007      	beq.n	800d02a <USBD_StdEPReq+0x1f2>
 800d01a:	7bbb      	ldrb	r3, [r7, #14]
 800d01c:	2b80      	cmp	r3, #128	@ 0x80
 800d01e:	d004      	beq.n	800d02a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d020:	6839      	ldr	r1, [r7, #0]
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 fbed 	bl	800d802 <USBD_CtlError>
                break;
 800d028:	e091      	b.n	800d14e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d02a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	da0b      	bge.n	800d04a <USBD_StdEPReq+0x212>
 800d032:	7bbb      	ldrb	r3, [r7, #14]
 800d034:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d038:	4613      	mov	r3, r2
 800d03a:	009b      	lsls	r3, r3, #2
 800d03c:	4413      	add	r3, r2
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	3310      	adds	r3, #16
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	4413      	add	r3, r2
 800d046:	3304      	adds	r3, #4
 800d048:	e00b      	b.n	800d062 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d04a:	7bbb      	ldrb	r3, [r7, #14]
 800d04c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d050:	4613      	mov	r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	4413      	add	r3, r2
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	4413      	add	r3, r2
 800d060:	3304      	adds	r3, #4
 800d062:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	2200      	movs	r2, #0
 800d068:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	2202      	movs	r2, #2
 800d06e:	4619      	mov	r1, r3
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 fc43 	bl	800d8fc <USBD_CtlSendData>
              break;
 800d076:	e06a      	b.n	800d14e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d078:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	da11      	bge.n	800d0a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d080:	7bbb      	ldrb	r3, [r7, #14]
 800d082:	f003 020f 	and.w	r2, r3, #15
 800d086:	6879      	ldr	r1, [r7, #4]
 800d088:	4613      	mov	r3, r2
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	4413      	add	r3, r2
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	440b      	add	r3, r1
 800d092:	3324      	adds	r3, #36	@ 0x24
 800d094:	881b      	ldrh	r3, [r3, #0]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d117      	bne.n	800d0ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d09a:	6839      	ldr	r1, [r7, #0]
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 fbb0 	bl	800d802 <USBD_CtlError>
                  break;
 800d0a2:	e054      	b.n	800d14e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d0a4:	7bbb      	ldrb	r3, [r7, #14]
 800d0a6:	f003 020f 	and.w	r2, r3, #15
 800d0aa:	6879      	ldr	r1, [r7, #4]
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	4413      	add	r3, r2
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	440b      	add	r3, r1
 800d0b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d0ba:	881b      	ldrh	r3, [r3, #0]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d104      	bne.n	800d0ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d0c0:	6839      	ldr	r1, [r7, #0]
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 fb9d 	bl	800d802 <USBD_CtlError>
                  break;
 800d0c8:	e041      	b.n	800d14e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	da0b      	bge.n	800d0ea <USBD_StdEPReq+0x2b2>
 800d0d2:	7bbb      	ldrb	r3, [r7, #14]
 800d0d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d0d8:	4613      	mov	r3, r2
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	4413      	add	r3, r2
 800d0de:	009b      	lsls	r3, r3, #2
 800d0e0:	3310      	adds	r3, #16
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	4413      	add	r3, r2
 800d0e6:	3304      	adds	r3, #4
 800d0e8:	e00b      	b.n	800d102 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d0ea:	7bbb      	ldrb	r3, [r7, #14]
 800d0ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d0f0:	4613      	mov	r3, r2
 800d0f2:	009b      	lsls	r3, r3, #2
 800d0f4:	4413      	add	r3, r2
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	4413      	add	r3, r2
 800d100:	3304      	adds	r3, #4
 800d102:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d104:	7bbb      	ldrb	r3, [r7, #14]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d002      	beq.n	800d110 <USBD_StdEPReq+0x2d8>
 800d10a:	7bbb      	ldrb	r3, [r7, #14]
 800d10c:	2b80      	cmp	r3, #128	@ 0x80
 800d10e:	d103      	bne.n	800d118 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	2200      	movs	r2, #0
 800d114:	601a      	str	r2, [r3, #0]
 800d116:	e00e      	b.n	800d136 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d118:	7bbb      	ldrb	r3, [r7, #14]
 800d11a:	4619      	mov	r1, r3
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f001 f8c5 	bl	800e2ac <USBD_LL_IsStallEP>
 800d122:	4603      	mov	r3, r0
 800d124:	2b00      	cmp	r3, #0
 800d126:	d003      	beq.n	800d130 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	2201      	movs	r2, #1
 800d12c:	601a      	str	r2, [r3, #0]
 800d12e:	e002      	b.n	800d136 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	2200      	movs	r2, #0
 800d134:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	2202      	movs	r2, #2
 800d13a:	4619      	mov	r1, r3
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f000 fbdd 	bl	800d8fc <USBD_CtlSendData>
              break;
 800d142:	e004      	b.n	800d14e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d144:	6839      	ldr	r1, [r7, #0]
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 fb5b 	bl	800d802 <USBD_CtlError>
              break;
 800d14c:	bf00      	nop
          }
          break;
 800d14e:	e004      	b.n	800d15a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d150:	6839      	ldr	r1, [r7, #0]
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 fb55 	bl	800d802 <USBD_CtlError>
          break;
 800d158:	bf00      	nop
      }
      break;
 800d15a:	e005      	b.n	800d168 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d15c:	6839      	ldr	r1, [r7, #0]
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 fb4f 	bl	800d802 <USBD_CtlError>
      break;
 800d164:	e000      	b.n	800d168 <USBD_StdEPReq+0x330>
      break;
 800d166:	bf00      	nop
  }

  return ret;
 800d168:	7bfb      	ldrb	r3, [r7, #15]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
	...

0800d174 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d17e:	2300      	movs	r3, #0
 800d180:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d182:	2300      	movs	r3, #0
 800d184:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d186:	2300      	movs	r3, #0
 800d188:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	885b      	ldrh	r3, [r3, #2]
 800d18e:	0a1b      	lsrs	r3, r3, #8
 800d190:	b29b      	uxth	r3, r3
 800d192:	3b01      	subs	r3, #1
 800d194:	2b06      	cmp	r3, #6
 800d196:	f200 8128 	bhi.w	800d3ea <USBD_GetDescriptor+0x276>
 800d19a:	a201      	add	r2, pc, #4	@ (adr r2, 800d1a0 <USBD_GetDescriptor+0x2c>)
 800d19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a0:	0800d1bd 	.word	0x0800d1bd
 800d1a4:	0800d1d5 	.word	0x0800d1d5
 800d1a8:	0800d215 	.word	0x0800d215
 800d1ac:	0800d3eb 	.word	0x0800d3eb
 800d1b0:	0800d3eb 	.word	0x0800d3eb
 800d1b4:	0800d38b 	.word	0x0800d38b
 800d1b8:	0800d3b7 	.word	0x0800d3b7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	687a      	ldr	r2, [r7, #4]
 800d1c6:	7c12      	ldrb	r2, [r2, #16]
 800d1c8:	f107 0108 	add.w	r1, r7, #8
 800d1cc:	4610      	mov	r0, r2
 800d1ce:	4798      	blx	r3
 800d1d0:	60f8      	str	r0, [r7, #12]
      break;
 800d1d2:	e112      	b.n	800d3fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	7c1b      	ldrb	r3, [r3, #16]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d10d      	bne.n	800d1f8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1e4:	f107 0208 	add.w	r2, r7, #8
 800d1e8:	4610      	mov	r0, r2
 800d1ea:	4798      	blx	r3
 800d1ec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	2202      	movs	r2, #2
 800d1f4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d1f6:	e100      	b.n	800d3fa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d1fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d200:	f107 0208 	add.w	r2, r7, #8
 800d204:	4610      	mov	r0, r2
 800d206:	4798      	blx	r3
 800d208:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	3301      	adds	r3, #1
 800d20e:	2202      	movs	r2, #2
 800d210:	701a      	strb	r2, [r3, #0]
      break;
 800d212:	e0f2      	b.n	800d3fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	885b      	ldrh	r3, [r3, #2]
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	2b05      	cmp	r3, #5
 800d21c:	f200 80ac 	bhi.w	800d378 <USBD_GetDescriptor+0x204>
 800d220:	a201      	add	r2, pc, #4	@ (adr r2, 800d228 <USBD_GetDescriptor+0xb4>)
 800d222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d226:	bf00      	nop
 800d228:	0800d241 	.word	0x0800d241
 800d22c:	0800d275 	.word	0x0800d275
 800d230:	0800d2a9 	.word	0x0800d2a9
 800d234:	0800d2dd 	.word	0x0800d2dd
 800d238:	0800d311 	.word	0x0800d311
 800d23c:	0800d345 	.word	0x0800d345
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d246:	685b      	ldr	r3, [r3, #4]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d00b      	beq.n	800d264 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	687a      	ldr	r2, [r7, #4]
 800d256:	7c12      	ldrb	r2, [r2, #16]
 800d258:	f107 0108 	add.w	r1, r7, #8
 800d25c:	4610      	mov	r0, r2
 800d25e:	4798      	blx	r3
 800d260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d262:	e091      	b.n	800d388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d264:	6839      	ldr	r1, [r7, #0]
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f000 facb 	bl	800d802 <USBD_CtlError>
            err++;
 800d26c:	7afb      	ldrb	r3, [r7, #11]
 800d26e:	3301      	adds	r3, #1
 800d270:	72fb      	strb	r3, [r7, #11]
          break;
 800d272:	e089      	b.n	800d388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d00b      	beq.n	800d298 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d286:	689b      	ldr	r3, [r3, #8]
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	7c12      	ldrb	r2, [r2, #16]
 800d28c:	f107 0108 	add.w	r1, r7, #8
 800d290:	4610      	mov	r0, r2
 800d292:	4798      	blx	r3
 800d294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d296:	e077      	b.n	800d388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d298:	6839      	ldr	r1, [r7, #0]
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 fab1 	bl	800d802 <USBD_CtlError>
            err++;
 800d2a0:	7afb      	ldrb	r3, [r7, #11]
 800d2a2:	3301      	adds	r3, #1
 800d2a4:	72fb      	strb	r3, [r7, #11]
          break;
 800d2a6:	e06f      	b.n	800d388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00b      	beq.n	800d2cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	687a      	ldr	r2, [r7, #4]
 800d2be:	7c12      	ldrb	r2, [r2, #16]
 800d2c0:	f107 0108 	add.w	r1, r7, #8
 800d2c4:	4610      	mov	r0, r2
 800d2c6:	4798      	blx	r3
 800d2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2ca:	e05d      	b.n	800d388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d2cc:	6839      	ldr	r1, [r7, #0]
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 fa97 	bl	800d802 <USBD_CtlError>
            err++;
 800d2d4:	7afb      	ldrb	r3, [r7, #11]
 800d2d6:	3301      	adds	r3, #1
 800d2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800d2da:	e055      	b.n	800d388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2e2:	691b      	ldr	r3, [r3, #16]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00b      	beq.n	800d300 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	7c12      	ldrb	r2, [r2, #16]
 800d2f4:	f107 0108 	add.w	r1, r7, #8
 800d2f8:	4610      	mov	r0, r2
 800d2fa:	4798      	blx	r3
 800d2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2fe:	e043      	b.n	800d388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d300:	6839      	ldr	r1, [r7, #0]
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 fa7d 	bl	800d802 <USBD_CtlError>
            err++;
 800d308:	7afb      	ldrb	r3, [r7, #11]
 800d30a:	3301      	adds	r3, #1
 800d30c:	72fb      	strb	r3, [r7, #11]
          break;
 800d30e:	e03b      	b.n	800d388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d316:	695b      	ldr	r3, [r3, #20]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00b      	beq.n	800d334 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d322:	695b      	ldr	r3, [r3, #20]
 800d324:	687a      	ldr	r2, [r7, #4]
 800d326:	7c12      	ldrb	r2, [r2, #16]
 800d328:	f107 0108 	add.w	r1, r7, #8
 800d32c:	4610      	mov	r0, r2
 800d32e:	4798      	blx	r3
 800d330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d332:	e029      	b.n	800d388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d334:	6839      	ldr	r1, [r7, #0]
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 fa63 	bl	800d802 <USBD_CtlError>
            err++;
 800d33c:	7afb      	ldrb	r3, [r7, #11]
 800d33e:	3301      	adds	r3, #1
 800d340:	72fb      	strb	r3, [r7, #11]
          break;
 800d342:	e021      	b.n	800d388 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d34a:	699b      	ldr	r3, [r3, #24]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00b      	beq.n	800d368 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d356:	699b      	ldr	r3, [r3, #24]
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	7c12      	ldrb	r2, [r2, #16]
 800d35c:	f107 0108 	add.w	r1, r7, #8
 800d360:	4610      	mov	r0, r2
 800d362:	4798      	blx	r3
 800d364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d366:	e00f      	b.n	800d388 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d368:	6839      	ldr	r1, [r7, #0]
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 fa49 	bl	800d802 <USBD_CtlError>
            err++;
 800d370:	7afb      	ldrb	r3, [r7, #11]
 800d372:	3301      	adds	r3, #1
 800d374:	72fb      	strb	r3, [r7, #11]
          break;
 800d376:	e007      	b.n	800d388 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d378:	6839      	ldr	r1, [r7, #0]
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 fa41 	bl	800d802 <USBD_CtlError>
          err++;
 800d380:	7afb      	ldrb	r3, [r7, #11]
 800d382:	3301      	adds	r3, #1
 800d384:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d386:	bf00      	nop
      }
      break;
 800d388:	e037      	b.n	800d3fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	7c1b      	ldrb	r3, [r3, #16]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d109      	bne.n	800d3a6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d39a:	f107 0208 	add.w	r2, r7, #8
 800d39e:	4610      	mov	r0, r2
 800d3a0:	4798      	blx	r3
 800d3a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d3a4:	e029      	b.n	800d3fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d3a6:	6839      	ldr	r1, [r7, #0]
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 fa2a 	bl	800d802 <USBD_CtlError>
        err++;
 800d3ae:	7afb      	ldrb	r3, [r7, #11]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	72fb      	strb	r3, [r7, #11]
      break;
 800d3b4:	e021      	b.n	800d3fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	7c1b      	ldrb	r3, [r3, #16]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d10d      	bne.n	800d3da <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d3c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3c6:	f107 0208 	add.w	r2, r7, #8
 800d3ca:	4610      	mov	r0, r2
 800d3cc:	4798      	blx	r3
 800d3ce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	2207      	movs	r2, #7
 800d3d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d3d8:	e00f      	b.n	800d3fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d3da:	6839      	ldr	r1, [r7, #0]
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 fa10 	bl	800d802 <USBD_CtlError>
        err++;
 800d3e2:	7afb      	ldrb	r3, [r7, #11]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	72fb      	strb	r3, [r7, #11]
      break;
 800d3e8:	e007      	b.n	800d3fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d3ea:	6839      	ldr	r1, [r7, #0]
 800d3ec:	6878      	ldr	r0, [r7, #4]
 800d3ee:	f000 fa08 	bl	800d802 <USBD_CtlError>
      err++;
 800d3f2:	7afb      	ldrb	r3, [r7, #11]
 800d3f4:	3301      	adds	r3, #1
 800d3f6:	72fb      	strb	r3, [r7, #11]
      break;
 800d3f8:	bf00      	nop
  }

  if (err != 0U)
 800d3fa:	7afb      	ldrb	r3, [r7, #11]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d11e      	bne.n	800d43e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	88db      	ldrh	r3, [r3, #6]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d016      	beq.n	800d436 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d408:	893b      	ldrh	r3, [r7, #8]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d00e      	beq.n	800d42c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	88da      	ldrh	r2, [r3, #6]
 800d412:	893b      	ldrh	r3, [r7, #8]
 800d414:	4293      	cmp	r3, r2
 800d416:	bf28      	it	cs
 800d418:	4613      	movcs	r3, r2
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d41e:	893b      	ldrh	r3, [r7, #8]
 800d420:	461a      	mov	r2, r3
 800d422:	68f9      	ldr	r1, [r7, #12]
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f000 fa69 	bl	800d8fc <USBD_CtlSendData>
 800d42a:	e009      	b.n	800d440 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d42c:	6839      	ldr	r1, [r7, #0]
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 f9e7 	bl	800d802 <USBD_CtlError>
 800d434:	e004      	b.n	800d440 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f000 faba 	bl	800d9b0 <USBD_CtlSendStatus>
 800d43c:	e000      	b.n	800d440 <USBD_GetDescriptor+0x2cc>
    return;
 800d43e:	bf00      	nop
  }
}
 800d440:	3710      	adds	r7, #16
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}
 800d446:	bf00      	nop

0800d448 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	889b      	ldrh	r3, [r3, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d131      	bne.n	800d4be <USBD_SetAddress+0x76>
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	88db      	ldrh	r3, [r3, #6]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d12d      	bne.n	800d4be <USBD_SetAddress+0x76>
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	885b      	ldrh	r3, [r3, #2]
 800d466:	2b7f      	cmp	r3, #127	@ 0x7f
 800d468:	d829      	bhi.n	800d4be <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	885b      	ldrh	r3, [r3, #2]
 800d46e:	b2db      	uxtb	r3, r3
 800d470:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d474:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	2b03      	cmp	r3, #3
 800d480:	d104      	bne.n	800d48c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d482:	6839      	ldr	r1, [r7, #0]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 f9bc 	bl	800d802 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d48a:	e01d      	b.n	800d4c8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	7bfa      	ldrb	r2, [r7, #15]
 800d490:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d494:	7bfb      	ldrb	r3, [r7, #15]
 800d496:	4619      	mov	r1, r3
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 ff33 	bl	800e304 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 fa86 	bl	800d9b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d4a4:	7bfb      	ldrb	r3, [r7, #15]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d004      	beq.n	800d4b4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2202      	movs	r2, #2
 800d4ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4b2:	e009      	b.n	800d4c8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4bc:	e004      	b.n	800d4c8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d4be:	6839      	ldr	r1, [r7, #0]
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 f99e 	bl	800d802 <USBD_CtlError>
  }
}
 800d4c6:	bf00      	nop
 800d4c8:	bf00      	nop
 800d4ca:	3710      	adds	r7, #16
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	885b      	ldrh	r3, [r3, #2]
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	4b4e      	ldr	r3, [pc, #312]	@ (800d620 <USBD_SetConfig+0x150>)
 800d4e6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d4e8:	4b4d      	ldr	r3, [pc, #308]	@ (800d620 <USBD_SetConfig+0x150>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d905      	bls.n	800d4fc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d4f0:	6839      	ldr	r1, [r7, #0]
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 f985 	bl	800d802 <USBD_CtlError>
    return USBD_FAIL;
 800d4f8:	2303      	movs	r3, #3
 800d4fa:	e08c      	b.n	800d616 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d502:	b2db      	uxtb	r3, r3
 800d504:	2b02      	cmp	r3, #2
 800d506:	d002      	beq.n	800d50e <USBD_SetConfig+0x3e>
 800d508:	2b03      	cmp	r3, #3
 800d50a:	d029      	beq.n	800d560 <USBD_SetConfig+0x90>
 800d50c:	e075      	b.n	800d5fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d50e:	4b44      	ldr	r3, [pc, #272]	@ (800d620 <USBD_SetConfig+0x150>)
 800d510:	781b      	ldrb	r3, [r3, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d020      	beq.n	800d558 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d516:	4b42      	ldr	r3, [pc, #264]	@ (800d620 <USBD_SetConfig+0x150>)
 800d518:	781b      	ldrb	r3, [r3, #0]
 800d51a:	461a      	mov	r2, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d520:	4b3f      	ldr	r3, [pc, #252]	@ (800d620 <USBD_SetConfig+0x150>)
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	4619      	mov	r1, r3
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f7fe ffe3 	bl	800c4f2 <USBD_SetClassConfig>
 800d52c:	4603      	mov	r3, r0
 800d52e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d530:	7bfb      	ldrb	r3, [r7, #15]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d008      	beq.n	800d548 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d536:	6839      	ldr	r1, [r7, #0]
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 f962 	bl	800d802 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2202      	movs	r2, #2
 800d542:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d546:	e065      	b.n	800d614 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 fa31 	bl	800d9b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2203      	movs	r2, #3
 800d552:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d556:	e05d      	b.n	800d614 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f000 fa29 	bl	800d9b0 <USBD_CtlSendStatus>
      break;
 800d55e:	e059      	b.n	800d614 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d560:	4b2f      	ldr	r3, [pc, #188]	@ (800d620 <USBD_SetConfig+0x150>)
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d112      	bne.n	800d58e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2202      	movs	r2, #2
 800d56c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d570:	4b2b      	ldr	r3, [pc, #172]	@ (800d620 <USBD_SetConfig+0x150>)
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	461a      	mov	r2, r3
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d57a:	4b29      	ldr	r3, [pc, #164]	@ (800d620 <USBD_SetConfig+0x150>)
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	4619      	mov	r1, r3
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f7fe ffd2 	bl	800c52a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d586:	6878      	ldr	r0, [r7, #4]
 800d588:	f000 fa12 	bl	800d9b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d58c:	e042      	b.n	800d614 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d58e:	4b24      	ldr	r3, [pc, #144]	@ (800d620 <USBD_SetConfig+0x150>)
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	461a      	mov	r2, r3
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	685b      	ldr	r3, [r3, #4]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d02a      	beq.n	800d5f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f7fe ffc0 	bl	800c52a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d5aa:	4b1d      	ldr	r3, [pc, #116]	@ (800d620 <USBD_SetConfig+0x150>)
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d5b4:	4b1a      	ldr	r3, [pc, #104]	@ (800d620 <USBD_SetConfig+0x150>)
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	4619      	mov	r1, r3
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7fe ff99 	bl	800c4f2 <USBD_SetClassConfig>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d5c4:	7bfb      	ldrb	r3, [r7, #15]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00f      	beq.n	800d5ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d5ca:	6839      	ldr	r1, [r7, #0]
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 f918 	bl	800d802 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	4619      	mov	r1, r3
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f7fe ffa5 	bl	800c52a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2202      	movs	r2, #2
 800d5e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d5e8:	e014      	b.n	800d614 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 f9e0 	bl	800d9b0 <USBD_CtlSendStatus>
      break;
 800d5f0:	e010      	b.n	800d614 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 f9dc 	bl	800d9b0 <USBD_CtlSendStatus>
      break;
 800d5f8:	e00c      	b.n	800d614 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d5fa:	6839      	ldr	r1, [r7, #0]
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f000 f900 	bl	800d802 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d602:	4b07      	ldr	r3, [pc, #28]	@ (800d620 <USBD_SetConfig+0x150>)
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	4619      	mov	r1, r3
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f7fe ff8e 	bl	800c52a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d60e:	2303      	movs	r3, #3
 800d610:	73fb      	strb	r3, [r7, #15]
      break;
 800d612:	bf00      	nop
  }

  return ret;
 800d614:	7bfb      	ldrb	r3, [r7, #15]
}
 800d616:	4618      	mov	r0, r3
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	200008e2 	.word	0x200008e2

0800d624 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	88db      	ldrh	r3, [r3, #6]
 800d632:	2b01      	cmp	r3, #1
 800d634:	d004      	beq.n	800d640 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d636:	6839      	ldr	r1, [r7, #0]
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 f8e2 	bl	800d802 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d63e:	e023      	b.n	800d688 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d646:	b2db      	uxtb	r3, r3
 800d648:	2b02      	cmp	r3, #2
 800d64a:	dc02      	bgt.n	800d652 <USBD_GetConfig+0x2e>
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	dc03      	bgt.n	800d658 <USBD_GetConfig+0x34>
 800d650:	e015      	b.n	800d67e <USBD_GetConfig+0x5a>
 800d652:	2b03      	cmp	r3, #3
 800d654:	d00b      	beq.n	800d66e <USBD_GetConfig+0x4a>
 800d656:	e012      	b.n	800d67e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2200      	movs	r2, #0
 800d65c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	3308      	adds	r3, #8
 800d662:	2201      	movs	r2, #1
 800d664:	4619      	mov	r1, r3
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f948 	bl	800d8fc <USBD_CtlSendData>
        break;
 800d66c:	e00c      	b.n	800d688 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	3304      	adds	r3, #4
 800d672:	2201      	movs	r2, #1
 800d674:	4619      	mov	r1, r3
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 f940 	bl	800d8fc <USBD_CtlSendData>
        break;
 800d67c:	e004      	b.n	800d688 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d67e:	6839      	ldr	r1, [r7, #0]
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 f8be 	bl	800d802 <USBD_CtlError>
        break;
 800d686:	bf00      	nop
}
 800d688:	bf00      	nop
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	3b01      	subs	r3, #1
 800d6a4:	2b02      	cmp	r3, #2
 800d6a6:	d81e      	bhi.n	800d6e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d6a8:	683b      	ldr	r3, [r7, #0]
 800d6aa:	88db      	ldrh	r3, [r3, #6]
 800d6ac:	2b02      	cmp	r3, #2
 800d6ae:	d004      	beq.n	800d6ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d6b0:	6839      	ldr	r1, [r7, #0]
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 f8a5 	bl	800d802 <USBD_CtlError>
        break;
 800d6b8:	e01a      	b.n	800d6f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2201      	movs	r2, #1
 800d6be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d005      	beq.n	800d6d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	68db      	ldr	r3, [r3, #12]
 800d6ce:	f043 0202 	orr.w	r2, r3, #2
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	330c      	adds	r3, #12
 800d6da:	2202      	movs	r2, #2
 800d6dc:	4619      	mov	r1, r3
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 f90c 	bl	800d8fc <USBD_CtlSendData>
      break;
 800d6e4:	e004      	b.n	800d6f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d6e6:	6839      	ldr	r1, [r7, #0]
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f000 f88a 	bl	800d802 <USBD_CtlError>
      break;
 800d6ee:	bf00      	nop
  }
}
 800d6f0:	bf00      	nop
 800d6f2:	3708      	adds	r7, #8
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	885b      	ldrh	r3, [r3, #2]
 800d706:	2b01      	cmp	r3, #1
 800d708:	d107      	bne.n	800d71a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2201      	movs	r2, #1
 800d70e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 f94c 	bl	800d9b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d718:	e013      	b.n	800d742 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	885b      	ldrh	r3, [r3, #2]
 800d71e:	2b02      	cmp	r3, #2
 800d720:	d10b      	bne.n	800d73a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	889b      	ldrh	r3, [r3, #4]
 800d726:	0a1b      	lsrs	r3, r3, #8
 800d728:	b29b      	uxth	r3, r3
 800d72a:	b2da      	uxtb	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f000 f93c 	bl	800d9b0 <USBD_CtlSendStatus>
}
 800d738:	e003      	b.n	800d742 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d73a:	6839      	ldr	r1, [r7, #0]
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 f860 	bl	800d802 <USBD_CtlError>
}
 800d742:	bf00      	nop
 800d744:	3708      	adds	r7, #8
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b082      	sub	sp, #8
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
 800d752:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	3b01      	subs	r3, #1
 800d75e:	2b02      	cmp	r3, #2
 800d760:	d80b      	bhi.n	800d77a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	885b      	ldrh	r3, [r3, #2]
 800d766:	2b01      	cmp	r3, #1
 800d768:	d10c      	bne.n	800d784 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2200      	movs	r2, #0
 800d76e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 f91c 	bl	800d9b0 <USBD_CtlSendStatus>
      }
      break;
 800d778:	e004      	b.n	800d784 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d77a:	6839      	ldr	r1, [r7, #0]
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 f840 	bl	800d802 <USBD_CtlError>
      break;
 800d782:	e000      	b.n	800d786 <USBD_ClrFeature+0x3c>
      break;
 800d784:	bf00      	nop
  }
}
 800d786:	bf00      	nop
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b084      	sub	sp, #16
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
 800d796:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	781a      	ldrb	r2, [r3, #0]
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	781a      	ldrb	r2, [r3, #0]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f7ff fa40 	bl	800cc3e <SWAPBYTE>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d7d2:	68f8      	ldr	r0, [r7, #12]
 800d7d4:	f7ff fa33 	bl	800cc3e <SWAPBYTE>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	461a      	mov	r2, r3
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	f7ff fa26 	bl	800cc3e <SWAPBYTE>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	80da      	strh	r2, [r3, #6]
}
 800d7fa:	bf00      	nop
 800d7fc:	3710      	adds	r7, #16
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}

0800d802 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d802:	b580      	push	{r7, lr}
 800d804:	b082      	sub	sp, #8
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
 800d80a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d80c:	2180      	movs	r1, #128	@ 0x80
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 fd0e 	bl	800e230 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d814:	2100      	movs	r1, #0
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 fd0a 	bl	800e230 <USBD_LL_StallEP>
}
 800d81c:	bf00      	nop
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}

0800d824 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b086      	sub	sp, #24
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d830:	2300      	movs	r3, #0
 800d832:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d042      	beq.n	800d8c0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d83e:	6938      	ldr	r0, [r7, #16]
 800d840:	f000 f842 	bl	800d8c8 <USBD_GetLen>
 800d844:	4603      	mov	r3, r0
 800d846:	3301      	adds	r3, #1
 800d848:	005b      	lsls	r3, r3, #1
 800d84a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d84e:	d808      	bhi.n	800d862 <USBD_GetString+0x3e>
 800d850:	6938      	ldr	r0, [r7, #16]
 800d852:	f000 f839 	bl	800d8c8 <USBD_GetLen>
 800d856:	4603      	mov	r3, r0
 800d858:	3301      	adds	r3, #1
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	005b      	lsls	r3, r3, #1
 800d85e:	b29a      	uxth	r2, r3
 800d860:	e001      	b.n	800d866 <USBD_GetString+0x42>
 800d862:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d86a:	7dfb      	ldrb	r3, [r7, #23]
 800d86c:	68ba      	ldr	r2, [r7, #8]
 800d86e:	4413      	add	r3, r2
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	7812      	ldrb	r2, [r2, #0]
 800d874:	701a      	strb	r2, [r3, #0]
  idx++;
 800d876:	7dfb      	ldrb	r3, [r7, #23]
 800d878:	3301      	adds	r3, #1
 800d87a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d87c:	7dfb      	ldrb	r3, [r7, #23]
 800d87e:	68ba      	ldr	r2, [r7, #8]
 800d880:	4413      	add	r3, r2
 800d882:	2203      	movs	r2, #3
 800d884:	701a      	strb	r2, [r3, #0]
  idx++;
 800d886:	7dfb      	ldrb	r3, [r7, #23]
 800d888:	3301      	adds	r3, #1
 800d88a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d88c:	e013      	b.n	800d8b6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d88e:	7dfb      	ldrb	r3, [r7, #23]
 800d890:	68ba      	ldr	r2, [r7, #8]
 800d892:	4413      	add	r3, r2
 800d894:	693a      	ldr	r2, [r7, #16]
 800d896:	7812      	ldrb	r2, [r2, #0]
 800d898:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	3301      	adds	r3, #1
 800d89e:	613b      	str	r3, [r7, #16]
    idx++;
 800d8a0:	7dfb      	ldrb	r3, [r7, #23]
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d8a6:	7dfb      	ldrb	r3, [r7, #23]
 800d8a8:	68ba      	ldr	r2, [r7, #8]
 800d8aa:	4413      	add	r3, r2
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	701a      	strb	r2, [r3, #0]
    idx++;
 800d8b0:	7dfb      	ldrb	r3, [r7, #23]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d1e7      	bne.n	800d88e <USBD_GetString+0x6a>
 800d8be:	e000      	b.n	800d8c2 <USBD_GetString+0x9e>
    return;
 800d8c0:	bf00      	nop
  }
}
 800d8c2:	3718      	adds	r7, #24
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	bd80      	pop	{r7, pc}

0800d8c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b085      	sub	sp, #20
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d8d8:	e005      	b.n	800d8e6 <USBD_GetLen+0x1e>
  {
    len++;
 800d8da:	7bfb      	ldrb	r3, [r7, #15]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d1f5      	bne.n	800d8da <USBD_GetLen+0x12>
  }

  return len;
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	3714      	adds	r7, #20
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fa:	4770      	bx	lr

0800d8fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2202      	movs	r2, #2
 800d90c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	687a      	ldr	r2, [r7, #4]
 800d91a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	68ba      	ldr	r2, [r7, #8]
 800d920:	2100      	movs	r1, #0
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f000 fd0d 	bl	800e342 <USBD_LL_Transmit>

  return USBD_OK;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3710      	adds	r7, #16
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b084      	sub	sp, #16
 800d936:	af00      	add	r7, sp, #0
 800d938:	60f8      	str	r0, [r7, #12]
 800d93a:	60b9      	str	r1, [r7, #8]
 800d93c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	68ba      	ldr	r2, [r7, #8]
 800d942:	2100      	movs	r1, #0
 800d944:	68f8      	ldr	r0, [r7, #12]
 800d946:	f000 fcfc 	bl	800e342 <USBD_LL_Transmit>

  return USBD_OK;
 800d94a:	2300      	movs	r3, #0
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3710      	adds	r7, #16
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}

0800d954 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b084      	sub	sp, #16
 800d958:	af00      	add	r7, sp, #0
 800d95a:	60f8      	str	r0, [r7, #12]
 800d95c:	60b9      	str	r1, [r7, #8]
 800d95e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2203      	movs	r2, #3
 800d964:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	687a      	ldr	r2, [r7, #4]
 800d96c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	68ba      	ldr	r2, [r7, #8]
 800d97c:	2100      	movs	r1, #0
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f000 fd00 	bl	800e384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d984:	2300      	movs	r3, #0
}
 800d986:	4618      	mov	r0, r3
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d98e:	b580      	push	{r7, lr}
 800d990:	b084      	sub	sp, #16
 800d992:	af00      	add	r7, sp, #0
 800d994:	60f8      	str	r0, [r7, #12]
 800d996:	60b9      	str	r1, [r7, #8]
 800d998:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	2100      	movs	r1, #0
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f000 fcef 	bl	800e384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3710      	adds	r7, #16
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2204      	movs	r2, #4
 800d9bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	2100      	movs	r1, #0
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 fcbb 	bl	800e342 <USBD_LL_Transmit>

  return USBD_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3708      	adds	r7, #8
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b082      	sub	sp, #8
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2205      	movs	r2, #5
 800d9e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	2100      	movs	r1, #0
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 fcc9 	bl	800e384 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d9f2:	2300      	movs	r3, #0
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3708      	adds	r7, #8
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800da00:	2200      	movs	r2, #0
 800da02:	4912      	ldr	r1, [pc, #72]	@ (800da4c <MX_USB_DEVICE_Init+0x50>)
 800da04:	4812      	ldr	r0, [pc, #72]	@ (800da50 <MX_USB_DEVICE_Init+0x54>)
 800da06:	f7fe fcf7 	bl	800c3f8 <USBD_Init>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d001      	beq.n	800da14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800da10:	f7f4 fb7c 	bl	800210c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800da14:	490f      	ldr	r1, [pc, #60]	@ (800da54 <MX_USB_DEVICE_Init+0x58>)
 800da16:	480e      	ldr	r0, [pc, #56]	@ (800da50 <MX_USB_DEVICE_Init+0x54>)
 800da18:	f7fe fd1e 	bl	800c458 <USBD_RegisterClass>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d001      	beq.n	800da26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800da22:	f7f4 fb73 	bl	800210c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800da26:	490c      	ldr	r1, [pc, #48]	@ (800da58 <MX_USB_DEVICE_Init+0x5c>)
 800da28:	4809      	ldr	r0, [pc, #36]	@ (800da50 <MX_USB_DEVICE_Init+0x54>)
 800da2a:	f7fe fc15 	bl	800c258 <USBD_CDC_RegisterInterface>
 800da2e:	4603      	mov	r3, r0
 800da30:	2b00      	cmp	r3, #0
 800da32:	d001      	beq.n	800da38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800da34:	f7f4 fb6a 	bl	800210c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800da38:	4805      	ldr	r0, [pc, #20]	@ (800da50 <MX_USB_DEVICE_Init+0x54>)
 800da3a:	f7fe fd43 	bl	800c4c4 <USBD_Start>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d001      	beq.n	800da48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800da44:	f7f4 fb62 	bl	800210c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800da48:	bf00      	nop
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	200000b4 	.word	0x200000b4
 800da50:	200008e4 	.word	0x200008e4
 800da54:	20000020 	.word	0x20000020
 800da58:	200000a0 	.word	0x200000a0

0800da5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800da60:	2200      	movs	r2, #0
 800da62:	4905      	ldr	r1, [pc, #20]	@ (800da78 <CDC_Init_FS+0x1c>)
 800da64:	4805      	ldr	r0, [pc, #20]	@ (800da7c <CDC_Init_FS+0x20>)
 800da66:	f7fe fc11 	bl	800c28c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800da6a:	4905      	ldr	r1, [pc, #20]	@ (800da80 <CDC_Init_FS+0x24>)
 800da6c:	4803      	ldr	r0, [pc, #12]	@ (800da7c <CDC_Init_FS+0x20>)
 800da6e:	f7fe fc2f 	bl	800c2d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800da72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800da74:	4618      	mov	r0, r3
 800da76:	bd80      	pop	{r7, pc}
 800da78:	200013c4 	.word	0x200013c4
 800da7c:	200008e4 	.word	0x200008e4
 800da80:	20000bc4 	.word	0x20000bc4

0800da84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800da84:	b480      	push	{r7}
 800da86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800da88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800da94:	b480      	push	{r7}
 800da96:	b083      	sub	sp, #12
 800da98:	af00      	add	r7, sp, #0
 800da9a:	4603      	mov	r3, r0
 800da9c:	6039      	str	r1, [r7, #0]
 800da9e:	71fb      	strb	r3, [r7, #7]
 800daa0:	4613      	mov	r3, r2
 800daa2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800daa4:	79fb      	ldrb	r3, [r7, #7]
 800daa6:	2b23      	cmp	r3, #35	@ 0x23
 800daa8:	d84a      	bhi.n	800db40 <CDC_Control_FS+0xac>
 800daaa:	a201      	add	r2, pc, #4	@ (adr r2, 800dab0 <CDC_Control_FS+0x1c>)
 800daac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab0:	0800db41 	.word	0x0800db41
 800dab4:	0800db41 	.word	0x0800db41
 800dab8:	0800db41 	.word	0x0800db41
 800dabc:	0800db41 	.word	0x0800db41
 800dac0:	0800db41 	.word	0x0800db41
 800dac4:	0800db41 	.word	0x0800db41
 800dac8:	0800db41 	.word	0x0800db41
 800dacc:	0800db41 	.word	0x0800db41
 800dad0:	0800db41 	.word	0x0800db41
 800dad4:	0800db41 	.word	0x0800db41
 800dad8:	0800db41 	.word	0x0800db41
 800dadc:	0800db41 	.word	0x0800db41
 800dae0:	0800db41 	.word	0x0800db41
 800dae4:	0800db41 	.word	0x0800db41
 800dae8:	0800db41 	.word	0x0800db41
 800daec:	0800db41 	.word	0x0800db41
 800daf0:	0800db41 	.word	0x0800db41
 800daf4:	0800db41 	.word	0x0800db41
 800daf8:	0800db41 	.word	0x0800db41
 800dafc:	0800db41 	.word	0x0800db41
 800db00:	0800db41 	.word	0x0800db41
 800db04:	0800db41 	.word	0x0800db41
 800db08:	0800db41 	.word	0x0800db41
 800db0c:	0800db41 	.word	0x0800db41
 800db10:	0800db41 	.word	0x0800db41
 800db14:	0800db41 	.word	0x0800db41
 800db18:	0800db41 	.word	0x0800db41
 800db1c:	0800db41 	.word	0x0800db41
 800db20:	0800db41 	.word	0x0800db41
 800db24:	0800db41 	.word	0x0800db41
 800db28:	0800db41 	.word	0x0800db41
 800db2c:	0800db41 	.word	0x0800db41
 800db30:	0800db41 	.word	0x0800db41
 800db34:	0800db41 	.word	0x0800db41
 800db38:	0800db41 	.word	0x0800db41
 800db3c:	0800db41 	.word	0x0800db41
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800db40:	bf00      	nop
  }

  return (USBD_OK);
 800db42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800db44:	4618      	mov	r0, r3
 800db46:	370c      	adds	r7, #12
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800db5a:	6879      	ldr	r1, [r7, #4]
 800db5c:	480e      	ldr	r0, [pc, #56]	@ (800db98 <CDC_Receive_FS+0x48>)
 800db5e:	f7fe fbb7 	bl	800c2d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800db62:	480d      	ldr	r0, [pc, #52]	@ (800db98 <CDC_Receive_FS+0x48>)
 800db64:	f7fe fc12 	bl	800c38c <USBD_CDC_ReceivePacket>

  //https://controllerstech.com/send-and-receive-data-to-pc-without-uart-stm32-usb-com/

  uint8_t len = (uint8_t) *Len;
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	73fb      	strb	r3, [r7, #15]

    if(len == ROS_COMM_RX_SIZE){
 800db6e:	7bfb      	ldrb	r3, [r7, #15]
 800db70:	2b0d      	cmp	r3, #13
 800db72:	d105      	bne.n	800db80 <CDC_Receive_FS+0x30>
	  memcpy((uint8_t *)&rbc_Packet_t, Buf, len);  // copy the data to the buffer
 800db74:	7bfb      	ldrb	r3, [r7, #15]
 800db76:	461a      	mov	r2, r3
 800db78:	6879      	ldr	r1, [r7, #4]
 800db7a:	4808      	ldr	r0, [pc, #32]	@ (800db9c <CDC_Receive_FS+0x4c>)
 800db7c:	f000 fcac 	bl	800e4d8 <memcpy>
    }

    rx_flag = 1;
 800db80:	4b07      	ldr	r3, [pc, #28]	@ (800dba0 <CDC_Receive_FS+0x50>)
 800db82:	2201      	movs	r2, #1
 800db84:	701a      	strb	r2, [r3, #0]
    tx_flag = 0;
 800db86:	4b07      	ldr	r3, [pc, #28]	@ (800dba4 <CDC_Receive_FS+0x54>)
 800db88:	2200      	movs	r2, #0
 800db8a:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800db8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3710      	adds	r7, #16
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	200008e4 	.word	0x200008e4
 800db9c:	200008ac 	.word	0x200008ac
 800dba0:	20000bc0 	.word	0x20000bc0
 800dba4:	2000009e 	.word	0x2000009e

0800dba8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dbb8:	4b10      	ldr	r3, [pc, #64]	@ (800dbfc <CDC_Transmit_FS+0x54>)
 800dbba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dbbe:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0){
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d001      	beq.n	800dbce <CDC_Transmit_FS+0x26>
      return USBD_BUSY;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e011      	b.n	800dbf2 <CDC_Transmit_FS+0x4a>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dbce:	887b      	ldrh	r3, [r7, #2]
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	6879      	ldr	r1, [r7, #4]
 800dbd4:	4809      	ldr	r0, [pc, #36]	@ (800dbfc <CDC_Transmit_FS+0x54>)
 800dbd6:	f7fe fb59 	bl	800c28c <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dbda:	4808      	ldr	r0, [pc, #32]	@ (800dbfc <CDC_Transmit_FS+0x54>)
 800dbdc:	f7fe fb96 	bl	800c30c <USBD_CDC_TransmitPacket>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	73fb      	strb	r3, [r7, #15]

    rx_flag = 0;
 800dbe4:	4b06      	ldr	r3, [pc, #24]	@ (800dc00 <CDC_Transmit_FS+0x58>)
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	701a      	strb	r2, [r3, #0]
    tx_flag = 1;
 800dbea:	4b06      	ldr	r3, [pc, #24]	@ (800dc04 <CDC_Transmit_FS+0x5c>)
 800dbec:	2201      	movs	r2, #1
 800dbee:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 7 */
  return result;
 800dbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	200008e4 	.word	0x200008e4
 800dc00:	20000bc0 	.word	0x20000bc0
 800dc04:	2000009e 	.word	0x2000009e

0800dc08 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b087      	sub	sp, #28
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	4613      	mov	r3, r2
 800dc14:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dc16:	2300      	movs	r3, #0
 800dc18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dc1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	371c      	adds	r7, #28
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr
	...

0800dc2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	4603      	mov	r3, r0
 800dc34:	6039      	str	r1, [r7, #0]
 800dc36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	2212      	movs	r2, #18
 800dc3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dc3e:	4b03      	ldr	r3, [pc, #12]	@ (800dc4c <USBD_FS_DeviceDescriptor+0x20>)
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	370c      	adds	r7, #12
 800dc44:	46bd      	mov	sp, r7
 800dc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4a:	4770      	bx	lr
 800dc4c:	200000d0 	.word	0x200000d0

0800dc50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	4603      	mov	r3, r0
 800dc58:	6039      	str	r1, [r7, #0]
 800dc5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dc5c:	683b      	ldr	r3, [r7, #0]
 800dc5e:	2204      	movs	r2, #4
 800dc60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dc62:	4b03      	ldr	r3, [pc, #12]	@ (800dc70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	370c      	adds	r7, #12
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr
 800dc70:	200000e4 	.word	0x200000e4

0800dc74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b082      	sub	sp, #8
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	6039      	str	r1, [r7, #0]
 800dc7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc80:	79fb      	ldrb	r3, [r7, #7]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d105      	bne.n	800dc92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dc86:	683a      	ldr	r2, [r7, #0]
 800dc88:	4907      	ldr	r1, [pc, #28]	@ (800dca8 <USBD_FS_ProductStrDescriptor+0x34>)
 800dc8a:	4808      	ldr	r0, [pc, #32]	@ (800dcac <USBD_FS_ProductStrDescriptor+0x38>)
 800dc8c:	f7ff fdca 	bl	800d824 <USBD_GetString>
 800dc90:	e004      	b.n	800dc9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dc92:	683a      	ldr	r2, [r7, #0]
 800dc94:	4904      	ldr	r1, [pc, #16]	@ (800dca8 <USBD_FS_ProductStrDescriptor+0x34>)
 800dc96:	4805      	ldr	r0, [pc, #20]	@ (800dcac <USBD_FS_ProductStrDescriptor+0x38>)
 800dc98:	f7ff fdc4 	bl	800d824 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dc9c:	4b02      	ldr	r3, [pc, #8]	@ (800dca8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	20001bc4 	.word	0x20001bc4
 800dcac:	0800fd50 	.word	0x0800fd50

0800dcb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b082      	sub	sp, #8
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	6039      	str	r1, [r7, #0]
 800dcba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dcbc:	683a      	ldr	r2, [r7, #0]
 800dcbe:	4904      	ldr	r1, [pc, #16]	@ (800dcd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dcc0:	4804      	ldr	r0, [pc, #16]	@ (800dcd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dcc2:	f7ff fdaf 	bl	800d824 <USBD_GetString>
  return USBD_StrDesc;
 800dcc6:	4b02      	ldr	r3, [pc, #8]	@ (800dcd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3708      	adds	r7, #8
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}
 800dcd0:	20001bc4 	.word	0x20001bc4
 800dcd4:	0800fd68 	.word	0x0800fd68

0800dcd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	4603      	mov	r3, r0
 800dce0:	6039      	str	r1, [r7, #0]
 800dce2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	221a      	movs	r2, #26
 800dce8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dcea:	f000 f843 	bl	800dd74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dcee:	4b02      	ldr	r3, [pc, #8]	@ (800dcf8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3708      	adds	r7, #8
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	200000e8 	.word	0x200000e8

0800dcfc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	4603      	mov	r3, r0
 800dd04:	6039      	str	r1, [r7, #0]
 800dd06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dd08:	79fb      	ldrb	r3, [r7, #7]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d105      	bne.n	800dd1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd0e:	683a      	ldr	r2, [r7, #0]
 800dd10:	4907      	ldr	r1, [pc, #28]	@ (800dd30 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd12:	4808      	ldr	r0, [pc, #32]	@ (800dd34 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd14:	f7ff fd86 	bl	800d824 <USBD_GetString>
 800dd18:	e004      	b.n	800dd24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd1a:	683a      	ldr	r2, [r7, #0]
 800dd1c:	4904      	ldr	r1, [pc, #16]	@ (800dd30 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd1e:	4805      	ldr	r0, [pc, #20]	@ (800dd34 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd20:	f7ff fd80 	bl	800d824 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd24:	4b02      	ldr	r3, [pc, #8]	@ (800dd30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	20001bc4 	.word	0x20001bc4
 800dd34:	0800fd7c 	.word	0x0800fd7c

0800dd38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	4603      	mov	r3, r0
 800dd40:	6039      	str	r1, [r7, #0]
 800dd42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd44:	79fb      	ldrb	r3, [r7, #7]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d105      	bne.n	800dd56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dd4a:	683a      	ldr	r2, [r7, #0]
 800dd4c:	4907      	ldr	r1, [pc, #28]	@ (800dd6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dd4e:	4808      	ldr	r0, [pc, #32]	@ (800dd70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dd50:	f7ff fd68 	bl	800d824 <USBD_GetString>
 800dd54:	e004      	b.n	800dd60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dd56:	683a      	ldr	r2, [r7, #0]
 800dd58:	4904      	ldr	r1, [pc, #16]	@ (800dd6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dd5a:	4805      	ldr	r0, [pc, #20]	@ (800dd70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dd5c:	f7ff fd62 	bl	800d824 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd60:	4b02      	ldr	r3, [pc, #8]	@ (800dd6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3708      	adds	r7, #8
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	20001bc4 	.word	0x20001bc4
 800dd70:	0800fd88 	.word	0x0800fd88

0800dd74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dd7a:	4b0f      	ldr	r3, [pc, #60]	@ (800ddb8 <Get_SerialNum+0x44>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dd80:	4b0e      	ldr	r3, [pc, #56]	@ (800ddbc <Get_SerialNum+0x48>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dd86:	4b0e      	ldr	r3, [pc, #56]	@ (800ddc0 <Get_SerialNum+0x4c>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dd8c:	68fa      	ldr	r2, [r7, #12]
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	4413      	add	r3, r2
 800dd92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d009      	beq.n	800ddae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dd9a:	2208      	movs	r2, #8
 800dd9c:	4909      	ldr	r1, [pc, #36]	@ (800ddc4 <Get_SerialNum+0x50>)
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f000 f814 	bl	800ddcc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dda4:	2204      	movs	r2, #4
 800dda6:	4908      	ldr	r1, [pc, #32]	@ (800ddc8 <Get_SerialNum+0x54>)
 800dda8:	68b8      	ldr	r0, [r7, #8]
 800ddaa:	f000 f80f 	bl	800ddcc <IntToUnicode>
  }
}
 800ddae:	bf00      	nop
 800ddb0:	3710      	adds	r7, #16
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	1fff7a10 	.word	0x1fff7a10
 800ddbc:	1fff7a14 	.word	0x1fff7a14
 800ddc0:	1fff7a18 	.word	0x1fff7a18
 800ddc4:	200000ea 	.word	0x200000ea
 800ddc8:	200000fa 	.word	0x200000fa

0800ddcc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b087      	sub	sp, #28
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	4613      	mov	r3, r2
 800ddd8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ddda:	2300      	movs	r3, #0
 800dddc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ddde:	2300      	movs	r3, #0
 800dde0:	75fb      	strb	r3, [r7, #23]
 800dde2:	e027      	b.n	800de34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	0f1b      	lsrs	r3, r3, #28
 800dde8:	2b09      	cmp	r3, #9
 800ddea:	d80b      	bhi.n	800de04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	0f1b      	lsrs	r3, r3, #28
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	7dfb      	ldrb	r3, [r7, #23]
 800ddf4:	005b      	lsls	r3, r3, #1
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	440b      	add	r3, r1
 800ddfc:	3230      	adds	r2, #48	@ 0x30
 800ddfe:	b2d2      	uxtb	r2, r2
 800de00:	701a      	strb	r2, [r3, #0]
 800de02:	e00a      	b.n	800de1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	0f1b      	lsrs	r3, r3, #28
 800de08:	b2da      	uxtb	r2, r3
 800de0a:	7dfb      	ldrb	r3, [r7, #23]
 800de0c:	005b      	lsls	r3, r3, #1
 800de0e:	4619      	mov	r1, r3
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	440b      	add	r3, r1
 800de14:	3237      	adds	r2, #55	@ 0x37
 800de16:	b2d2      	uxtb	r2, r2
 800de18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	011b      	lsls	r3, r3, #4
 800de1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800de20:	7dfb      	ldrb	r3, [r7, #23]
 800de22:	005b      	lsls	r3, r3, #1
 800de24:	3301      	adds	r3, #1
 800de26:	68ba      	ldr	r2, [r7, #8]
 800de28:	4413      	add	r3, r2
 800de2a:	2200      	movs	r2, #0
 800de2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800de2e:	7dfb      	ldrb	r3, [r7, #23]
 800de30:	3301      	adds	r3, #1
 800de32:	75fb      	strb	r3, [r7, #23]
 800de34:	7dfa      	ldrb	r2, [r7, #23]
 800de36:	79fb      	ldrb	r3, [r7, #7]
 800de38:	429a      	cmp	r2, r3
 800de3a:	d3d3      	bcc.n	800dde4 <IntToUnicode+0x18>
  }
}
 800de3c:	bf00      	nop
 800de3e:	bf00      	nop
 800de40:	371c      	adds	r7, #28
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr
	...

0800de4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b08a      	sub	sp, #40	@ 0x28
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de54:	f107 0314 	add.w	r3, r7, #20
 800de58:	2200      	movs	r2, #0
 800de5a:	601a      	str	r2, [r3, #0]
 800de5c:	605a      	str	r2, [r3, #4]
 800de5e:	609a      	str	r2, [r3, #8]
 800de60:	60da      	str	r2, [r3, #12]
 800de62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800de6c:	d13a      	bne.n	800dee4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de6e:	2300      	movs	r3, #0
 800de70:	613b      	str	r3, [r7, #16]
 800de72:	4b1e      	ldr	r3, [pc, #120]	@ (800deec <HAL_PCD_MspInit+0xa0>)
 800de74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de76:	4a1d      	ldr	r2, [pc, #116]	@ (800deec <HAL_PCD_MspInit+0xa0>)
 800de78:	f043 0301 	orr.w	r3, r3, #1
 800de7c:	6313      	str	r3, [r2, #48]	@ 0x30
 800de7e:	4b1b      	ldr	r3, [pc, #108]	@ (800deec <HAL_PCD_MspInit+0xa0>)
 800de80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de82:	f003 0301 	and.w	r3, r3, #1
 800de86:	613b      	str	r3, [r7, #16]
 800de88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800de8a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800de8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de90:	2302      	movs	r3, #2
 800de92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de94:	2300      	movs	r3, #0
 800de96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de98:	2303      	movs	r3, #3
 800de9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800de9c:	230a      	movs	r3, #10
 800de9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dea0:	f107 0314 	add.w	r3, r7, #20
 800dea4:	4619      	mov	r1, r3
 800dea6:	4812      	ldr	r0, [pc, #72]	@ (800def0 <HAL_PCD_MspInit+0xa4>)
 800dea8:	f7f5 fb88 	bl	80035bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800deac:	4b0f      	ldr	r3, [pc, #60]	@ (800deec <HAL_PCD_MspInit+0xa0>)
 800deae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800deb0:	4a0e      	ldr	r2, [pc, #56]	@ (800deec <HAL_PCD_MspInit+0xa0>)
 800deb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800deb6:	6353      	str	r3, [r2, #52]	@ 0x34
 800deb8:	2300      	movs	r3, #0
 800deba:	60fb      	str	r3, [r7, #12]
 800debc:	4b0b      	ldr	r3, [pc, #44]	@ (800deec <HAL_PCD_MspInit+0xa0>)
 800debe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dec0:	4a0a      	ldr	r2, [pc, #40]	@ (800deec <HAL_PCD_MspInit+0xa0>)
 800dec2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800dec6:	6453      	str	r3, [r2, #68]	@ 0x44
 800dec8:	4b08      	ldr	r3, [pc, #32]	@ (800deec <HAL_PCD_MspInit+0xa0>)
 800deca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800decc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ded0:	60fb      	str	r3, [r7, #12]
 800ded2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ded4:	2200      	movs	r2, #0
 800ded6:	2100      	movs	r1, #0
 800ded8:	2043      	movs	r0, #67	@ 0x43
 800deda:	f7f5 fa98 	bl	800340e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dede:	2043      	movs	r0, #67	@ 0x43
 800dee0:	f7f5 fab1 	bl	8003446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dee4:	bf00      	nop
 800dee6:	3728      	adds	r7, #40	@ 0x28
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}
 800deec:	40023800 	.word	0x40023800
 800def0:	40020000 	.word	0x40020000

0800def4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800df08:	4619      	mov	r1, r3
 800df0a:	4610      	mov	r0, r2
 800df0c:	f7fe fb27 	bl	800c55e <USBD_LL_SetupStage>
}
 800df10:	bf00      	nop
 800df12:	3708      	adds	r7, #8
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	460b      	mov	r3, r1
 800df22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800df2a:	78fa      	ldrb	r2, [r7, #3]
 800df2c:	6879      	ldr	r1, [r7, #4]
 800df2e:	4613      	mov	r3, r2
 800df30:	00db      	lsls	r3, r3, #3
 800df32:	4413      	add	r3, r2
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	440b      	add	r3, r1
 800df38:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800df3c:	681a      	ldr	r2, [r3, #0]
 800df3e:	78fb      	ldrb	r3, [r7, #3]
 800df40:	4619      	mov	r1, r3
 800df42:	f7fe fb61 	bl	800c608 <USBD_LL_DataOutStage>
}
 800df46:	bf00      	nop
 800df48:	3708      	adds	r7, #8
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}

0800df4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df4e:	b580      	push	{r7, lr}
 800df50:	b082      	sub	sp, #8
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
 800df56:	460b      	mov	r3, r1
 800df58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800df60:	78fa      	ldrb	r2, [r7, #3]
 800df62:	6879      	ldr	r1, [r7, #4]
 800df64:	4613      	mov	r3, r2
 800df66:	00db      	lsls	r3, r3, #3
 800df68:	4413      	add	r3, r2
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	440b      	add	r3, r1
 800df6e:	3320      	adds	r3, #32
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	78fb      	ldrb	r3, [r7, #3]
 800df74:	4619      	mov	r1, r3
 800df76:	f7fe fbfa 	bl	800c76e <USBD_LL_DataInStage>
}
 800df7a:	bf00      	nop
 800df7c:	3708      	adds	r7, #8
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}

0800df82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df82:	b580      	push	{r7, lr}
 800df84:	b082      	sub	sp, #8
 800df86:	af00      	add	r7, sp, #0
 800df88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df90:	4618      	mov	r0, r3
 800df92:	f7fe fd34 	bl	800c9fe <USBD_LL_SOF>
}
 800df96:	bf00      	nop
 800df98:	3708      	adds	r7, #8
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}

0800df9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df9e:	b580      	push	{r7, lr}
 800dfa0:	b084      	sub	sp, #16
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	79db      	ldrb	r3, [r3, #7]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d102      	bne.n	800dfb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	73fb      	strb	r3, [r7, #15]
 800dfb6:	e008      	b.n	800dfca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	79db      	ldrb	r3, [r3, #7]
 800dfbc:	2b02      	cmp	r3, #2
 800dfbe:	d102      	bne.n	800dfc6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	73fb      	strb	r3, [r7, #15]
 800dfc4:	e001      	b.n	800dfca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dfc6:	f7f4 f8a1 	bl	800210c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfd0:	7bfa      	ldrb	r2, [r7, #15]
 800dfd2:	4611      	mov	r1, r2
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7fe fcce 	bl	800c976 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7fe fc76 	bl	800c8d2 <USBD_LL_Reset>
}
 800dfe6:	bf00      	nop
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
	...

0800dff0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b082      	sub	sp, #8
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dffe:	4618      	mov	r0, r3
 800e000:	f7fe fcc9 	bl	800c996 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	6812      	ldr	r2, [r2, #0]
 800e012:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e016:	f043 0301 	orr.w	r3, r3, #1
 800e01a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	7adb      	ldrb	r3, [r3, #11]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d005      	beq.n	800e030 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e024:	4b04      	ldr	r3, [pc, #16]	@ (800e038 <HAL_PCD_SuspendCallback+0x48>)
 800e026:	691b      	ldr	r3, [r3, #16]
 800e028:	4a03      	ldr	r2, [pc, #12]	@ (800e038 <HAL_PCD_SuspendCallback+0x48>)
 800e02a:	f043 0306 	orr.w	r3, r3, #6
 800e02e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e030:	bf00      	nop
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	e000ed00 	.word	0xe000ed00

0800e03c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b082      	sub	sp, #8
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e04a:	4618      	mov	r0, r3
 800e04c:	f7fe fcbf 	bl	800c9ce <USBD_LL_Resume>
}
 800e050:	bf00      	nop
 800e052:	3708      	adds	r7, #8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	460b      	mov	r3, r1
 800e062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e06a:	78fa      	ldrb	r2, [r7, #3]
 800e06c:	4611      	mov	r1, r2
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fe fd17 	bl	800caa2 <USBD_LL_IsoOUTIncomplete>
}
 800e074:	bf00      	nop
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	460b      	mov	r3, r1
 800e086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e08e:	78fa      	ldrb	r2, [r7, #3]
 800e090:	4611      	mov	r1, r2
 800e092:	4618      	mov	r0, r3
 800e094:	f7fe fcd3 	bl	800ca3e <USBD_LL_IsoINIncomplete>
}
 800e098:	bf00      	nop
 800e09a:	3708      	adds	r7, #8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	f7fe fd29 	bl	800cb06 <USBD_LL_DevConnected>
}
 800e0b4:	bf00      	nop
 800e0b6:	3708      	adds	r7, #8
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7fe fd26 	bl	800cb1c <USBD_LL_DevDisconnected>
}
 800e0d0:	bf00      	nop
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d13c      	bne.n	800e162 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e0e8:	4a20      	ldr	r2, [pc, #128]	@ (800e16c <USBD_LL_Init+0x94>)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	4a1e      	ldr	r2, [pc, #120]	@ (800e16c <USBD_LL_Init+0x94>)
 800e0f4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e0f8:	4b1c      	ldr	r3, [pc, #112]	@ (800e16c <USBD_LL_Init+0x94>)
 800e0fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e0fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e100:	4b1a      	ldr	r3, [pc, #104]	@ (800e16c <USBD_LL_Init+0x94>)
 800e102:	2204      	movs	r2, #4
 800e104:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e106:	4b19      	ldr	r3, [pc, #100]	@ (800e16c <USBD_LL_Init+0x94>)
 800e108:	2202      	movs	r2, #2
 800e10a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e10c:	4b17      	ldr	r3, [pc, #92]	@ (800e16c <USBD_LL_Init+0x94>)
 800e10e:	2200      	movs	r2, #0
 800e110:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e112:	4b16      	ldr	r3, [pc, #88]	@ (800e16c <USBD_LL_Init+0x94>)
 800e114:	2202      	movs	r2, #2
 800e116:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e118:	4b14      	ldr	r3, [pc, #80]	@ (800e16c <USBD_LL_Init+0x94>)
 800e11a:	2200      	movs	r2, #0
 800e11c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e11e:	4b13      	ldr	r3, [pc, #76]	@ (800e16c <USBD_LL_Init+0x94>)
 800e120:	2200      	movs	r2, #0
 800e122:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e124:	4b11      	ldr	r3, [pc, #68]	@ (800e16c <USBD_LL_Init+0x94>)
 800e126:	2200      	movs	r2, #0
 800e128:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e12a:	4b10      	ldr	r3, [pc, #64]	@ (800e16c <USBD_LL_Init+0x94>)
 800e12c:	2200      	movs	r2, #0
 800e12e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e130:	4b0e      	ldr	r3, [pc, #56]	@ (800e16c <USBD_LL_Init+0x94>)
 800e132:	2200      	movs	r2, #0
 800e134:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e136:	480d      	ldr	r0, [pc, #52]	@ (800e16c <USBD_LL_Init+0x94>)
 800e138:	f7f6 fd16 	bl	8004b68 <HAL_PCD_Init>
 800e13c:	4603      	mov	r3, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d001      	beq.n	800e146 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e142:	f7f3 ffe3 	bl	800210c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e146:	2180      	movs	r1, #128	@ 0x80
 800e148:	4808      	ldr	r0, [pc, #32]	@ (800e16c <USBD_LL_Init+0x94>)
 800e14a:	f7f7 ff42 	bl	8005fd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e14e:	2240      	movs	r2, #64	@ 0x40
 800e150:	2100      	movs	r1, #0
 800e152:	4806      	ldr	r0, [pc, #24]	@ (800e16c <USBD_LL_Init+0x94>)
 800e154:	f7f7 fef6 	bl	8005f44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e158:	2280      	movs	r2, #128	@ 0x80
 800e15a:	2101      	movs	r1, #1
 800e15c:	4803      	ldr	r0, [pc, #12]	@ (800e16c <USBD_LL_Init+0x94>)
 800e15e:	f7f7 fef1 	bl	8005f44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e162:	2300      	movs	r3, #0
}
 800e164:	4618      	mov	r0, r3
 800e166:	3708      	adds	r7, #8
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	20001dc4 	.word	0x20001dc4

0800e170 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e178:	2300      	movs	r3, #0
 800e17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e17c:	2300      	movs	r3, #0
 800e17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e186:	4618      	mov	r0, r3
 800e188:	f7f6 fdfd 	bl	8004d86 <HAL_PCD_Start>
 800e18c:	4603      	mov	r3, r0
 800e18e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e190:	7bfb      	ldrb	r3, [r7, #15]
 800e192:	4618      	mov	r0, r3
 800e194:	f000 f942 	bl	800e41c <USBD_Get_USB_Status>
 800e198:	4603      	mov	r3, r0
 800e19a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e19c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3710      	adds	r7, #16
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}

0800e1a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e1a6:	b580      	push	{r7, lr}
 800e1a8:	b084      	sub	sp, #16
 800e1aa:	af00      	add	r7, sp, #0
 800e1ac:	6078      	str	r0, [r7, #4]
 800e1ae:	4608      	mov	r0, r1
 800e1b0:	4611      	mov	r1, r2
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	70fb      	strb	r3, [r7, #3]
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	70bb      	strb	r3, [r7, #2]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e1ce:	78bb      	ldrb	r3, [r7, #2]
 800e1d0:	883a      	ldrh	r2, [r7, #0]
 800e1d2:	78f9      	ldrb	r1, [r7, #3]
 800e1d4:	f7f7 fad1 	bl	800577a <HAL_PCD_EP_Open>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1dc:	7bfb      	ldrb	r3, [r7, #15]
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f000 f91c 	bl	800e41c <USBD_Get_USB_Status>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3710      	adds	r7, #16
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}

0800e1f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1f2:	b580      	push	{r7, lr}
 800e1f4:	b084      	sub	sp, #16
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	6078      	str	r0, [r7, #4]
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1fe:	2300      	movs	r3, #0
 800e200:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e202:	2300      	movs	r3, #0
 800e204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e20c:	78fa      	ldrb	r2, [r7, #3]
 800e20e:	4611      	mov	r1, r2
 800e210:	4618      	mov	r0, r3
 800e212:	f7f7 fb1c 	bl	800584e <HAL_PCD_EP_Close>
 800e216:	4603      	mov	r3, r0
 800e218:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e21a:	7bfb      	ldrb	r3, [r7, #15]
 800e21c:	4618      	mov	r0, r3
 800e21e:	f000 f8fd 	bl	800e41c <USBD_Get_USB_Status>
 800e222:	4603      	mov	r3, r0
 800e224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e226:	7bbb      	ldrb	r3, [r7, #14]
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3710      	adds	r7, #16
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	460b      	mov	r3, r1
 800e23a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e23c:	2300      	movs	r3, #0
 800e23e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e24a:	78fa      	ldrb	r2, [r7, #3]
 800e24c:	4611      	mov	r1, r2
 800e24e:	4618      	mov	r0, r3
 800e250:	f7f7 fbd4 	bl	80059fc <HAL_PCD_EP_SetStall>
 800e254:	4603      	mov	r3, r0
 800e256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e258:	7bfb      	ldrb	r3, [r7, #15]
 800e25a:	4618      	mov	r0, r3
 800e25c:	f000 f8de 	bl	800e41c <USBD_Get_USB_Status>
 800e260:	4603      	mov	r3, r0
 800e262:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e264:	7bbb      	ldrb	r3, [r7, #14]
}
 800e266:	4618      	mov	r0, r3
 800e268:	3710      	adds	r7, #16
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}

0800e26e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e26e:	b580      	push	{r7, lr}
 800e270:	b084      	sub	sp, #16
 800e272:	af00      	add	r7, sp, #0
 800e274:	6078      	str	r0, [r7, #4]
 800e276:	460b      	mov	r3, r1
 800e278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e27a:	2300      	movs	r3, #0
 800e27c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e27e:	2300      	movs	r3, #0
 800e280:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e288:	78fa      	ldrb	r2, [r7, #3]
 800e28a:	4611      	mov	r1, r2
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7f7 fc18 	bl	8005ac2 <HAL_PCD_EP_ClrStall>
 800e292:	4603      	mov	r3, r0
 800e294:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e296:	7bfb      	ldrb	r3, [r7, #15]
 800e298:	4618      	mov	r0, r3
 800e29a:	f000 f8bf 	bl	800e41c <USBD_Get_USB_Status>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3710      	adds	r7, #16
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e2c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	da0b      	bge.n	800e2e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e2c8:	78fb      	ldrb	r3, [r7, #3]
 800e2ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2ce:	68f9      	ldr	r1, [r7, #12]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	00db      	lsls	r3, r3, #3
 800e2d4:	4413      	add	r3, r2
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	440b      	add	r3, r1
 800e2da:	3316      	adds	r3, #22
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	e00b      	b.n	800e2f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e2e0:	78fb      	ldrb	r3, [r7, #3]
 800e2e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2e6:	68f9      	ldr	r1, [r7, #12]
 800e2e8:	4613      	mov	r3, r2
 800e2ea:	00db      	lsls	r3, r3, #3
 800e2ec:	4413      	add	r3, r2
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	440b      	add	r3, r1
 800e2f2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e2f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3714      	adds	r7, #20
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr

0800e304 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	460b      	mov	r3, r1
 800e30e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e310:	2300      	movs	r3, #0
 800e312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e314:	2300      	movs	r3, #0
 800e316:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e31e:	78fa      	ldrb	r2, [r7, #3]
 800e320:	4611      	mov	r1, r2
 800e322:	4618      	mov	r0, r3
 800e324:	f7f7 fa05 	bl	8005732 <HAL_PCD_SetAddress>
 800e328:	4603      	mov	r3, r0
 800e32a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e32c:	7bfb      	ldrb	r3, [r7, #15]
 800e32e:	4618      	mov	r0, r3
 800e330:	f000 f874 	bl	800e41c <USBD_Get_USB_Status>
 800e334:	4603      	mov	r3, r0
 800e336:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e338:	7bbb      	ldrb	r3, [r7, #14]
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3710      	adds	r7, #16
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b086      	sub	sp, #24
 800e346:	af00      	add	r7, sp, #0
 800e348:	60f8      	str	r0, [r7, #12]
 800e34a:	607a      	str	r2, [r7, #4]
 800e34c:	603b      	str	r3, [r7, #0]
 800e34e:	460b      	mov	r3, r1
 800e350:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e352:	2300      	movs	r3, #0
 800e354:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e356:	2300      	movs	r3, #0
 800e358:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e360:	7af9      	ldrb	r1, [r7, #11]
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	f7f7 fb0f 	bl	8005988 <HAL_PCD_EP_Transmit>
 800e36a:	4603      	mov	r3, r0
 800e36c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e36e:	7dfb      	ldrb	r3, [r7, #23]
 800e370:	4618      	mov	r0, r3
 800e372:	f000 f853 	bl	800e41c <USBD_Get_USB_Status>
 800e376:	4603      	mov	r3, r0
 800e378:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e37a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3718      	adds	r7, #24
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b086      	sub	sp, #24
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60f8      	str	r0, [r7, #12]
 800e38c:	607a      	str	r2, [r7, #4]
 800e38e:	603b      	str	r3, [r7, #0]
 800e390:	460b      	mov	r3, r1
 800e392:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e394:	2300      	movs	r3, #0
 800e396:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e398:	2300      	movs	r3, #0
 800e39a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3a2:	7af9      	ldrb	r1, [r7, #11]
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	687a      	ldr	r2, [r7, #4]
 800e3a8:	f7f7 fa9b 	bl	80058e2 <HAL_PCD_EP_Receive>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3b0:	7dfb      	ldrb	r3, [r7, #23]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f000 f832 	bl	800e41c <USBD_Get_USB_Status>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3718      	adds	r7, #24
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}

0800e3c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b082      	sub	sp, #8
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	6078      	str	r0, [r7, #4]
 800e3ce:	460b      	mov	r3, r1
 800e3d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3d8:	78fa      	ldrb	r2, [r7, #3]
 800e3da:	4611      	mov	r1, r2
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7f7 fabb 	bl	8005958 <HAL_PCD_EP_GetRxCount>
 800e3e2:	4603      	mov	r3, r0
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3708      	adds	r7, #8
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b083      	sub	sp, #12
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e3f4:	4b03      	ldr	r3, [pc, #12]	@ (800e404 <USBD_static_malloc+0x18>)
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	370c      	adds	r7, #12
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr
 800e402:	bf00      	nop
 800e404:	200022a8 	.word	0x200022a8

0800e408 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e408:	b480      	push	{r7}
 800e40a:	b083      	sub	sp, #12
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]

}
 800e410:	bf00      	nop
 800e412:	370c      	adds	r7, #12
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr

0800e41c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b085      	sub	sp, #20
 800e420:	af00      	add	r7, sp, #0
 800e422:	4603      	mov	r3, r0
 800e424:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e426:	2300      	movs	r3, #0
 800e428:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e42a:	79fb      	ldrb	r3, [r7, #7]
 800e42c:	2b03      	cmp	r3, #3
 800e42e:	d817      	bhi.n	800e460 <USBD_Get_USB_Status+0x44>
 800e430:	a201      	add	r2, pc, #4	@ (adr r2, 800e438 <USBD_Get_USB_Status+0x1c>)
 800e432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e436:	bf00      	nop
 800e438:	0800e449 	.word	0x0800e449
 800e43c:	0800e44f 	.word	0x0800e44f
 800e440:	0800e455 	.word	0x0800e455
 800e444:	0800e45b 	.word	0x0800e45b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e448:	2300      	movs	r3, #0
 800e44a:	73fb      	strb	r3, [r7, #15]
    break;
 800e44c:	e00b      	b.n	800e466 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e44e:	2303      	movs	r3, #3
 800e450:	73fb      	strb	r3, [r7, #15]
    break;
 800e452:	e008      	b.n	800e466 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e454:	2301      	movs	r3, #1
 800e456:	73fb      	strb	r3, [r7, #15]
    break;
 800e458:	e005      	b.n	800e466 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e45a:	2303      	movs	r3, #3
 800e45c:	73fb      	strb	r3, [r7, #15]
    break;
 800e45e:	e002      	b.n	800e466 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e460:	2303      	movs	r3, #3
 800e462:	73fb      	strb	r3, [r7, #15]
    break;
 800e464:	bf00      	nop
  }
  return usb_status;
 800e466:	7bfb      	ldrb	r3, [r7, #15]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3714      	adds	r7, #20
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <memset>:
 800e474:	4402      	add	r2, r0
 800e476:	4603      	mov	r3, r0
 800e478:	4293      	cmp	r3, r2
 800e47a:	d100      	bne.n	800e47e <memset+0xa>
 800e47c:	4770      	bx	lr
 800e47e:	f803 1b01 	strb.w	r1, [r3], #1
 800e482:	e7f9      	b.n	800e478 <memset+0x4>

0800e484 <__errno>:
 800e484:	4b01      	ldr	r3, [pc, #4]	@ (800e48c <__errno+0x8>)
 800e486:	6818      	ldr	r0, [r3, #0]
 800e488:	4770      	bx	lr
 800e48a:	bf00      	nop
 800e48c:	20000104 	.word	0x20000104

0800e490 <__libc_init_array>:
 800e490:	b570      	push	{r4, r5, r6, lr}
 800e492:	4d0d      	ldr	r5, [pc, #52]	@ (800e4c8 <__libc_init_array+0x38>)
 800e494:	4c0d      	ldr	r4, [pc, #52]	@ (800e4cc <__libc_init_array+0x3c>)
 800e496:	1b64      	subs	r4, r4, r5
 800e498:	10a4      	asrs	r4, r4, #2
 800e49a:	2600      	movs	r6, #0
 800e49c:	42a6      	cmp	r6, r4
 800e49e:	d109      	bne.n	800e4b4 <__libc_init_array+0x24>
 800e4a0:	4d0b      	ldr	r5, [pc, #44]	@ (800e4d0 <__libc_init_array+0x40>)
 800e4a2:	4c0c      	ldr	r4, [pc, #48]	@ (800e4d4 <__libc_init_array+0x44>)
 800e4a4:	f001 fc14 	bl	800fcd0 <_init>
 800e4a8:	1b64      	subs	r4, r4, r5
 800e4aa:	10a4      	asrs	r4, r4, #2
 800e4ac:	2600      	movs	r6, #0
 800e4ae:	42a6      	cmp	r6, r4
 800e4b0:	d105      	bne.n	800e4be <__libc_init_array+0x2e>
 800e4b2:	bd70      	pop	{r4, r5, r6, pc}
 800e4b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4b8:	4798      	blx	r3
 800e4ba:	3601      	adds	r6, #1
 800e4bc:	e7ee      	b.n	800e49c <__libc_init_array+0xc>
 800e4be:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4c2:	4798      	blx	r3
 800e4c4:	3601      	adds	r6, #1
 800e4c6:	e7f2      	b.n	800e4ae <__libc_init_array+0x1e>
 800e4c8:	08010000 	.word	0x08010000
 800e4cc:	08010000 	.word	0x08010000
 800e4d0:	08010000 	.word	0x08010000
 800e4d4:	08010004 	.word	0x08010004

0800e4d8 <memcpy>:
 800e4d8:	440a      	add	r2, r1
 800e4da:	4291      	cmp	r1, r2
 800e4dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4e0:	d100      	bne.n	800e4e4 <memcpy+0xc>
 800e4e2:	4770      	bx	lr
 800e4e4:	b510      	push	{r4, lr}
 800e4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4ee:	4291      	cmp	r1, r2
 800e4f0:	d1f9      	bne.n	800e4e6 <memcpy+0xe>
 800e4f2:	bd10      	pop	{r4, pc}

0800e4f4 <atan2>:
 800e4f4:	f000 bb34 	b.w	800eb60 <__ieee754_atan2>

0800e4f8 <sqrt>:
 800e4f8:	b538      	push	{r3, r4, r5, lr}
 800e4fa:	ed2d 8b02 	vpush	{d8}
 800e4fe:	ec55 4b10 	vmov	r4, r5, d0
 800e502:	f000 f8cd 	bl	800e6a0 <__ieee754_sqrt>
 800e506:	4622      	mov	r2, r4
 800e508:	462b      	mov	r3, r5
 800e50a:	4620      	mov	r0, r4
 800e50c:	4629      	mov	r1, r5
 800e50e:	eeb0 8a40 	vmov.f32	s16, s0
 800e512:	eef0 8a60 	vmov.f32	s17, s1
 800e516:	f7f2 faad 	bl	8000a74 <__aeabi_dcmpun>
 800e51a:	b990      	cbnz	r0, 800e542 <sqrt+0x4a>
 800e51c:	2200      	movs	r2, #0
 800e51e:	2300      	movs	r3, #0
 800e520:	4620      	mov	r0, r4
 800e522:	4629      	mov	r1, r5
 800e524:	f7f2 fa7e 	bl	8000a24 <__aeabi_dcmplt>
 800e528:	b158      	cbz	r0, 800e542 <sqrt+0x4a>
 800e52a:	f7ff ffab 	bl	800e484 <__errno>
 800e52e:	2321      	movs	r3, #33	@ 0x21
 800e530:	6003      	str	r3, [r0, #0]
 800e532:	2200      	movs	r2, #0
 800e534:	2300      	movs	r3, #0
 800e536:	4610      	mov	r0, r2
 800e538:	4619      	mov	r1, r3
 800e53a:	f7f2 f92b 	bl	8000794 <__aeabi_ddiv>
 800e53e:	ec41 0b18 	vmov	d8, r0, r1
 800e542:	eeb0 0a48 	vmov.f32	s0, s16
 800e546:	eef0 0a68 	vmov.f32	s1, s17
 800e54a:	ecbd 8b02 	vpop	{d8}
 800e54e:	bd38      	pop	{r3, r4, r5, pc}

0800e550 <cos>:
 800e550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e552:	ec53 2b10 	vmov	r2, r3, d0
 800e556:	4826      	ldr	r0, [pc, #152]	@ (800e5f0 <cos+0xa0>)
 800e558:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e55c:	4281      	cmp	r1, r0
 800e55e:	d806      	bhi.n	800e56e <cos+0x1e>
 800e560:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e5e8 <cos+0x98>
 800e564:	b005      	add	sp, #20
 800e566:	f85d eb04 	ldr.w	lr, [sp], #4
 800e56a:	f000 b975 	b.w	800e858 <__kernel_cos>
 800e56e:	4821      	ldr	r0, [pc, #132]	@ (800e5f4 <cos+0xa4>)
 800e570:	4281      	cmp	r1, r0
 800e572:	d908      	bls.n	800e586 <cos+0x36>
 800e574:	4610      	mov	r0, r2
 800e576:	4619      	mov	r1, r3
 800e578:	f7f1 fe2a 	bl	80001d0 <__aeabi_dsub>
 800e57c:	ec41 0b10 	vmov	d0, r0, r1
 800e580:	b005      	add	sp, #20
 800e582:	f85d fb04 	ldr.w	pc, [sp], #4
 800e586:	4668      	mov	r0, sp
 800e588:	f000 fbb2 	bl	800ecf0 <__ieee754_rem_pio2>
 800e58c:	f000 0003 	and.w	r0, r0, #3
 800e590:	2801      	cmp	r0, #1
 800e592:	d00b      	beq.n	800e5ac <cos+0x5c>
 800e594:	2802      	cmp	r0, #2
 800e596:	d015      	beq.n	800e5c4 <cos+0x74>
 800e598:	b9d8      	cbnz	r0, 800e5d2 <cos+0x82>
 800e59a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e59e:	ed9d 0b00 	vldr	d0, [sp]
 800e5a2:	f000 f959 	bl	800e858 <__kernel_cos>
 800e5a6:	ec51 0b10 	vmov	r0, r1, d0
 800e5aa:	e7e7      	b.n	800e57c <cos+0x2c>
 800e5ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e5b0:	ed9d 0b00 	vldr	d0, [sp]
 800e5b4:	f000 fa18 	bl	800e9e8 <__kernel_sin>
 800e5b8:	ec53 2b10 	vmov	r2, r3, d0
 800e5bc:	4610      	mov	r0, r2
 800e5be:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e5c2:	e7db      	b.n	800e57c <cos+0x2c>
 800e5c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e5c8:	ed9d 0b00 	vldr	d0, [sp]
 800e5cc:	f000 f944 	bl	800e858 <__kernel_cos>
 800e5d0:	e7f2      	b.n	800e5b8 <cos+0x68>
 800e5d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e5d6:	ed9d 0b00 	vldr	d0, [sp]
 800e5da:	2001      	movs	r0, #1
 800e5dc:	f000 fa04 	bl	800e9e8 <__kernel_sin>
 800e5e0:	e7e1      	b.n	800e5a6 <cos+0x56>
 800e5e2:	bf00      	nop
 800e5e4:	f3af 8000 	nop.w
	...
 800e5f0:	3fe921fb 	.word	0x3fe921fb
 800e5f4:	7fefffff 	.word	0x7fefffff

0800e5f8 <sin>:
 800e5f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e5fa:	ec53 2b10 	vmov	r2, r3, d0
 800e5fe:	4826      	ldr	r0, [pc, #152]	@ (800e698 <sin+0xa0>)
 800e600:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e604:	4281      	cmp	r1, r0
 800e606:	d807      	bhi.n	800e618 <sin+0x20>
 800e608:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e690 <sin+0x98>
 800e60c:	2000      	movs	r0, #0
 800e60e:	b005      	add	sp, #20
 800e610:	f85d eb04 	ldr.w	lr, [sp], #4
 800e614:	f000 b9e8 	b.w	800e9e8 <__kernel_sin>
 800e618:	4820      	ldr	r0, [pc, #128]	@ (800e69c <sin+0xa4>)
 800e61a:	4281      	cmp	r1, r0
 800e61c:	d908      	bls.n	800e630 <sin+0x38>
 800e61e:	4610      	mov	r0, r2
 800e620:	4619      	mov	r1, r3
 800e622:	f7f1 fdd5 	bl	80001d0 <__aeabi_dsub>
 800e626:	ec41 0b10 	vmov	d0, r0, r1
 800e62a:	b005      	add	sp, #20
 800e62c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e630:	4668      	mov	r0, sp
 800e632:	f000 fb5d 	bl	800ecf0 <__ieee754_rem_pio2>
 800e636:	f000 0003 	and.w	r0, r0, #3
 800e63a:	2801      	cmp	r0, #1
 800e63c:	d00c      	beq.n	800e658 <sin+0x60>
 800e63e:	2802      	cmp	r0, #2
 800e640:	d011      	beq.n	800e666 <sin+0x6e>
 800e642:	b9e8      	cbnz	r0, 800e680 <sin+0x88>
 800e644:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e648:	ed9d 0b00 	vldr	d0, [sp]
 800e64c:	2001      	movs	r0, #1
 800e64e:	f000 f9cb 	bl	800e9e8 <__kernel_sin>
 800e652:	ec51 0b10 	vmov	r0, r1, d0
 800e656:	e7e6      	b.n	800e626 <sin+0x2e>
 800e658:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e65c:	ed9d 0b00 	vldr	d0, [sp]
 800e660:	f000 f8fa 	bl	800e858 <__kernel_cos>
 800e664:	e7f5      	b.n	800e652 <sin+0x5a>
 800e666:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e66a:	ed9d 0b00 	vldr	d0, [sp]
 800e66e:	2001      	movs	r0, #1
 800e670:	f000 f9ba 	bl	800e9e8 <__kernel_sin>
 800e674:	ec53 2b10 	vmov	r2, r3, d0
 800e678:	4610      	mov	r0, r2
 800e67a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e67e:	e7d2      	b.n	800e626 <sin+0x2e>
 800e680:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e684:	ed9d 0b00 	vldr	d0, [sp]
 800e688:	f000 f8e6 	bl	800e858 <__kernel_cos>
 800e68c:	e7f2      	b.n	800e674 <sin+0x7c>
 800e68e:	bf00      	nop
	...
 800e698:	3fe921fb 	.word	0x3fe921fb
 800e69c:	7fefffff 	.word	0x7fefffff

0800e6a0 <__ieee754_sqrt>:
 800e6a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a4:	4a68      	ldr	r2, [pc, #416]	@ (800e848 <__ieee754_sqrt+0x1a8>)
 800e6a6:	ec55 4b10 	vmov	r4, r5, d0
 800e6aa:	43aa      	bics	r2, r5
 800e6ac:	462b      	mov	r3, r5
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	d110      	bne.n	800e6d4 <__ieee754_sqrt+0x34>
 800e6b2:	4622      	mov	r2, r4
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	4629      	mov	r1, r5
 800e6b8:	f7f1 ff42 	bl	8000540 <__aeabi_dmul>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	460b      	mov	r3, r1
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	4629      	mov	r1, r5
 800e6c4:	f7f1 fd86 	bl	80001d4 <__adddf3>
 800e6c8:	4604      	mov	r4, r0
 800e6ca:	460d      	mov	r5, r1
 800e6cc:	ec45 4b10 	vmov	d0, r4, r5
 800e6d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d4:	2d00      	cmp	r5, #0
 800e6d6:	dc0e      	bgt.n	800e6f6 <__ieee754_sqrt+0x56>
 800e6d8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e6dc:	4322      	orrs	r2, r4
 800e6de:	d0f5      	beq.n	800e6cc <__ieee754_sqrt+0x2c>
 800e6e0:	b19d      	cbz	r5, 800e70a <__ieee754_sqrt+0x6a>
 800e6e2:	4622      	mov	r2, r4
 800e6e4:	4620      	mov	r0, r4
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	f7f1 fd72 	bl	80001d0 <__aeabi_dsub>
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	f7f2 f850 	bl	8000794 <__aeabi_ddiv>
 800e6f4:	e7e8      	b.n	800e6c8 <__ieee754_sqrt+0x28>
 800e6f6:	152a      	asrs	r2, r5, #20
 800e6f8:	d115      	bne.n	800e726 <__ieee754_sqrt+0x86>
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	e009      	b.n	800e712 <__ieee754_sqrt+0x72>
 800e6fe:	0acb      	lsrs	r3, r1, #11
 800e700:	3a15      	subs	r2, #21
 800e702:	0549      	lsls	r1, r1, #21
 800e704:	2b00      	cmp	r3, #0
 800e706:	d0fa      	beq.n	800e6fe <__ieee754_sqrt+0x5e>
 800e708:	e7f7      	b.n	800e6fa <__ieee754_sqrt+0x5a>
 800e70a:	462a      	mov	r2, r5
 800e70c:	e7fa      	b.n	800e704 <__ieee754_sqrt+0x64>
 800e70e:	005b      	lsls	r3, r3, #1
 800e710:	3001      	adds	r0, #1
 800e712:	02dc      	lsls	r4, r3, #11
 800e714:	d5fb      	bpl.n	800e70e <__ieee754_sqrt+0x6e>
 800e716:	1e44      	subs	r4, r0, #1
 800e718:	1b12      	subs	r2, r2, r4
 800e71a:	f1c0 0420 	rsb	r4, r0, #32
 800e71e:	fa21 f404 	lsr.w	r4, r1, r4
 800e722:	4323      	orrs	r3, r4
 800e724:	4081      	lsls	r1, r0
 800e726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e72a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e72e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e732:	07d2      	lsls	r2, r2, #31
 800e734:	bf5c      	itt	pl
 800e736:	005b      	lslpl	r3, r3, #1
 800e738:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e73c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e740:	bf58      	it	pl
 800e742:	0049      	lslpl	r1, r1, #1
 800e744:	2600      	movs	r6, #0
 800e746:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e74a:	106d      	asrs	r5, r5, #1
 800e74c:	0049      	lsls	r1, r1, #1
 800e74e:	2016      	movs	r0, #22
 800e750:	4632      	mov	r2, r6
 800e752:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e756:	1917      	adds	r7, r2, r4
 800e758:	429f      	cmp	r7, r3
 800e75a:	bfde      	ittt	le
 800e75c:	193a      	addle	r2, r7, r4
 800e75e:	1bdb      	suble	r3, r3, r7
 800e760:	1936      	addle	r6, r6, r4
 800e762:	0fcf      	lsrs	r7, r1, #31
 800e764:	3801      	subs	r0, #1
 800e766:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e76a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e76e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e772:	d1f0      	bne.n	800e756 <__ieee754_sqrt+0xb6>
 800e774:	4604      	mov	r4, r0
 800e776:	2720      	movs	r7, #32
 800e778:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e77c:	429a      	cmp	r2, r3
 800e77e:	eb00 0e0c 	add.w	lr, r0, ip
 800e782:	db02      	blt.n	800e78a <__ieee754_sqrt+0xea>
 800e784:	d113      	bne.n	800e7ae <__ieee754_sqrt+0x10e>
 800e786:	458e      	cmp	lr, r1
 800e788:	d811      	bhi.n	800e7ae <__ieee754_sqrt+0x10e>
 800e78a:	f1be 0f00 	cmp.w	lr, #0
 800e78e:	eb0e 000c 	add.w	r0, lr, ip
 800e792:	da42      	bge.n	800e81a <__ieee754_sqrt+0x17a>
 800e794:	2800      	cmp	r0, #0
 800e796:	db40      	blt.n	800e81a <__ieee754_sqrt+0x17a>
 800e798:	f102 0801 	add.w	r8, r2, #1
 800e79c:	1a9b      	subs	r3, r3, r2
 800e79e:	458e      	cmp	lr, r1
 800e7a0:	bf88      	it	hi
 800e7a2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e7a6:	eba1 010e 	sub.w	r1, r1, lr
 800e7aa:	4464      	add	r4, ip
 800e7ac:	4642      	mov	r2, r8
 800e7ae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e7b2:	3f01      	subs	r7, #1
 800e7b4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e7b8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e7bc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e7c0:	d1dc      	bne.n	800e77c <__ieee754_sqrt+0xdc>
 800e7c2:	4319      	orrs	r1, r3
 800e7c4:	d01b      	beq.n	800e7fe <__ieee754_sqrt+0x15e>
 800e7c6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e84c <__ieee754_sqrt+0x1ac>
 800e7ca:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e850 <__ieee754_sqrt+0x1b0>
 800e7ce:	e9da 0100 	ldrd	r0, r1, [sl]
 800e7d2:	e9db 2300 	ldrd	r2, r3, [fp]
 800e7d6:	f7f1 fcfb 	bl	80001d0 <__aeabi_dsub>
 800e7da:	e9da 8900 	ldrd	r8, r9, [sl]
 800e7de:	4602      	mov	r2, r0
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	4640      	mov	r0, r8
 800e7e4:	4649      	mov	r1, r9
 800e7e6:	f7f2 f927 	bl	8000a38 <__aeabi_dcmple>
 800e7ea:	b140      	cbz	r0, 800e7fe <__ieee754_sqrt+0x15e>
 800e7ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e7f0:	e9da 0100 	ldrd	r0, r1, [sl]
 800e7f4:	e9db 2300 	ldrd	r2, r3, [fp]
 800e7f8:	d111      	bne.n	800e81e <__ieee754_sqrt+0x17e>
 800e7fa:	3601      	adds	r6, #1
 800e7fc:	463c      	mov	r4, r7
 800e7fe:	1072      	asrs	r2, r6, #1
 800e800:	0863      	lsrs	r3, r4, #1
 800e802:	07f1      	lsls	r1, r6, #31
 800e804:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e808:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e80c:	bf48      	it	mi
 800e80e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e812:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e816:	4618      	mov	r0, r3
 800e818:	e756      	b.n	800e6c8 <__ieee754_sqrt+0x28>
 800e81a:	4690      	mov	r8, r2
 800e81c:	e7be      	b.n	800e79c <__ieee754_sqrt+0xfc>
 800e81e:	f7f1 fcd9 	bl	80001d4 <__adddf3>
 800e822:	e9da 8900 	ldrd	r8, r9, [sl]
 800e826:	4602      	mov	r2, r0
 800e828:	460b      	mov	r3, r1
 800e82a:	4640      	mov	r0, r8
 800e82c:	4649      	mov	r1, r9
 800e82e:	f7f2 f8f9 	bl	8000a24 <__aeabi_dcmplt>
 800e832:	b120      	cbz	r0, 800e83e <__ieee754_sqrt+0x19e>
 800e834:	1ca0      	adds	r0, r4, #2
 800e836:	bf08      	it	eq
 800e838:	3601      	addeq	r6, #1
 800e83a:	3402      	adds	r4, #2
 800e83c:	e7df      	b.n	800e7fe <__ieee754_sqrt+0x15e>
 800e83e:	1c63      	adds	r3, r4, #1
 800e840:	f023 0401 	bic.w	r4, r3, #1
 800e844:	e7db      	b.n	800e7fe <__ieee754_sqrt+0x15e>
 800e846:	bf00      	nop
 800e848:	7ff00000 	.word	0x7ff00000
 800e84c:	20000160 	.word	0x20000160
 800e850:	20000158 	.word	0x20000158
 800e854:	00000000 	.word	0x00000000

0800e858 <__kernel_cos>:
 800e858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85c:	ec57 6b10 	vmov	r6, r7, d0
 800e860:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e864:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800e868:	ed8d 1b00 	vstr	d1, [sp]
 800e86c:	d206      	bcs.n	800e87c <__kernel_cos+0x24>
 800e86e:	4630      	mov	r0, r6
 800e870:	4639      	mov	r1, r7
 800e872:	f7f2 f915 	bl	8000aa0 <__aeabi_d2iz>
 800e876:	2800      	cmp	r0, #0
 800e878:	f000 8088 	beq.w	800e98c <__kernel_cos+0x134>
 800e87c:	4632      	mov	r2, r6
 800e87e:	463b      	mov	r3, r7
 800e880:	4630      	mov	r0, r6
 800e882:	4639      	mov	r1, r7
 800e884:	f7f1 fe5c 	bl	8000540 <__aeabi_dmul>
 800e888:	4b51      	ldr	r3, [pc, #324]	@ (800e9d0 <__kernel_cos+0x178>)
 800e88a:	2200      	movs	r2, #0
 800e88c:	4604      	mov	r4, r0
 800e88e:	460d      	mov	r5, r1
 800e890:	f7f1 fe56 	bl	8000540 <__aeabi_dmul>
 800e894:	a340      	add	r3, pc, #256	@ (adr r3, 800e998 <__kernel_cos+0x140>)
 800e896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89a:	4682      	mov	sl, r0
 800e89c:	468b      	mov	fp, r1
 800e89e:	4620      	mov	r0, r4
 800e8a0:	4629      	mov	r1, r5
 800e8a2:	f7f1 fe4d 	bl	8000540 <__aeabi_dmul>
 800e8a6:	a33e      	add	r3, pc, #248	@ (adr r3, 800e9a0 <__kernel_cos+0x148>)
 800e8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ac:	f7f1 fc92 	bl	80001d4 <__adddf3>
 800e8b0:	4622      	mov	r2, r4
 800e8b2:	462b      	mov	r3, r5
 800e8b4:	f7f1 fe44 	bl	8000540 <__aeabi_dmul>
 800e8b8:	a33b      	add	r3, pc, #236	@ (adr r3, 800e9a8 <__kernel_cos+0x150>)
 800e8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8be:	f7f1 fc87 	bl	80001d0 <__aeabi_dsub>
 800e8c2:	4622      	mov	r2, r4
 800e8c4:	462b      	mov	r3, r5
 800e8c6:	f7f1 fe3b 	bl	8000540 <__aeabi_dmul>
 800e8ca:	a339      	add	r3, pc, #228	@ (adr r3, 800e9b0 <__kernel_cos+0x158>)
 800e8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d0:	f7f1 fc80 	bl	80001d4 <__adddf3>
 800e8d4:	4622      	mov	r2, r4
 800e8d6:	462b      	mov	r3, r5
 800e8d8:	f7f1 fe32 	bl	8000540 <__aeabi_dmul>
 800e8dc:	a336      	add	r3, pc, #216	@ (adr r3, 800e9b8 <__kernel_cos+0x160>)
 800e8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e2:	f7f1 fc75 	bl	80001d0 <__aeabi_dsub>
 800e8e6:	4622      	mov	r2, r4
 800e8e8:	462b      	mov	r3, r5
 800e8ea:	f7f1 fe29 	bl	8000540 <__aeabi_dmul>
 800e8ee:	a334      	add	r3, pc, #208	@ (adr r3, 800e9c0 <__kernel_cos+0x168>)
 800e8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f4:	f7f1 fc6e 	bl	80001d4 <__adddf3>
 800e8f8:	4622      	mov	r2, r4
 800e8fa:	462b      	mov	r3, r5
 800e8fc:	f7f1 fe20 	bl	8000540 <__aeabi_dmul>
 800e900:	4622      	mov	r2, r4
 800e902:	462b      	mov	r3, r5
 800e904:	f7f1 fe1c 	bl	8000540 <__aeabi_dmul>
 800e908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e90c:	4604      	mov	r4, r0
 800e90e:	460d      	mov	r5, r1
 800e910:	4630      	mov	r0, r6
 800e912:	4639      	mov	r1, r7
 800e914:	f7f1 fe14 	bl	8000540 <__aeabi_dmul>
 800e918:	460b      	mov	r3, r1
 800e91a:	4602      	mov	r2, r0
 800e91c:	4629      	mov	r1, r5
 800e91e:	4620      	mov	r0, r4
 800e920:	f7f1 fc56 	bl	80001d0 <__aeabi_dsub>
 800e924:	4b2b      	ldr	r3, [pc, #172]	@ (800e9d4 <__kernel_cos+0x17c>)
 800e926:	4598      	cmp	r8, r3
 800e928:	4606      	mov	r6, r0
 800e92a:	460f      	mov	r7, r1
 800e92c:	d810      	bhi.n	800e950 <__kernel_cos+0xf8>
 800e92e:	4602      	mov	r2, r0
 800e930:	460b      	mov	r3, r1
 800e932:	4650      	mov	r0, sl
 800e934:	4659      	mov	r1, fp
 800e936:	f7f1 fc4b 	bl	80001d0 <__aeabi_dsub>
 800e93a:	460b      	mov	r3, r1
 800e93c:	4926      	ldr	r1, [pc, #152]	@ (800e9d8 <__kernel_cos+0x180>)
 800e93e:	4602      	mov	r2, r0
 800e940:	2000      	movs	r0, #0
 800e942:	f7f1 fc45 	bl	80001d0 <__aeabi_dsub>
 800e946:	ec41 0b10 	vmov	d0, r0, r1
 800e94a:	b003      	add	sp, #12
 800e94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e950:	4b22      	ldr	r3, [pc, #136]	@ (800e9dc <__kernel_cos+0x184>)
 800e952:	4921      	ldr	r1, [pc, #132]	@ (800e9d8 <__kernel_cos+0x180>)
 800e954:	4598      	cmp	r8, r3
 800e956:	bf8c      	ite	hi
 800e958:	4d21      	ldrhi	r5, [pc, #132]	@ (800e9e0 <__kernel_cos+0x188>)
 800e95a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800e95e:	2400      	movs	r4, #0
 800e960:	4622      	mov	r2, r4
 800e962:	462b      	mov	r3, r5
 800e964:	2000      	movs	r0, #0
 800e966:	f7f1 fc33 	bl	80001d0 <__aeabi_dsub>
 800e96a:	4622      	mov	r2, r4
 800e96c:	4680      	mov	r8, r0
 800e96e:	4689      	mov	r9, r1
 800e970:	462b      	mov	r3, r5
 800e972:	4650      	mov	r0, sl
 800e974:	4659      	mov	r1, fp
 800e976:	f7f1 fc2b 	bl	80001d0 <__aeabi_dsub>
 800e97a:	4632      	mov	r2, r6
 800e97c:	463b      	mov	r3, r7
 800e97e:	f7f1 fc27 	bl	80001d0 <__aeabi_dsub>
 800e982:	4602      	mov	r2, r0
 800e984:	460b      	mov	r3, r1
 800e986:	4640      	mov	r0, r8
 800e988:	4649      	mov	r1, r9
 800e98a:	e7da      	b.n	800e942 <__kernel_cos+0xea>
 800e98c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800e9c8 <__kernel_cos+0x170>
 800e990:	e7db      	b.n	800e94a <__kernel_cos+0xf2>
 800e992:	bf00      	nop
 800e994:	f3af 8000 	nop.w
 800e998:	be8838d4 	.word	0xbe8838d4
 800e99c:	bda8fae9 	.word	0xbda8fae9
 800e9a0:	bdb4b1c4 	.word	0xbdb4b1c4
 800e9a4:	3e21ee9e 	.word	0x3e21ee9e
 800e9a8:	809c52ad 	.word	0x809c52ad
 800e9ac:	3e927e4f 	.word	0x3e927e4f
 800e9b0:	19cb1590 	.word	0x19cb1590
 800e9b4:	3efa01a0 	.word	0x3efa01a0
 800e9b8:	16c15177 	.word	0x16c15177
 800e9bc:	3f56c16c 	.word	0x3f56c16c
 800e9c0:	5555554c 	.word	0x5555554c
 800e9c4:	3fa55555 	.word	0x3fa55555
 800e9c8:	00000000 	.word	0x00000000
 800e9cc:	3ff00000 	.word	0x3ff00000
 800e9d0:	3fe00000 	.word	0x3fe00000
 800e9d4:	3fd33332 	.word	0x3fd33332
 800e9d8:	3ff00000 	.word	0x3ff00000
 800e9dc:	3fe90000 	.word	0x3fe90000
 800e9e0:	3fd20000 	.word	0x3fd20000
 800e9e4:	00000000 	.word	0x00000000

0800e9e8 <__kernel_sin>:
 800e9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ec:	ec55 4b10 	vmov	r4, r5, d0
 800e9f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e9f4:	b085      	sub	sp, #20
 800e9f6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e9fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e9fe:	4680      	mov	r8, r0
 800ea00:	d205      	bcs.n	800ea0e <__kernel_sin+0x26>
 800ea02:	4620      	mov	r0, r4
 800ea04:	4629      	mov	r1, r5
 800ea06:	f7f2 f84b 	bl	8000aa0 <__aeabi_d2iz>
 800ea0a:	2800      	cmp	r0, #0
 800ea0c:	d052      	beq.n	800eab4 <__kernel_sin+0xcc>
 800ea0e:	4622      	mov	r2, r4
 800ea10:	462b      	mov	r3, r5
 800ea12:	4620      	mov	r0, r4
 800ea14:	4629      	mov	r1, r5
 800ea16:	f7f1 fd93 	bl	8000540 <__aeabi_dmul>
 800ea1a:	4682      	mov	sl, r0
 800ea1c:	468b      	mov	fp, r1
 800ea1e:	4602      	mov	r2, r0
 800ea20:	460b      	mov	r3, r1
 800ea22:	4620      	mov	r0, r4
 800ea24:	4629      	mov	r1, r5
 800ea26:	f7f1 fd8b 	bl	8000540 <__aeabi_dmul>
 800ea2a:	a342      	add	r3, pc, #264	@ (adr r3, 800eb34 <__kernel_sin+0x14c>)
 800ea2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea30:	e9cd 0100 	strd	r0, r1, [sp]
 800ea34:	4650      	mov	r0, sl
 800ea36:	4659      	mov	r1, fp
 800ea38:	f7f1 fd82 	bl	8000540 <__aeabi_dmul>
 800ea3c:	a33f      	add	r3, pc, #252	@ (adr r3, 800eb3c <__kernel_sin+0x154>)
 800ea3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea42:	f7f1 fbc5 	bl	80001d0 <__aeabi_dsub>
 800ea46:	4652      	mov	r2, sl
 800ea48:	465b      	mov	r3, fp
 800ea4a:	f7f1 fd79 	bl	8000540 <__aeabi_dmul>
 800ea4e:	a33d      	add	r3, pc, #244	@ (adr r3, 800eb44 <__kernel_sin+0x15c>)
 800ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea54:	f7f1 fbbe 	bl	80001d4 <__adddf3>
 800ea58:	4652      	mov	r2, sl
 800ea5a:	465b      	mov	r3, fp
 800ea5c:	f7f1 fd70 	bl	8000540 <__aeabi_dmul>
 800ea60:	a33a      	add	r3, pc, #232	@ (adr r3, 800eb4c <__kernel_sin+0x164>)
 800ea62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea66:	f7f1 fbb3 	bl	80001d0 <__aeabi_dsub>
 800ea6a:	4652      	mov	r2, sl
 800ea6c:	465b      	mov	r3, fp
 800ea6e:	f7f1 fd67 	bl	8000540 <__aeabi_dmul>
 800ea72:	a338      	add	r3, pc, #224	@ (adr r3, 800eb54 <__kernel_sin+0x16c>)
 800ea74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea78:	f7f1 fbac 	bl	80001d4 <__adddf3>
 800ea7c:	4606      	mov	r6, r0
 800ea7e:	460f      	mov	r7, r1
 800ea80:	f1b8 0f00 	cmp.w	r8, #0
 800ea84:	d11b      	bne.n	800eabe <__kernel_sin+0xd6>
 800ea86:	4602      	mov	r2, r0
 800ea88:	460b      	mov	r3, r1
 800ea8a:	4650      	mov	r0, sl
 800ea8c:	4659      	mov	r1, fp
 800ea8e:	f7f1 fd57 	bl	8000540 <__aeabi_dmul>
 800ea92:	a325      	add	r3, pc, #148	@ (adr r3, 800eb28 <__kernel_sin+0x140>)
 800ea94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea98:	f7f1 fb9a 	bl	80001d0 <__aeabi_dsub>
 800ea9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eaa0:	f7f1 fd4e 	bl	8000540 <__aeabi_dmul>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	460b      	mov	r3, r1
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	4629      	mov	r1, r5
 800eaac:	f7f1 fb92 	bl	80001d4 <__adddf3>
 800eab0:	4604      	mov	r4, r0
 800eab2:	460d      	mov	r5, r1
 800eab4:	ec45 4b10 	vmov	d0, r4, r5
 800eab8:	b005      	add	sp, #20
 800eaba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eabe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eac2:	4b1b      	ldr	r3, [pc, #108]	@ (800eb30 <__kernel_sin+0x148>)
 800eac4:	2200      	movs	r2, #0
 800eac6:	f7f1 fd3b 	bl	8000540 <__aeabi_dmul>
 800eaca:	4632      	mov	r2, r6
 800eacc:	4680      	mov	r8, r0
 800eace:	4689      	mov	r9, r1
 800ead0:	463b      	mov	r3, r7
 800ead2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ead6:	f7f1 fd33 	bl	8000540 <__aeabi_dmul>
 800eada:	4602      	mov	r2, r0
 800eadc:	460b      	mov	r3, r1
 800eade:	4640      	mov	r0, r8
 800eae0:	4649      	mov	r1, r9
 800eae2:	f7f1 fb75 	bl	80001d0 <__aeabi_dsub>
 800eae6:	4652      	mov	r2, sl
 800eae8:	465b      	mov	r3, fp
 800eaea:	f7f1 fd29 	bl	8000540 <__aeabi_dmul>
 800eaee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eaf2:	f7f1 fb6d 	bl	80001d0 <__aeabi_dsub>
 800eaf6:	a30c      	add	r3, pc, #48	@ (adr r3, 800eb28 <__kernel_sin+0x140>)
 800eaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafc:	4606      	mov	r6, r0
 800eafe:	460f      	mov	r7, r1
 800eb00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb04:	f7f1 fd1c 	bl	8000540 <__aeabi_dmul>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	460b      	mov	r3, r1
 800eb0c:	4630      	mov	r0, r6
 800eb0e:	4639      	mov	r1, r7
 800eb10:	f7f1 fb60 	bl	80001d4 <__adddf3>
 800eb14:	4602      	mov	r2, r0
 800eb16:	460b      	mov	r3, r1
 800eb18:	4620      	mov	r0, r4
 800eb1a:	4629      	mov	r1, r5
 800eb1c:	f7f1 fb58 	bl	80001d0 <__aeabi_dsub>
 800eb20:	e7c6      	b.n	800eab0 <__kernel_sin+0xc8>
 800eb22:	bf00      	nop
 800eb24:	f3af 8000 	nop.w
 800eb28:	55555549 	.word	0x55555549
 800eb2c:	3fc55555 	.word	0x3fc55555
 800eb30:	3fe00000 	.word	0x3fe00000
 800eb34:	5acfd57c 	.word	0x5acfd57c
 800eb38:	3de5d93a 	.word	0x3de5d93a
 800eb3c:	8a2b9ceb 	.word	0x8a2b9ceb
 800eb40:	3e5ae5e6 	.word	0x3e5ae5e6
 800eb44:	57b1fe7d 	.word	0x57b1fe7d
 800eb48:	3ec71de3 	.word	0x3ec71de3
 800eb4c:	19c161d5 	.word	0x19c161d5
 800eb50:	3f2a01a0 	.word	0x3f2a01a0
 800eb54:	1110f8a6 	.word	0x1110f8a6
 800eb58:	3f811111 	.word	0x3f811111
 800eb5c:	00000000 	.word	0x00000000

0800eb60 <__ieee754_atan2>:
 800eb60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb64:	ec57 6b11 	vmov	r6, r7, d1
 800eb68:	4273      	negs	r3, r6
 800eb6a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800ece8 <__ieee754_atan2+0x188>
 800eb6e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800eb72:	4333      	orrs	r3, r6
 800eb74:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800eb78:	4543      	cmp	r3, r8
 800eb7a:	ec51 0b10 	vmov	r0, r1, d0
 800eb7e:	4635      	mov	r5, r6
 800eb80:	d809      	bhi.n	800eb96 <__ieee754_atan2+0x36>
 800eb82:	4244      	negs	r4, r0
 800eb84:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800eb88:	4304      	orrs	r4, r0
 800eb8a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800eb8e:	4544      	cmp	r4, r8
 800eb90:	468e      	mov	lr, r1
 800eb92:	4681      	mov	r9, r0
 800eb94:	d907      	bls.n	800eba6 <__ieee754_atan2+0x46>
 800eb96:	4632      	mov	r2, r6
 800eb98:	463b      	mov	r3, r7
 800eb9a:	f7f1 fb1b 	bl	80001d4 <__adddf3>
 800eb9e:	ec41 0b10 	vmov	d0, r0, r1
 800eba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eba6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800ebaa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800ebae:	4334      	orrs	r4, r6
 800ebb0:	d103      	bne.n	800ebba <__ieee754_atan2+0x5a>
 800ebb2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebb6:	f000 ba97 	b.w	800f0e8 <atan>
 800ebba:	17bc      	asrs	r4, r7, #30
 800ebbc:	f004 0402 	and.w	r4, r4, #2
 800ebc0:	ea53 0909 	orrs.w	r9, r3, r9
 800ebc4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ebc8:	d107      	bne.n	800ebda <__ieee754_atan2+0x7a>
 800ebca:	2c02      	cmp	r4, #2
 800ebcc:	d05f      	beq.n	800ec8e <__ieee754_atan2+0x12e>
 800ebce:	2c03      	cmp	r4, #3
 800ebd0:	d1e5      	bne.n	800eb9e <__ieee754_atan2+0x3e>
 800ebd2:	a141      	add	r1, pc, #260	@ (adr r1, 800ecd8 <__ieee754_atan2+0x178>)
 800ebd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebd8:	e7e1      	b.n	800eb9e <__ieee754_atan2+0x3e>
 800ebda:	4315      	orrs	r5, r2
 800ebdc:	d106      	bne.n	800ebec <__ieee754_atan2+0x8c>
 800ebde:	f1be 0f00 	cmp.w	lr, #0
 800ebe2:	da5f      	bge.n	800eca4 <__ieee754_atan2+0x144>
 800ebe4:	a13e      	add	r1, pc, #248	@ (adr r1, 800ece0 <__ieee754_atan2+0x180>)
 800ebe6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebea:	e7d8      	b.n	800eb9e <__ieee754_atan2+0x3e>
 800ebec:	4542      	cmp	r2, r8
 800ebee:	d10f      	bne.n	800ec10 <__ieee754_atan2+0xb0>
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	f104 34ff 	add.w	r4, r4, #4294967295
 800ebf6:	d107      	bne.n	800ec08 <__ieee754_atan2+0xa8>
 800ebf8:	2c02      	cmp	r4, #2
 800ebfa:	d84c      	bhi.n	800ec96 <__ieee754_atan2+0x136>
 800ebfc:	4b34      	ldr	r3, [pc, #208]	@ (800ecd0 <__ieee754_atan2+0x170>)
 800ebfe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ec02:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ec06:	e7ca      	b.n	800eb9e <__ieee754_atan2+0x3e>
 800ec08:	2c02      	cmp	r4, #2
 800ec0a:	d848      	bhi.n	800ec9e <__ieee754_atan2+0x13e>
 800ec0c:	4b31      	ldr	r3, [pc, #196]	@ (800ecd4 <__ieee754_atan2+0x174>)
 800ec0e:	e7f6      	b.n	800ebfe <__ieee754_atan2+0x9e>
 800ec10:	4543      	cmp	r3, r8
 800ec12:	d0e4      	beq.n	800ebde <__ieee754_atan2+0x7e>
 800ec14:	1a9b      	subs	r3, r3, r2
 800ec16:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ec1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ec1e:	da1e      	bge.n	800ec5e <__ieee754_atan2+0xfe>
 800ec20:	2f00      	cmp	r7, #0
 800ec22:	da01      	bge.n	800ec28 <__ieee754_atan2+0xc8>
 800ec24:	323c      	adds	r2, #60	@ 0x3c
 800ec26:	db1e      	blt.n	800ec66 <__ieee754_atan2+0x106>
 800ec28:	4632      	mov	r2, r6
 800ec2a:	463b      	mov	r3, r7
 800ec2c:	f7f1 fdb2 	bl	8000794 <__aeabi_ddiv>
 800ec30:	ec41 0b10 	vmov	d0, r0, r1
 800ec34:	f000 fbf0 	bl	800f418 <fabs>
 800ec38:	f000 fa56 	bl	800f0e8 <atan>
 800ec3c:	ec51 0b10 	vmov	r0, r1, d0
 800ec40:	2c01      	cmp	r4, #1
 800ec42:	d013      	beq.n	800ec6c <__ieee754_atan2+0x10c>
 800ec44:	2c02      	cmp	r4, #2
 800ec46:	d015      	beq.n	800ec74 <__ieee754_atan2+0x114>
 800ec48:	2c00      	cmp	r4, #0
 800ec4a:	d0a8      	beq.n	800eb9e <__ieee754_atan2+0x3e>
 800ec4c:	a318      	add	r3, pc, #96	@ (adr r3, 800ecb0 <__ieee754_atan2+0x150>)
 800ec4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec52:	f7f1 fabd 	bl	80001d0 <__aeabi_dsub>
 800ec56:	a318      	add	r3, pc, #96	@ (adr r3, 800ecb8 <__ieee754_atan2+0x158>)
 800ec58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5c:	e014      	b.n	800ec88 <__ieee754_atan2+0x128>
 800ec5e:	a118      	add	r1, pc, #96	@ (adr r1, 800ecc0 <__ieee754_atan2+0x160>)
 800ec60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec64:	e7ec      	b.n	800ec40 <__ieee754_atan2+0xe0>
 800ec66:	2000      	movs	r0, #0
 800ec68:	2100      	movs	r1, #0
 800ec6a:	e7e9      	b.n	800ec40 <__ieee754_atan2+0xe0>
 800ec6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ec70:	4619      	mov	r1, r3
 800ec72:	e794      	b.n	800eb9e <__ieee754_atan2+0x3e>
 800ec74:	a30e      	add	r3, pc, #56	@ (adr r3, 800ecb0 <__ieee754_atan2+0x150>)
 800ec76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7a:	f7f1 faa9 	bl	80001d0 <__aeabi_dsub>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	460b      	mov	r3, r1
 800ec82:	a10d      	add	r1, pc, #52	@ (adr r1, 800ecb8 <__ieee754_atan2+0x158>)
 800ec84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec88:	f7f1 faa2 	bl	80001d0 <__aeabi_dsub>
 800ec8c:	e787      	b.n	800eb9e <__ieee754_atan2+0x3e>
 800ec8e:	a10a      	add	r1, pc, #40	@ (adr r1, 800ecb8 <__ieee754_atan2+0x158>)
 800ec90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec94:	e783      	b.n	800eb9e <__ieee754_atan2+0x3e>
 800ec96:	a10c      	add	r1, pc, #48	@ (adr r1, 800ecc8 <__ieee754_atan2+0x168>)
 800ec98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec9c:	e77f      	b.n	800eb9e <__ieee754_atan2+0x3e>
 800ec9e:	2000      	movs	r0, #0
 800eca0:	2100      	movs	r1, #0
 800eca2:	e77c      	b.n	800eb9e <__ieee754_atan2+0x3e>
 800eca4:	a106      	add	r1, pc, #24	@ (adr r1, 800ecc0 <__ieee754_atan2+0x160>)
 800eca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecaa:	e778      	b.n	800eb9e <__ieee754_atan2+0x3e>
 800ecac:	f3af 8000 	nop.w
 800ecb0:	33145c07 	.word	0x33145c07
 800ecb4:	3ca1a626 	.word	0x3ca1a626
 800ecb8:	54442d18 	.word	0x54442d18
 800ecbc:	400921fb 	.word	0x400921fb
 800ecc0:	54442d18 	.word	0x54442d18
 800ecc4:	3ff921fb 	.word	0x3ff921fb
 800ecc8:	54442d18 	.word	0x54442d18
 800eccc:	3fe921fb 	.word	0x3fe921fb
 800ecd0:	0800fdc8 	.word	0x0800fdc8
 800ecd4:	0800fdb0 	.word	0x0800fdb0
 800ecd8:	54442d18 	.word	0x54442d18
 800ecdc:	c00921fb 	.word	0xc00921fb
 800ece0:	54442d18 	.word	0x54442d18
 800ece4:	bff921fb 	.word	0xbff921fb
 800ece8:	7ff00000 	.word	0x7ff00000
 800ecec:	00000000 	.word	0x00000000

0800ecf0 <__ieee754_rem_pio2>:
 800ecf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf4:	ec57 6b10 	vmov	r6, r7, d0
 800ecf8:	4bc5      	ldr	r3, [pc, #788]	@ (800f010 <__ieee754_rem_pio2+0x320>)
 800ecfa:	b08d      	sub	sp, #52	@ 0x34
 800ecfc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ed00:	4598      	cmp	r8, r3
 800ed02:	4604      	mov	r4, r0
 800ed04:	9704      	str	r7, [sp, #16]
 800ed06:	d807      	bhi.n	800ed18 <__ieee754_rem_pio2+0x28>
 800ed08:	2200      	movs	r2, #0
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	ed80 0b00 	vstr	d0, [r0]
 800ed10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ed14:	2500      	movs	r5, #0
 800ed16:	e028      	b.n	800ed6a <__ieee754_rem_pio2+0x7a>
 800ed18:	4bbe      	ldr	r3, [pc, #760]	@ (800f014 <__ieee754_rem_pio2+0x324>)
 800ed1a:	4598      	cmp	r8, r3
 800ed1c:	d878      	bhi.n	800ee10 <__ieee754_rem_pio2+0x120>
 800ed1e:	9b04      	ldr	r3, [sp, #16]
 800ed20:	4dbd      	ldr	r5, [pc, #756]	@ (800f018 <__ieee754_rem_pio2+0x328>)
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	4630      	mov	r0, r6
 800ed26:	a3ac      	add	r3, pc, #688	@ (adr r3, 800efd8 <__ieee754_rem_pio2+0x2e8>)
 800ed28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed2c:	4639      	mov	r1, r7
 800ed2e:	dd38      	ble.n	800eda2 <__ieee754_rem_pio2+0xb2>
 800ed30:	f7f1 fa4e 	bl	80001d0 <__aeabi_dsub>
 800ed34:	45a8      	cmp	r8, r5
 800ed36:	4606      	mov	r6, r0
 800ed38:	460f      	mov	r7, r1
 800ed3a:	d01a      	beq.n	800ed72 <__ieee754_rem_pio2+0x82>
 800ed3c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800efe0 <__ieee754_rem_pio2+0x2f0>)
 800ed3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed42:	f7f1 fa45 	bl	80001d0 <__aeabi_dsub>
 800ed46:	4602      	mov	r2, r0
 800ed48:	460b      	mov	r3, r1
 800ed4a:	4680      	mov	r8, r0
 800ed4c:	4689      	mov	r9, r1
 800ed4e:	4630      	mov	r0, r6
 800ed50:	4639      	mov	r1, r7
 800ed52:	f7f1 fa3d 	bl	80001d0 <__aeabi_dsub>
 800ed56:	a3a2      	add	r3, pc, #648	@ (adr r3, 800efe0 <__ieee754_rem_pio2+0x2f0>)
 800ed58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed5c:	f7f1 fa38 	bl	80001d0 <__aeabi_dsub>
 800ed60:	e9c4 8900 	strd	r8, r9, [r4]
 800ed64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ed68:	2501      	movs	r5, #1
 800ed6a:	4628      	mov	r0, r5
 800ed6c:	b00d      	add	sp, #52	@ 0x34
 800ed6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed72:	a39d      	add	r3, pc, #628	@ (adr r3, 800efe8 <__ieee754_rem_pio2+0x2f8>)
 800ed74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed78:	f7f1 fa2a 	bl	80001d0 <__aeabi_dsub>
 800ed7c:	a39c      	add	r3, pc, #624	@ (adr r3, 800eff0 <__ieee754_rem_pio2+0x300>)
 800ed7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed82:	4606      	mov	r6, r0
 800ed84:	460f      	mov	r7, r1
 800ed86:	f7f1 fa23 	bl	80001d0 <__aeabi_dsub>
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	4680      	mov	r8, r0
 800ed90:	4689      	mov	r9, r1
 800ed92:	4630      	mov	r0, r6
 800ed94:	4639      	mov	r1, r7
 800ed96:	f7f1 fa1b 	bl	80001d0 <__aeabi_dsub>
 800ed9a:	a395      	add	r3, pc, #596	@ (adr r3, 800eff0 <__ieee754_rem_pio2+0x300>)
 800ed9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda0:	e7dc      	b.n	800ed5c <__ieee754_rem_pio2+0x6c>
 800eda2:	f7f1 fa17 	bl	80001d4 <__adddf3>
 800eda6:	45a8      	cmp	r8, r5
 800eda8:	4606      	mov	r6, r0
 800edaa:	460f      	mov	r7, r1
 800edac:	d018      	beq.n	800ede0 <__ieee754_rem_pio2+0xf0>
 800edae:	a38c      	add	r3, pc, #560	@ (adr r3, 800efe0 <__ieee754_rem_pio2+0x2f0>)
 800edb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb4:	f7f1 fa0e 	bl	80001d4 <__adddf3>
 800edb8:	4602      	mov	r2, r0
 800edba:	460b      	mov	r3, r1
 800edbc:	4680      	mov	r8, r0
 800edbe:	4689      	mov	r9, r1
 800edc0:	4630      	mov	r0, r6
 800edc2:	4639      	mov	r1, r7
 800edc4:	f7f1 fa04 	bl	80001d0 <__aeabi_dsub>
 800edc8:	a385      	add	r3, pc, #532	@ (adr r3, 800efe0 <__ieee754_rem_pio2+0x2f0>)
 800edca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edce:	f7f1 fa01 	bl	80001d4 <__adddf3>
 800edd2:	f04f 35ff 	mov.w	r5, #4294967295
 800edd6:	e9c4 8900 	strd	r8, r9, [r4]
 800edda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800edde:	e7c4      	b.n	800ed6a <__ieee754_rem_pio2+0x7a>
 800ede0:	a381      	add	r3, pc, #516	@ (adr r3, 800efe8 <__ieee754_rem_pio2+0x2f8>)
 800ede2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede6:	f7f1 f9f5 	bl	80001d4 <__adddf3>
 800edea:	a381      	add	r3, pc, #516	@ (adr r3, 800eff0 <__ieee754_rem_pio2+0x300>)
 800edec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf0:	4606      	mov	r6, r0
 800edf2:	460f      	mov	r7, r1
 800edf4:	f7f1 f9ee 	bl	80001d4 <__adddf3>
 800edf8:	4602      	mov	r2, r0
 800edfa:	460b      	mov	r3, r1
 800edfc:	4680      	mov	r8, r0
 800edfe:	4689      	mov	r9, r1
 800ee00:	4630      	mov	r0, r6
 800ee02:	4639      	mov	r1, r7
 800ee04:	f7f1 f9e4 	bl	80001d0 <__aeabi_dsub>
 800ee08:	a379      	add	r3, pc, #484	@ (adr r3, 800eff0 <__ieee754_rem_pio2+0x300>)
 800ee0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0e:	e7de      	b.n	800edce <__ieee754_rem_pio2+0xde>
 800ee10:	4b82      	ldr	r3, [pc, #520]	@ (800f01c <__ieee754_rem_pio2+0x32c>)
 800ee12:	4598      	cmp	r8, r3
 800ee14:	f200 80d1 	bhi.w	800efba <__ieee754_rem_pio2+0x2ca>
 800ee18:	f000 fafe 	bl	800f418 <fabs>
 800ee1c:	ec57 6b10 	vmov	r6, r7, d0
 800ee20:	a375      	add	r3, pc, #468	@ (adr r3, 800eff8 <__ieee754_rem_pio2+0x308>)
 800ee22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee26:	4630      	mov	r0, r6
 800ee28:	4639      	mov	r1, r7
 800ee2a:	f7f1 fb89 	bl	8000540 <__aeabi_dmul>
 800ee2e:	4b7c      	ldr	r3, [pc, #496]	@ (800f020 <__ieee754_rem_pio2+0x330>)
 800ee30:	2200      	movs	r2, #0
 800ee32:	f7f1 f9cf 	bl	80001d4 <__adddf3>
 800ee36:	f7f1 fe33 	bl	8000aa0 <__aeabi_d2iz>
 800ee3a:	4605      	mov	r5, r0
 800ee3c:	f7f1 fb16 	bl	800046c <__aeabi_i2d>
 800ee40:	4602      	mov	r2, r0
 800ee42:	460b      	mov	r3, r1
 800ee44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ee48:	a363      	add	r3, pc, #396	@ (adr r3, 800efd8 <__ieee754_rem_pio2+0x2e8>)
 800ee4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee4e:	f7f1 fb77 	bl	8000540 <__aeabi_dmul>
 800ee52:	4602      	mov	r2, r0
 800ee54:	460b      	mov	r3, r1
 800ee56:	4630      	mov	r0, r6
 800ee58:	4639      	mov	r1, r7
 800ee5a:	f7f1 f9b9 	bl	80001d0 <__aeabi_dsub>
 800ee5e:	a360      	add	r3, pc, #384	@ (adr r3, 800efe0 <__ieee754_rem_pio2+0x2f0>)
 800ee60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee64:	4682      	mov	sl, r0
 800ee66:	468b      	mov	fp, r1
 800ee68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee6c:	f7f1 fb68 	bl	8000540 <__aeabi_dmul>
 800ee70:	2d1f      	cmp	r5, #31
 800ee72:	4606      	mov	r6, r0
 800ee74:	460f      	mov	r7, r1
 800ee76:	dc0c      	bgt.n	800ee92 <__ieee754_rem_pio2+0x1a2>
 800ee78:	4b6a      	ldr	r3, [pc, #424]	@ (800f024 <__ieee754_rem_pio2+0x334>)
 800ee7a:	1e6a      	subs	r2, r5, #1
 800ee7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee80:	4543      	cmp	r3, r8
 800ee82:	d006      	beq.n	800ee92 <__ieee754_rem_pio2+0x1a2>
 800ee84:	4632      	mov	r2, r6
 800ee86:	463b      	mov	r3, r7
 800ee88:	4650      	mov	r0, sl
 800ee8a:	4659      	mov	r1, fp
 800ee8c:	f7f1 f9a0 	bl	80001d0 <__aeabi_dsub>
 800ee90:	e00e      	b.n	800eeb0 <__ieee754_rem_pio2+0x1c0>
 800ee92:	463b      	mov	r3, r7
 800ee94:	4632      	mov	r2, r6
 800ee96:	4650      	mov	r0, sl
 800ee98:	4659      	mov	r1, fp
 800ee9a:	f7f1 f999 	bl	80001d0 <__aeabi_dsub>
 800ee9e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eea2:	9305      	str	r3, [sp, #20]
 800eea4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eea8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800eeac:	2b10      	cmp	r3, #16
 800eeae:	dc02      	bgt.n	800eeb6 <__ieee754_rem_pio2+0x1c6>
 800eeb0:	e9c4 0100 	strd	r0, r1, [r4]
 800eeb4:	e039      	b.n	800ef2a <__ieee754_rem_pio2+0x23a>
 800eeb6:	a34c      	add	r3, pc, #304	@ (adr r3, 800efe8 <__ieee754_rem_pio2+0x2f8>)
 800eeb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eec0:	f7f1 fb3e 	bl	8000540 <__aeabi_dmul>
 800eec4:	4606      	mov	r6, r0
 800eec6:	460f      	mov	r7, r1
 800eec8:	4602      	mov	r2, r0
 800eeca:	460b      	mov	r3, r1
 800eecc:	4650      	mov	r0, sl
 800eece:	4659      	mov	r1, fp
 800eed0:	f7f1 f97e 	bl	80001d0 <__aeabi_dsub>
 800eed4:	4602      	mov	r2, r0
 800eed6:	460b      	mov	r3, r1
 800eed8:	4680      	mov	r8, r0
 800eeda:	4689      	mov	r9, r1
 800eedc:	4650      	mov	r0, sl
 800eede:	4659      	mov	r1, fp
 800eee0:	f7f1 f976 	bl	80001d0 <__aeabi_dsub>
 800eee4:	4632      	mov	r2, r6
 800eee6:	463b      	mov	r3, r7
 800eee8:	f7f1 f972 	bl	80001d0 <__aeabi_dsub>
 800eeec:	a340      	add	r3, pc, #256	@ (adr r3, 800eff0 <__ieee754_rem_pio2+0x300>)
 800eeee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef2:	4606      	mov	r6, r0
 800eef4:	460f      	mov	r7, r1
 800eef6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eefa:	f7f1 fb21 	bl	8000540 <__aeabi_dmul>
 800eefe:	4632      	mov	r2, r6
 800ef00:	463b      	mov	r3, r7
 800ef02:	f7f1 f965 	bl	80001d0 <__aeabi_dsub>
 800ef06:	4602      	mov	r2, r0
 800ef08:	460b      	mov	r3, r1
 800ef0a:	4606      	mov	r6, r0
 800ef0c:	460f      	mov	r7, r1
 800ef0e:	4640      	mov	r0, r8
 800ef10:	4649      	mov	r1, r9
 800ef12:	f7f1 f95d 	bl	80001d0 <__aeabi_dsub>
 800ef16:	9a05      	ldr	r2, [sp, #20]
 800ef18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ef1c:	1ad3      	subs	r3, r2, r3
 800ef1e:	2b31      	cmp	r3, #49	@ 0x31
 800ef20:	dc20      	bgt.n	800ef64 <__ieee754_rem_pio2+0x274>
 800ef22:	e9c4 0100 	strd	r0, r1, [r4]
 800ef26:	46c2      	mov	sl, r8
 800ef28:	46cb      	mov	fp, r9
 800ef2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ef2e:	4650      	mov	r0, sl
 800ef30:	4642      	mov	r2, r8
 800ef32:	464b      	mov	r3, r9
 800ef34:	4659      	mov	r1, fp
 800ef36:	f7f1 f94b 	bl	80001d0 <__aeabi_dsub>
 800ef3a:	463b      	mov	r3, r7
 800ef3c:	4632      	mov	r2, r6
 800ef3e:	f7f1 f947 	bl	80001d0 <__aeabi_dsub>
 800ef42:	9b04      	ldr	r3, [sp, #16]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ef4a:	f6bf af0e 	bge.w	800ed6a <__ieee754_rem_pio2+0x7a>
 800ef4e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ef52:	6063      	str	r3, [r4, #4]
 800ef54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ef58:	f8c4 8000 	str.w	r8, [r4]
 800ef5c:	60a0      	str	r0, [r4, #8]
 800ef5e:	60e3      	str	r3, [r4, #12]
 800ef60:	426d      	negs	r5, r5
 800ef62:	e702      	b.n	800ed6a <__ieee754_rem_pio2+0x7a>
 800ef64:	a326      	add	r3, pc, #152	@ (adr r3, 800f000 <__ieee754_rem_pio2+0x310>)
 800ef66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef6e:	f7f1 fae7 	bl	8000540 <__aeabi_dmul>
 800ef72:	4606      	mov	r6, r0
 800ef74:	460f      	mov	r7, r1
 800ef76:	4602      	mov	r2, r0
 800ef78:	460b      	mov	r3, r1
 800ef7a:	4640      	mov	r0, r8
 800ef7c:	4649      	mov	r1, r9
 800ef7e:	f7f1 f927 	bl	80001d0 <__aeabi_dsub>
 800ef82:	4602      	mov	r2, r0
 800ef84:	460b      	mov	r3, r1
 800ef86:	4682      	mov	sl, r0
 800ef88:	468b      	mov	fp, r1
 800ef8a:	4640      	mov	r0, r8
 800ef8c:	4649      	mov	r1, r9
 800ef8e:	f7f1 f91f 	bl	80001d0 <__aeabi_dsub>
 800ef92:	4632      	mov	r2, r6
 800ef94:	463b      	mov	r3, r7
 800ef96:	f7f1 f91b 	bl	80001d0 <__aeabi_dsub>
 800ef9a:	a31b      	add	r3, pc, #108	@ (adr r3, 800f008 <__ieee754_rem_pio2+0x318>)
 800ef9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa0:	4606      	mov	r6, r0
 800efa2:	460f      	mov	r7, r1
 800efa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efa8:	f7f1 faca 	bl	8000540 <__aeabi_dmul>
 800efac:	4632      	mov	r2, r6
 800efae:	463b      	mov	r3, r7
 800efb0:	f7f1 f90e 	bl	80001d0 <__aeabi_dsub>
 800efb4:	4606      	mov	r6, r0
 800efb6:	460f      	mov	r7, r1
 800efb8:	e764      	b.n	800ee84 <__ieee754_rem_pio2+0x194>
 800efba:	4b1b      	ldr	r3, [pc, #108]	@ (800f028 <__ieee754_rem_pio2+0x338>)
 800efbc:	4598      	cmp	r8, r3
 800efbe:	d935      	bls.n	800f02c <__ieee754_rem_pio2+0x33c>
 800efc0:	4632      	mov	r2, r6
 800efc2:	463b      	mov	r3, r7
 800efc4:	4630      	mov	r0, r6
 800efc6:	4639      	mov	r1, r7
 800efc8:	f7f1 f902 	bl	80001d0 <__aeabi_dsub>
 800efcc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800efd0:	e9c4 0100 	strd	r0, r1, [r4]
 800efd4:	e69e      	b.n	800ed14 <__ieee754_rem_pio2+0x24>
 800efd6:	bf00      	nop
 800efd8:	54400000 	.word	0x54400000
 800efdc:	3ff921fb 	.word	0x3ff921fb
 800efe0:	1a626331 	.word	0x1a626331
 800efe4:	3dd0b461 	.word	0x3dd0b461
 800efe8:	1a600000 	.word	0x1a600000
 800efec:	3dd0b461 	.word	0x3dd0b461
 800eff0:	2e037073 	.word	0x2e037073
 800eff4:	3ba3198a 	.word	0x3ba3198a
 800eff8:	6dc9c883 	.word	0x6dc9c883
 800effc:	3fe45f30 	.word	0x3fe45f30
 800f000:	2e000000 	.word	0x2e000000
 800f004:	3ba3198a 	.word	0x3ba3198a
 800f008:	252049c1 	.word	0x252049c1
 800f00c:	397b839a 	.word	0x397b839a
 800f010:	3fe921fb 	.word	0x3fe921fb
 800f014:	4002d97b 	.word	0x4002d97b
 800f018:	3ff921fb 	.word	0x3ff921fb
 800f01c:	413921fb 	.word	0x413921fb
 800f020:	3fe00000 	.word	0x3fe00000
 800f024:	0800fde0 	.word	0x0800fde0
 800f028:	7fefffff 	.word	0x7fefffff
 800f02c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800f030:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800f034:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800f038:	4630      	mov	r0, r6
 800f03a:	460f      	mov	r7, r1
 800f03c:	f7f1 fd30 	bl	8000aa0 <__aeabi_d2iz>
 800f040:	f7f1 fa14 	bl	800046c <__aeabi_i2d>
 800f044:	4602      	mov	r2, r0
 800f046:	460b      	mov	r3, r1
 800f048:	4630      	mov	r0, r6
 800f04a:	4639      	mov	r1, r7
 800f04c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f050:	f7f1 f8be 	bl	80001d0 <__aeabi_dsub>
 800f054:	4b22      	ldr	r3, [pc, #136]	@ (800f0e0 <__ieee754_rem_pio2+0x3f0>)
 800f056:	2200      	movs	r2, #0
 800f058:	f7f1 fa72 	bl	8000540 <__aeabi_dmul>
 800f05c:	460f      	mov	r7, r1
 800f05e:	4606      	mov	r6, r0
 800f060:	f7f1 fd1e 	bl	8000aa0 <__aeabi_d2iz>
 800f064:	f7f1 fa02 	bl	800046c <__aeabi_i2d>
 800f068:	4602      	mov	r2, r0
 800f06a:	460b      	mov	r3, r1
 800f06c:	4630      	mov	r0, r6
 800f06e:	4639      	mov	r1, r7
 800f070:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f074:	f7f1 f8ac 	bl	80001d0 <__aeabi_dsub>
 800f078:	4b19      	ldr	r3, [pc, #100]	@ (800f0e0 <__ieee754_rem_pio2+0x3f0>)
 800f07a:	2200      	movs	r2, #0
 800f07c:	f7f1 fa60 	bl	8000540 <__aeabi_dmul>
 800f080:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800f084:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800f088:	f04f 0803 	mov.w	r8, #3
 800f08c:	2600      	movs	r6, #0
 800f08e:	2700      	movs	r7, #0
 800f090:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f094:	4632      	mov	r2, r6
 800f096:	463b      	mov	r3, r7
 800f098:	46c2      	mov	sl, r8
 800f09a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f09e:	f7f1 fcb7 	bl	8000a10 <__aeabi_dcmpeq>
 800f0a2:	2800      	cmp	r0, #0
 800f0a4:	d1f4      	bne.n	800f090 <__ieee754_rem_pio2+0x3a0>
 800f0a6:	4b0f      	ldr	r3, [pc, #60]	@ (800f0e4 <__ieee754_rem_pio2+0x3f4>)
 800f0a8:	9301      	str	r3, [sp, #4]
 800f0aa:	2302      	movs	r3, #2
 800f0ac:	9300      	str	r3, [sp, #0]
 800f0ae:	462a      	mov	r2, r5
 800f0b0:	4653      	mov	r3, sl
 800f0b2:	4621      	mov	r1, r4
 800f0b4:	a806      	add	r0, sp, #24
 800f0b6:	f000 f9b7 	bl	800f428 <__kernel_rem_pio2>
 800f0ba:	9b04      	ldr	r3, [sp, #16]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	4605      	mov	r5, r0
 800f0c0:	f6bf ae53 	bge.w	800ed6a <__ieee754_rem_pio2+0x7a>
 800f0c4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f0c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f0cc:	e9c4 2300 	strd	r2, r3, [r4]
 800f0d0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800f0d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f0d8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f0dc:	e740      	b.n	800ef60 <__ieee754_rem_pio2+0x270>
 800f0de:	bf00      	nop
 800f0e0:	41700000 	.word	0x41700000
 800f0e4:	0800fe60 	.word	0x0800fe60

0800f0e8 <atan>:
 800f0e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0ec:	ec55 4b10 	vmov	r4, r5, d0
 800f0f0:	4bbf      	ldr	r3, [pc, #764]	@ (800f3f0 <atan+0x308>)
 800f0f2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800f0f6:	429e      	cmp	r6, r3
 800f0f8:	46ab      	mov	fp, r5
 800f0fa:	d918      	bls.n	800f12e <atan+0x46>
 800f0fc:	4bbd      	ldr	r3, [pc, #756]	@ (800f3f4 <atan+0x30c>)
 800f0fe:	429e      	cmp	r6, r3
 800f100:	d801      	bhi.n	800f106 <atan+0x1e>
 800f102:	d109      	bne.n	800f118 <atan+0x30>
 800f104:	b144      	cbz	r4, 800f118 <atan+0x30>
 800f106:	4622      	mov	r2, r4
 800f108:	462b      	mov	r3, r5
 800f10a:	4620      	mov	r0, r4
 800f10c:	4629      	mov	r1, r5
 800f10e:	f7f1 f861 	bl	80001d4 <__adddf3>
 800f112:	4604      	mov	r4, r0
 800f114:	460d      	mov	r5, r1
 800f116:	e006      	b.n	800f126 <atan+0x3e>
 800f118:	f1bb 0f00 	cmp.w	fp, #0
 800f11c:	f340 812b 	ble.w	800f376 <atan+0x28e>
 800f120:	a597      	add	r5, pc, #604	@ (adr r5, 800f380 <atan+0x298>)
 800f122:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f126:	ec45 4b10 	vmov	d0, r4, r5
 800f12a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f12e:	4bb2      	ldr	r3, [pc, #712]	@ (800f3f8 <atan+0x310>)
 800f130:	429e      	cmp	r6, r3
 800f132:	d813      	bhi.n	800f15c <atan+0x74>
 800f134:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800f138:	429e      	cmp	r6, r3
 800f13a:	d80c      	bhi.n	800f156 <atan+0x6e>
 800f13c:	a392      	add	r3, pc, #584	@ (adr r3, 800f388 <atan+0x2a0>)
 800f13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f142:	4620      	mov	r0, r4
 800f144:	4629      	mov	r1, r5
 800f146:	f7f1 f845 	bl	80001d4 <__adddf3>
 800f14a:	4bac      	ldr	r3, [pc, #688]	@ (800f3fc <atan+0x314>)
 800f14c:	2200      	movs	r2, #0
 800f14e:	f7f1 fc87 	bl	8000a60 <__aeabi_dcmpgt>
 800f152:	2800      	cmp	r0, #0
 800f154:	d1e7      	bne.n	800f126 <atan+0x3e>
 800f156:	f04f 3aff 	mov.w	sl, #4294967295
 800f15a:	e029      	b.n	800f1b0 <atan+0xc8>
 800f15c:	f000 f95c 	bl	800f418 <fabs>
 800f160:	4ba7      	ldr	r3, [pc, #668]	@ (800f400 <atan+0x318>)
 800f162:	429e      	cmp	r6, r3
 800f164:	ec55 4b10 	vmov	r4, r5, d0
 800f168:	f200 80bc 	bhi.w	800f2e4 <atan+0x1fc>
 800f16c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800f170:	429e      	cmp	r6, r3
 800f172:	f200 809e 	bhi.w	800f2b2 <atan+0x1ca>
 800f176:	4622      	mov	r2, r4
 800f178:	462b      	mov	r3, r5
 800f17a:	4620      	mov	r0, r4
 800f17c:	4629      	mov	r1, r5
 800f17e:	f7f1 f829 	bl	80001d4 <__adddf3>
 800f182:	4b9e      	ldr	r3, [pc, #632]	@ (800f3fc <atan+0x314>)
 800f184:	2200      	movs	r2, #0
 800f186:	f7f1 f823 	bl	80001d0 <__aeabi_dsub>
 800f18a:	2200      	movs	r2, #0
 800f18c:	4606      	mov	r6, r0
 800f18e:	460f      	mov	r7, r1
 800f190:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f194:	4620      	mov	r0, r4
 800f196:	4629      	mov	r1, r5
 800f198:	f7f1 f81c 	bl	80001d4 <__adddf3>
 800f19c:	4602      	mov	r2, r0
 800f19e:	460b      	mov	r3, r1
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	4639      	mov	r1, r7
 800f1a4:	f7f1 faf6 	bl	8000794 <__aeabi_ddiv>
 800f1a8:	f04f 0a00 	mov.w	sl, #0
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	460d      	mov	r5, r1
 800f1b0:	4622      	mov	r2, r4
 800f1b2:	462b      	mov	r3, r5
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	f7f1 f9c2 	bl	8000540 <__aeabi_dmul>
 800f1bc:	4602      	mov	r2, r0
 800f1be:	460b      	mov	r3, r1
 800f1c0:	4680      	mov	r8, r0
 800f1c2:	4689      	mov	r9, r1
 800f1c4:	f7f1 f9bc 	bl	8000540 <__aeabi_dmul>
 800f1c8:	a371      	add	r3, pc, #452	@ (adr r3, 800f390 <atan+0x2a8>)
 800f1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ce:	4606      	mov	r6, r0
 800f1d0:	460f      	mov	r7, r1
 800f1d2:	f7f1 f9b5 	bl	8000540 <__aeabi_dmul>
 800f1d6:	a370      	add	r3, pc, #448	@ (adr r3, 800f398 <atan+0x2b0>)
 800f1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1dc:	f7f0 fffa 	bl	80001d4 <__adddf3>
 800f1e0:	4632      	mov	r2, r6
 800f1e2:	463b      	mov	r3, r7
 800f1e4:	f7f1 f9ac 	bl	8000540 <__aeabi_dmul>
 800f1e8:	a36d      	add	r3, pc, #436	@ (adr r3, 800f3a0 <atan+0x2b8>)
 800f1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ee:	f7f0 fff1 	bl	80001d4 <__adddf3>
 800f1f2:	4632      	mov	r2, r6
 800f1f4:	463b      	mov	r3, r7
 800f1f6:	f7f1 f9a3 	bl	8000540 <__aeabi_dmul>
 800f1fa:	a36b      	add	r3, pc, #428	@ (adr r3, 800f3a8 <atan+0x2c0>)
 800f1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f200:	f7f0 ffe8 	bl	80001d4 <__adddf3>
 800f204:	4632      	mov	r2, r6
 800f206:	463b      	mov	r3, r7
 800f208:	f7f1 f99a 	bl	8000540 <__aeabi_dmul>
 800f20c:	a368      	add	r3, pc, #416	@ (adr r3, 800f3b0 <atan+0x2c8>)
 800f20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f212:	f7f0 ffdf 	bl	80001d4 <__adddf3>
 800f216:	4632      	mov	r2, r6
 800f218:	463b      	mov	r3, r7
 800f21a:	f7f1 f991 	bl	8000540 <__aeabi_dmul>
 800f21e:	a366      	add	r3, pc, #408	@ (adr r3, 800f3b8 <atan+0x2d0>)
 800f220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f224:	f7f0 ffd6 	bl	80001d4 <__adddf3>
 800f228:	4642      	mov	r2, r8
 800f22a:	464b      	mov	r3, r9
 800f22c:	f7f1 f988 	bl	8000540 <__aeabi_dmul>
 800f230:	a363      	add	r3, pc, #396	@ (adr r3, 800f3c0 <atan+0x2d8>)
 800f232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f236:	4680      	mov	r8, r0
 800f238:	4689      	mov	r9, r1
 800f23a:	4630      	mov	r0, r6
 800f23c:	4639      	mov	r1, r7
 800f23e:	f7f1 f97f 	bl	8000540 <__aeabi_dmul>
 800f242:	a361      	add	r3, pc, #388	@ (adr r3, 800f3c8 <atan+0x2e0>)
 800f244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f248:	f7f0 ffc2 	bl	80001d0 <__aeabi_dsub>
 800f24c:	4632      	mov	r2, r6
 800f24e:	463b      	mov	r3, r7
 800f250:	f7f1 f976 	bl	8000540 <__aeabi_dmul>
 800f254:	a35e      	add	r3, pc, #376	@ (adr r3, 800f3d0 <atan+0x2e8>)
 800f256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25a:	f7f0 ffb9 	bl	80001d0 <__aeabi_dsub>
 800f25e:	4632      	mov	r2, r6
 800f260:	463b      	mov	r3, r7
 800f262:	f7f1 f96d 	bl	8000540 <__aeabi_dmul>
 800f266:	a35c      	add	r3, pc, #368	@ (adr r3, 800f3d8 <atan+0x2f0>)
 800f268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26c:	f7f0 ffb0 	bl	80001d0 <__aeabi_dsub>
 800f270:	4632      	mov	r2, r6
 800f272:	463b      	mov	r3, r7
 800f274:	f7f1 f964 	bl	8000540 <__aeabi_dmul>
 800f278:	a359      	add	r3, pc, #356	@ (adr r3, 800f3e0 <atan+0x2f8>)
 800f27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27e:	f7f0 ffa7 	bl	80001d0 <__aeabi_dsub>
 800f282:	4632      	mov	r2, r6
 800f284:	463b      	mov	r3, r7
 800f286:	f7f1 f95b 	bl	8000540 <__aeabi_dmul>
 800f28a:	4602      	mov	r2, r0
 800f28c:	460b      	mov	r3, r1
 800f28e:	4640      	mov	r0, r8
 800f290:	4649      	mov	r1, r9
 800f292:	f7f0 ff9f 	bl	80001d4 <__adddf3>
 800f296:	4622      	mov	r2, r4
 800f298:	462b      	mov	r3, r5
 800f29a:	f7f1 f951 	bl	8000540 <__aeabi_dmul>
 800f29e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	460b      	mov	r3, r1
 800f2a6:	d148      	bne.n	800f33a <atan+0x252>
 800f2a8:	4620      	mov	r0, r4
 800f2aa:	4629      	mov	r1, r5
 800f2ac:	f7f0 ff90 	bl	80001d0 <__aeabi_dsub>
 800f2b0:	e72f      	b.n	800f112 <atan+0x2a>
 800f2b2:	4b52      	ldr	r3, [pc, #328]	@ (800f3fc <atan+0x314>)
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	4620      	mov	r0, r4
 800f2b8:	4629      	mov	r1, r5
 800f2ba:	f7f0 ff89 	bl	80001d0 <__aeabi_dsub>
 800f2be:	4b4f      	ldr	r3, [pc, #316]	@ (800f3fc <atan+0x314>)
 800f2c0:	4606      	mov	r6, r0
 800f2c2:	460f      	mov	r7, r1
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	4629      	mov	r1, r5
 800f2ca:	f7f0 ff83 	bl	80001d4 <__adddf3>
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	4639      	mov	r1, r7
 800f2d6:	f7f1 fa5d 	bl	8000794 <__aeabi_ddiv>
 800f2da:	f04f 0a01 	mov.w	sl, #1
 800f2de:	4604      	mov	r4, r0
 800f2e0:	460d      	mov	r5, r1
 800f2e2:	e765      	b.n	800f1b0 <atan+0xc8>
 800f2e4:	4b47      	ldr	r3, [pc, #284]	@ (800f404 <atan+0x31c>)
 800f2e6:	429e      	cmp	r6, r3
 800f2e8:	d21c      	bcs.n	800f324 <atan+0x23c>
 800f2ea:	4b47      	ldr	r3, [pc, #284]	@ (800f408 <atan+0x320>)
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	4629      	mov	r1, r5
 800f2f2:	f7f0 ff6d 	bl	80001d0 <__aeabi_dsub>
 800f2f6:	4b44      	ldr	r3, [pc, #272]	@ (800f408 <atan+0x320>)
 800f2f8:	4606      	mov	r6, r0
 800f2fa:	460f      	mov	r7, r1
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	4620      	mov	r0, r4
 800f300:	4629      	mov	r1, r5
 800f302:	f7f1 f91d 	bl	8000540 <__aeabi_dmul>
 800f306:	4b3d      	ldr	r3, [pc, #244]	@ (800f3fc <atan+0x314>)
 800f308:	2200      	movs	r2, #0
 800f30a:	f7f0 ff63 	bl	80001d4 <__adddf3>
 800f30e:	4602      	mov	r2, r0
 800f310:	460b      	mov	r3, r1
 800f312:	4630      	mov	r0, r6
 800f314:	4639      	mov	r1, r7
 800f316:	f7f1 fa3d 	bl	8000794 <__aeabi_ddiv>
 800f31a:	f04f 0a02 	mov.w	sl, #2
 800f31e:	4604      	mov	r4, r0
 800f320:	460d      	mov	r5, r1
 800f322:	e745      	b.n	800f1b0 <atan+0xc8>
 800f324:	4622      	mov	r2, r4
 800f326:	462b      	mov	r3, r5
 800f328:	4938      	ldr	r1, [pc, #224]	@ (800f40c <atan+0x324>)
 800f32a:	2000      	movs	r0, #0
 800f32c:	f7f1 fa32 	bl	8000794 <__aeabi_ddiv>
 800f330:	f04f 0a03 	mov.w	sl, #3
 800f334:	4604      	mov	r4, r0
 800f336:	460d      	mov	r5, r1
 800f338:	e73a      	b.n	800f1b0 <atan+0xc8>
 800f33a:	4b35      	ldr	r3, [pc, #212]	@ (800f410 <atan+0x328>)
 800f33c:	4e35      	ldr	r6, [pc, #212]	@ (800f414 <atan+0x32c>)
 800f33e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f346:	f7f0 ff43 	bl	80001d0 <__aeabi_dsub>
 800f34a:	4622      	mov	r2, r4
 800f34c:	462b      	mov	r3, r5
 800f34e:	f7f0 ff3f 	bl	80001d0 <__aeabi_dsub>
 800f352:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f356:	4602      	mov	r2, r0
 800f358:	460b      	mov	r3, r1
 800f35a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f35e:	f7f0 ff37 	bl	80001d0 <__aeabi_dsub>
 800f362:	f1bb 0f00 	cmp.w	fp, #0
 800f366:	4604      	mov	r4, r0
 800f368:	460d      	mov	r5, r1
 800f36a:	f6bf aedc 	bge.w	800f126 <atan+0x3e>
 800f36e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f372:	461d      	mov	r5, r3
 800f374:	e6d7      	b.n	800f126 <atan+0x3e>
 800f376:	a51c      	add	r5, pc, #112	@ (adr r5, 800f3e8 <atan+0x300>)
 800f378:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f37c:	e6d3      	b.n	800f126 <atan+0x3e>
 800f37e:	bf00      	nop
 800f380:	54442d18 	.word	0x54442d18
 800f384:	3ff921fb 	.word	0x3ff921fb
 800f388:	8800759c 	.word	0x8800759c
 800f38c:	7e37e43c 	.word	0x7e37e43c
 800f390:	e322da11 	.word	0xe322da11
 800f394:	3f90ad3a 	.word	0x3f90ad3a
 800f398:	24760deb 	.word	0x24760deb
 800f39c:	3fa97b4b 	.word	0x3fa97b4b
 800f3a0:	a0d03d51 	.word	0xa0d03d51
 800f3a4:	3fb10d66 	.word	0x3fb10d66
 800f3a8:	c54c206e 	.word	0xc54c206e
 800f3ac:	3fb745cd 	.word	0x3fb745cd
 800f3b0:	920083ff 	.word	0x920083ff
 800f3b4:	3fc24924 	.word	0x3fc24924
 800f3b8:	5555550d 	.word	0x5555550d
 800f3bc:	3fd55555 	.word	0x3fd55555
 800f3c0:	2c6a6c2f 	.word	0x2c6a6c2f
 800f3c4:	bfa2b444 	.word	0xbfa2b444
 800f3c8:	52defd9a 	.word	0x52defd9a
 800f3cc:	3fadde2d 	.word	0x3fadde2d
 800f3d0:	af749a6d 	.word	0xaf749a6d
 800f3d4:	3fb3b0f2 	.word	0x3fb3b0f2
 800f3d8:	fe231671 	.word	0xfe231671
 800f3dc:	3fbc71c6 	.word	0x3fbc71c6
 800f3e0:	9998ebc4 	.word	0x9998ebc4
 800f3e4:	3fc99999 	.word	0x3fc99999
 800f3e8:	54442d18 	.word	0x54442d18
 800f3ec:	bff921fb 	.word	0xbff921fb
 800f3f0:	440fffff 	.word	0x440fffff
 800f3f4:	7ff00000 	.word	0x7ff00000
 800f3f8:	3fdbffff 	.word	0x3fdbffff
 800f3fc:	3ff00000 	.word	0x3ff00000
 800f400:	3ff2ffff 	.word	0x3ff2ffff
 800f404:	40038000 	.word	0x40038000
 800f408:	3ff80000 	.word	0x3ff80000
 800f40c:	bff00000 	.word	0xbff00000
 800f410:	0800ff68 	.word	0x0800ff68
 800f414:	0800ff88 	.word	0x0800ff88

0800f418 <fabs>:
 800f418:	ec51 0b10 	vmov	r0, r1, d0
 800f41c:	4602      	mov	r2, r0
 800f41e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f422:	ec43 2b10 	vmov	d0, r2, r3
 800f426:	4770      	bx	lr

0800f428 <__kernel_rem_pio2>:
 800f428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f42c:	ed2d 8b02 	vpush	{d8}
 800f430:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f434:	f112 0f14 	cmn.w	r2, #20
 800f438:	9306      	str	r3, [sp, #24]
 800f43a:	9104      	str	r1, [sp, #16]
 800f43c:	4bbe      	ldr	r3, [pc, #760]	@ (800f738 <__kernel_rem_pio2+0x310>)
 800f43e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800f440:	9008      	str	r0, [sp, #32]
 800f442:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f446:	9300      	str	r3, [sp, #0]
 800f448:	9b06      	ldr	r3, [sp, #24]
 800f44a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f44e:	bfa8      	it	ge
 800f450:	1ed4      	subge	r4, r2, #3
 800f452:	9305      	str	r3, [sp, #20]
 800f454:	bfb2      	itee	lt
 800f456:	2400      	movlt	r4, #0
 800f458:	2318      	movge	r3, #24
 800f45a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f45e:	f06f 0317 	mvn.w	r3, #23
 800f462:	fb04 3303 	mla	r3, r4, r3, r3
 800f466:	eb03 0b02 	add.w	fp, r3, r2
 800f46a:	9b00      	ldr	r3, [sp, #0]
 800f46c:	9a05      	ldr	r2, [sp, #20]
 800f46e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800f728 <__kernel_rem_pio2+0x300>
 800f472:	eb03 0802 	add.w	r8, r3, r2
 800f476:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f478:	1aa7      	subs	r7, r4, r2
 800f47a:	ae20      	add	r6, sp, #128	@ 0x80
 800f47c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f480:	2500      	movs	r5, #0
 800f482:	4545      	cmp	r5, r8
 800f484:	dd13      	ble.n	800f4ae <__kernel_rem_pio2+0x86>
 800f486:	9b06      	ldr	r3, [sp, #24]
 800f488:	aa20      	add	r2, sp, #128	@ 0x80
 800f48a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f48e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800f492:	f04f 0800 	mov.w	r8, #0
 800f496:	9b00      	ldr	r3, [sp, #0]
 800f498:	4598      	cmp	r8, r3
 800f49a:	dc31      	bgt.n	800f500 <__kernel_rem_pio2+0xd8>
 800f49c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800f728 <__kernel_rem_pio2+0x300>
 800f4a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f4a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f4a8:	462f      	mov	r7, r5
 800f4aa:	2600      	movs	r6, #0
 800f4ac:	e01b      	b.n	800f4e6 <__kernel_rem_pio2+0xbe>
 800f4ae:	42ef      	cmn	r7, r5
 800f4b0:	d407      	bmi.n	800f4c2 <__kernel_rem_pio2+0x9a>
 800f4b2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f4b6:	f7f0 ffd9 	bl	800046c <__aeabi_i2d>
 800f4ba:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f4be:	3501      	adds	r5, #1
 800f4c0:	e7df      	b.n	800f482 <__kernel_rem_pio2+0x5a>
 800f4c2:	ec51 0b18 	vmov	r0, r1, d8
 800f4c6:	e7f8      	b.n	800f4ba <__kernel_rem_pio2+0x92>
 800f4c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f4d0:	f7f1 f836 	bl	8000540 <__aeabi_dmul>
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	460b      	mov	r3, r1
 800f4d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4dc:	f7f0 fe7a 	bl	80001d4 <__adddf3>
 800f4e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4e4:	3601      	adds	r6, #1
 800f4e6:	9b05      	ldr	r3, [sp, #20]
 800f4e8:	429e      	cmp	r6, r3
 800f4ea:	f1a7 0708 	sub.w	r7, r7, #8
 800f4ee:	ddeb      	ble.n	800f4c8 <__kernel_rem_pio2+0xa0>
 800f4f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4f4:	f108 0801 	add.w	r8, r8, #1
 800f4f8:	ecaa 7b02 	vstmia	sl!, {d7}
 800f4fc:	3508      	adds	r5, #8
 800f4fe:	e7ca      	b.n	800f496 <__kernel_rem_pio2+0x6e>
 800f500:	9b00      	ldr	r3, [sp, #0]
 800f502:	f8dd 8000 	ldr.w	r8, [sp]
 800f506:	aa0c      	add	r2, sp, #48	@ 0x30
 800f508:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f50c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f50e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f510:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f514:	9309      	str	r3, [sp, #36]	@ 0x24
 800f516:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800f51a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f51c:	ab98      	add	r3, sp, #608	@ 0x260
 800f51e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f522:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800f526:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f52a:	ac0c      	add	r4, sp, #48	@ 0x30
 800f52c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f52e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800f532:	46a1      	mov	r9, r4
 800f534:	46c2      	mov	sl, r8
 800f536:	f1ba 0f00 	cmp.w	sl, #0
 800f53a:	f1a5 0508 	sub.w	r5, r5, #8
 800f53e:	dc77      	bgt.n	800f630 <__kernel_rem_pio2+0x208>
 800f540:	4658      	mov	r0, fp
 800f542:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f546:	f000 fac7 	bl	800fad8 <scalbn>
 800f54a:	ec57 6b10 	vmov	r6, r7, d0
 800f54e:	2200      	movs	r2, #0
 800f550:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f554:	4630      	mov	r0, r6
 800f556:	4639      	mov	r1, r7
 800f558:	f7f0 fff2 	bl	8000540 <__aeabi_dmul>
 800f55c:	ec41 0b10 	vmov	d0, r0, r1
 800f560:	f000 fb3a 	bl	800fbd8 <floor>
 800f564:	4b75      	ldr	r3, [pc, #468]	@ (800f73c <__kernel_rem_pio2+0x314>)
 800f566:	ec51 0b10 	vmov	r0, r1, d0
 800f56a:	2200      	movs	r2, #0
 800f56c:	f7f0 ffe8 	bl	8000540 <__aeabi_dmul>
 800f570:	4602      	mov	r2, r0
 800f572:	460b      	mov	r3, r1
 800f574:	4630      	mov	r0, r6
 800f576:	4639      	mov	r1, r7
 800f578:	f7f0 fe2a 	bl	80001d0 <__aeabi_dsub>
 800f57c:	460f      	mov	r7, r1
 800f57e:	4606      	mov	r6, r0
 800f580:	f7f1 fa8e 	bl	8000aa0 <__aeabi_d2iz>
 800f584:	9002      	str	r0, [sp, #8]
 800f586:	f7f0 ff71 	bl	800046c <__aeabi_i2d>
 800f58a:	4602      	mov	r2, r0
 800f58c:	460b      	mov	r3, r1
 800f58e:	4630      	mov	r0, r6
 800f590:	4639      	mov	r1, r7
 800f592:	f7f0 fe1d 	bl	80001d0 <__aeabi_dsub>
 800f596:	f1bb 0f00 	cmp.w	fp, #0
 800f59a:	4606      	mov	r6, r0
 800f59c:	460f      	mov	r7, r1
 800f59e:	dd6c      	ble.n	800f67a <__kernel_rem_pio2+0x252>
 800f5a0:	f108 31ff 	add.w	r1, r8, #4294967295
 800f5a4:	ab0c      	add	r3, sp, #48	@ 0x30
 800f5a6:	9d02      	ldr	r5, [sp, #8]
 800f5a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f5ac:	f1cb 0018 	rsb	r0, fp, #24
 800f5b0:	fa43 f200 	asr.w	r2, r3, r0
 800f5b4:	4415      	add	r5, r2
 800f5b6:	4082      	lsls	r2, r0
 800f5b8:	1a9b      	subs	r3, r3, r2
 800f5ba:	aa0c      	add	r2, sp, #48	@ 0x30
 800f5bc:	9502      	str	r5, [sp, #8]
 800f5be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f5c2:	f1cb 0217 	rsb	r2, fp, #23
 800f5c6:	fa43 f902 	asr.w	r9, r3, r2
 800f5ca:	f1b9 0f00 	cmp.w	r9, #0
 800f5ce:	dd64      	ble.n	800f69a <__kernel_rem_pio2+0x272>
 800f5d0:	9b02      	ldr	r3, [sp, #8]
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	9302      	str	r3, [sp, #8]
 800f5d8:	4615      	mov	r5, r2
 800f5da:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800f5de:	4590      	cmp	r8, r2
 800f5e0:	f300 80b8 	bgt.w	800f754 <__kernel_rem_pio2+0x32c>
 800f5e4:	f1bb 0f00 	cmp.w	fp, #0
 800f5e8:	dd07      	ble.n	800f5fa <__kernel_rem_pio2+0x1d2>
 800f5ea:	f1bb 0f01 	cmp.w	fp, #1
 800f5ee:	f000 80bf 	beq.w	800f770 <__kernel_rem_pio2+0x348>
 800f5f2:	f1bb 0f02 	cmp.w	fp, #2
 800f5f6:	f000 80c6 	beq.w	800f786 <__kernel_rem_pio2+0x35e>
 800f5fa:	f1b9 0f02 	cmp.w	r9, #2
 800f5fe:	d14c      	bne.n	800f69a <__kernel_rem_pio2+0x272>
 800f600:	4632      	mov	r2, r6
 800f602:	463b      	mov	r3, r7
 800f604:	494e      	ldr	r1, [pc, #312]	@ (800f740 <__kernel_rem_pio2+0x318>)
 800f606:	2000      	movs	r0, #0
 800f608:	f7f0 fde2 	bl	80001d0 <__aeabi_dsub>
 800f60c:	4606      	mov	r6, r0
 800f60e:	460f      	mov	r7, r1
 800f610:	2d00      	cmp	r5, #0
 800f612:	d042      	beq.n	800f69a <__kernel_rem_pio2+0x272>
 800f614:	4658      	mov	r0, fp
 800f616:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800f730 <__kernel_rem_pio2+0x308>
 800f61a:	f000 fa5d 	bl	800fad8 <scalbn>
 800f61e:	4630      	mov	r0, r6
 800f620:	4639      	mov	r1, r7
 800f622:	ec53 2b10 	vmov	r2, r3, d0
 800f626:	f7f0 fdd3 	bl	80001d0 <__aeabi_dsub>
 800f62a:	4606      	mov	r6, r0
 800f62c:	460f      	mov	r7, r1
 800f62e:	e034      	b.n	800f69a <__kernel_rem_pio2+0x272>
 800f630:	4b44      	ldr	r3, [pc, #272]	@ (800f744 <__kernel_rem_pio2+0x31c>)
 800f632:	2200      	movs	r2, #0
 800f634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f638:	f7f0 ff82 	bl	8000540 <__aeabi_dmul>
 800f63c:	f7f1 fa30 	bl	8000aa0 <__aeabi_d2iz>
 800f640:	f7f0 ff14 	bl	800046c <__aeabi_i2d>
 800f644:	4b40      	ldr	r3, [pc, #256]	@ (800f748 <__kernel_rem_pio2+0x320>)
 800f646:	2200      	movs	r2, #0
 800f648:	4606      	mov	r6, r0
 800f64a:	460f      	mov	r7, r1
 800f64c:	f7f0 ff78 	bl	8000540 <__aeabi_dmul>
 800f650:	4602      	mov	r2, r0
 800f652:	460b      	mov	r3, r1
 800f654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f658:	f7f0 fdba 	bl	80001d0 <__aeabi_dsub>
 800f65c:	f7f1 fa20 	bl	8000aa0 <__aeabi_d2iz>
 800f660:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f664:	f849 0b04 	str.w	r0, [r9], #4
 800f668:	4639      	mov	r1, r7
 800f66a:	4630      	mov	r0, r6
 800f66c:	f7f0 fdb2 	bl	80001d4 <__adddf3>
 800f670:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f678:	e75d      	b.n	800f536 <__kernel_rem_pio2+0x10e>
 800f67a:	d107      	bne.n	800f68c <__kernel_rem_pio2+0x264>
 800f67c:	f108 33ff 	add.w	r3, r8, #4294967295
 800f680:	aa0c      	add	r2, sp, #48	@ 0x30
 800f682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f686:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800f68a:	e79e      	b.n	800f5ca <__kernel_rem_pio2+0x1a2>
 800f68c:	4b2f      	ldr	r3, [pc, #188]	@ (800f74c <__kernel_rem_pio2+0x324>)
 800f68e:	2200      	movs	r2, #0
 800f690:	f7f1 f9dc 	bl	8000a4c <__aeabi_dcmpge>
 800f694:	2800      	cmp	r0, #0
 800f696:	d143      	bne.n	800f720 <__kernel_rem_pio2+0x2f8>
 800f698:	4681      	mov	r9, r0
 800f69a:	2200      	movs	r2, #0
 800f69c:	2300      	movs	r3, #0
 800f69e:	4630      	mov	r0, r6
 800f6a0:	4639      	mov	r1, r7
 800f6a2:	f7f1 f9b5 	bl	8000a10 <__aeabi_dcmpeq>
 800f6a6:	2800      	cmp	r0, #0
 800f6a8:	f000 80bf 	beq.w	800f82a <__kernel_rem_pio2+0x402>
 800f6ac:	f108 33ff 	add.w	r3, r8, #4294967295
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	9900      	ldr	r1, [sp, #0]
 800f6b4:	428b      	cmp	r3, r1
 800f6b6:	da6e      	bge.n	800f796 <__kernel_rem_pio2+0x36e>
 800f6b8:	2a00      	cmp	r2, #0
 800f6ba:	f000 8089 	beq.w	800f7d0 <__kernel_rem_pio2+0x3a8>
 800f6be:	f108 38ff 	add.w	r8, r8, #4294967295
 800f6c2:	ab0c      	add	r3, sp, #48	@ 0x30
 800f6c4:	f1ab 0b18 	sub.w	fp, fp, #24
 800f6c8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d0f6      	beq.n	800f6be <__kernel_rem_pio2+0x296>
 800f6d0:	4658      	mov	r0, fp
 800f6d2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800f730 <__kernel_rem_pio2+0x308>
 800f6d6:	f000 f9ff 	bl	800fad8 <scalbn>
 800f6da:	f108 0301 	add.w	r3, r8, #1
 800f6de:	00da      	lsls	r2, r3, #3
 800f6e0:	9205      	str	r2, [sp, #20]
 800f6e2:	ec55 4b10 	vmov	r4, r5, d0
 800f6e6:	aa70      	add	r2, sp, #448	@ 0x1c0
 800f6e8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800f744 <__kernel_rem_pio2+0x31c>
 800f6ec:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800f6f0:	4646      	mov	r6, r8
 800f6f2:	f04f 0a00 	mov.w	sl, #0
 800f6f6:	2e00      	cmp	r6, #0
 800f6f8:	f280 80cf 	bge.w	800f89a <__kernel_rem_pio2+0x472>
 800f6fc:	4644      	mov	r4, r8
 800f6fe:	2c00      	cmp	r4, #0
 800f700:	f2c0 80fd 	blt.w	800f8fe <__kernel_rem_pio2+0x4d6>
 800f704:	4b12      	ldr	r3, [pc, #72]	@ (800f750 <__kernel_rem_pio2+0x328>)
 800f706:	461f      	mov	r7, r3
 800f708:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f70a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f70e:	9306      	str	r3, [sp, #24]
 800f710:	f04f 0a00 	mov.w	sl, #0
 800f714:	f04f 0b00 	mov.w	fp, #0
 800f718:	2600      	movs	r6, #0
 800f71a:	eba8 0504 	sub.w	r5, r8, r4
 800f71e:	e0e2      	b.n	800f8e6 <__kernel_rem_pio2+0x4be>
 800f720:	f04f 0902 	mov.w	r9, #2
 800f724:	e754      	b.n	800f5d0 <__kernel_rem_pio2+0x1a8>
 800f726:	bf00      	nop
	...
 800f734:	3ff00000 	.word	0x3ff00000
 800f738:	0800ffe8 	.word	0x0800ffe8
 800f73c:	40200000 	.word	0x40200000
 800f740:	3ff00000 	.word	0x3ff00000
 800f744:	3e700000 	.word	0x3e700000
 800f748:	41700000 	.word	0x41700000
 800f74c:	3fe00000 	.word	0x3fe00000
 800f750:	0800ffa8 	.word	0x0800ffa8
 800f754:	f854 3b04 	ldr.w	r3, [r4], #4
 800f758:	b945      	cbnz	r5, 800f76c <__kernel_rem_pio2+0x344>
 800f75a:	b123      	cbz	r3, 800f766 <__kernel_rem_pio2+0x33e>
 800f75c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800f760:	f844 3c04 	str.w	r3, [r4, #-4]
 800f764:	2301      	movs	r3, #1
 800f766:	3201      	adds	r2, #1
 800f768:	461d      	mov	r5, r3
 800f76a:	e738      	b.n	800f5de <__kernel_rem_pio2+0x1b6>
 800f76c:	1acb      	subs	r3, r1, r3
 800f76e:	e7f7      	b.n	800f760 <__kernel_rem_pio2+0x338>
 800f770:	f108 32ff 	add.w	r2, r8, #4294967295
 800f774:	ab0c      	add	r3, sp, #48	@ 0x30
 800f776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f77a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f77e:	a90c      	add	r1, sp, #48	@ 0x30
 800f780:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f784:	e739      	b.n	800f5fa <__kernel_rem_pio2+0x1d2>
 800f786:	f108 32ff 	add.w	r2, r8, #4294967295
 800f78a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f790:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f794:	e7f3      	b.n	800f77e <__kernel_rem_pio2+0x356>
 800f796:	a90c      	add	r1, sp, #48	@ 0x30
 800f798:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f79c:	3b01      	subs	r3, #1
 800f79e:	430a      	orrs	r2, r1
 800f7a0:	e787      	b.n	800f6b2 <__kernel_rem_pio2+0x28a>
 800f7a2:	3401      	adds	r4, #1
 800f7a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f7a8:	2a00      	cmp	r2, #0
 800f7aa:	d0fa      	beq.n	800f7a2 <__kernel_rem_pio2+0x37a>
 800f7ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f7b2:	eb0d 0503 	add.w	r5, sp, r3
 800f7b6:	9b06      	ldr	r3, [sp, #24]
 800f7b8:	aa20      	add	r2, sp, #128	@ 0x80
 800f7ba:	4443      	add	r3, r8
 800f7bc:	f108 0701 	add.w	r7, r8, #1
 800f7c0:	3d98      	subs	r5, #152	@ 0x98
 800f7c2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800f7c6:	4444      	add	r4, r8
 800f7c8:	42bc      	cmp	r4, r7
 800f7ca:	da04      	bge.n	800f7d6 <__kernel_rem_pio2+0x3ae>
 800f7cc:	46a0      	mov	r8, r4
 800f7ce:	e6a2      	b.n	800f516 <__kernel_rem_pio2+0xee>
 800f7d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7d2:	2401      	movs	r4, #1
 800f7d4:	e7e6      	b.n	800f7a4 <__kernel_rem_pio2+0x37c>
 800f7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7d8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f7dc:	f7f0 fe46 	bl	800046c <__aeabi_i2d>
 800f7e0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800faa8 <__kernel_rem_pio2+0x680>
 800f7e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f7e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f7ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f7f0:	46b2      	mov	sl, r6
 800f7f2:	f04f 0800 	mov.w	r8, #0
 800f7f6:	9b05      	ldr	r3, [sp, #20]
 800f7f8:	4598      	cmp	r8, r3
 800f7fa:	dd05      	ble.n	800f808 <__kernel_rem_pio2+0x3e0>
 800f7fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f800:	3701      	adds	r7, #1
 800f802:	eca5 7b02 	vstmia	r5!, {d7}
 800f806:	e7df      	b.n	800f7c8 <__kernel_rem_pio2+0x3a0>
 800f808:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800f80c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f810:	f7f0 fe96 	bl	8000540 <__aeabi_dmul>
 800f814:	4602      	mov	r2, r0
 800f816:	460b      	mov	r3, r1
 800f818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f81c:	f7f0 fcda 	bl	80001d4 <__adddf3>
 800f820:	f108 0801 	add.w	r8, r8, #1
 800f824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f828:	e7e5      	b.n	800f7f6 <__kernel_rem_pio2+0x3ce>
 800f82a:	f1cb 0000 	rsb	r0, fp, #0
 800f82e:	ec47 6b10 	vmov	d0, r6, r7
 800f832:	f000 f951 	bl	800fad8 <scalbn>
 800f836:	ec55 4b10 	vmov	r4, r5, d0
 800f83a:	4b9d      	ldr	r3, [pc, #628]	@ (800fab0 <__kernel_rem_pio2+0x688>)
 800f83c:	2200      	movs	r2, #0
 800f83e:	4620      	mov	r0, r4
 800f840:	4629      	mov	r1, r5
 800f842:	f7f1 f903 	bl	8000a4c <__aeabi_dcmpge>
 800f846:	b300      	cbz	r0, 800f88a <__kernel_rem_pio2+0x462>
 800f848:	4b9a      	ldr	r3, [pc, #616]	@ (800fab4 <__kernel_rem_pio2+0x68c>)
 800f84a:	2200      	movs	r2, #0
 800f84c:	4620      	mov	r0, r4
 800f84e:	4629      	mov	r1, r5
 800f850:	f7f0 fe76 	bl	8000540 <__aeabi_dmul>
 800f854:	f7f1 f924 	bl	8000aa0 <__aeabi_d2iz>
 800f858:	4606      	mov	r6, r0
 800f85a:	f7f0 fe07 	bl	800046c <__aeabi_i2d>
 800f85e:	4b94      	ldr	r3, [pc, #592]	@ (800fab0 <__kernel_rem_pio2+0x688>)
 800f860:	2200      	movs	r2, #0
 800f862:	f7f0 fe6d 	bl	8000540 <__aeabi_dmul>
 800f866:	460b      	mov	r3, r1
 800f868:	4602      	mov	r2, r0
 800f86a:	4629      	mov	r1, r5
 800f86c:	4620      	mov	r0, r4
 800f86e:	f7f0 fcaf 	bl	80001d0 <__aeabi_dsub>
 800f872:	f7f1 f915 	bl	8000aa0 <__aeabi_d2iz>
 800f876:	ab0c      	add	r3, sp, #48	@ 0x30
 800f878:	f10b 0b18 	add.w	fp, fp, #24
 800f87c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f880:	f108 0801 	add.w	r8, r8, #1
 800f884:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f888:	e722      	b.n	800f6d0 <__kernel_rem_pio2+0x2a8>
 800f88a:	4620      	mov	r0, r4
 800f88c:	4629      	mov	r1, r5
 800f88e:	f7f1 f907 	bl	8000aa0 <__aeabi_d2iz>
 800f892:	ab0c      	add	r3, sp, #48	@ 0x30
 800f894:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f898:	e71a      	b.n	800f6d0 <__kernel_rem_pio2+0x2a8>
 800f89a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f89c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f8a0:	f7f0 fde4 	bl	800046c <__aeabi_i2d>
 800f8a4:	4622      	mov	r2, r4
 800f8a6:	462b      	mov	r3, r5
 800f8a8:	f7f0 fe4a 	bl	8000540 <__aeabi_dmul>
 800f8ac:	4652      	mov	r2, sl
 800f8ae:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800f8b2:	465b      	mov	r3, fp
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	4629      	mov	r1, r5
 800f8b8:	f7f0 fe42 	bl	8000540 <__aeabi_dmul>
 800f8bc:	3e01      	subs	r6, #1
 800f8be:	4604      	mov	r4, r0
 800f8c0:	460d      	mov	r5, r1
 800f8c2:	e718      	b.n	800f6f6 <__kernel_rem_pio2+0x2ce>
 800f8c4:	9906      	ldr	r1, [sp, #24]
 800f8c6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800f8ca:	9106      	str	r1, [sp, #24]
 800f8cc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800f8d0:	f7f0 fe36 	bl	8000540 <__aeabi_dmul>
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	4650      	mov	r0, sl
 800f8da:	4659      	mov	r1, fp
 800f8dc:	f7f0 fc7a 	bl	80001d4 <__adddf3>
 800f8e0:	3601      	adds	r6, #1
 800f8e2:	4682      	mov	sl, r0
 800f8e4:	468b      	mov	fp, r1
 800f8e6:	9b00      	ldr	r3, [sp, #0]
 800f8e8:	429e      	cmp	r6, r3
 800f8ea:	dc01      	bgt.n	800f8f0 <__kernel_rem_pio2+0x4c8>
 800f8ec:	42b5      	cmp	r5, r6
 800f8ee:	dae9      	bge.n	800f8c4 <__kernel_rem_pio2+0x49c>
 800f8f0:	ab48      	add	r3, sp, #288	@ 0x120
 800f8f2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f8f6:	e9c5 ab00 	strd	sl, fp, [r5]
 800f8fa:	3c01      	subs	r4, #1
 800f8fc:	e6ff      	b.n	800f6fe <__kernel_rem_pio2+0x2d6>
 800f8fe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f900:	2b02      	cmp	r3, #2
 800f902:	dc0b      	bgt.n	800f91c <__kernel_rem_pio2+0x4f4>
 800f904:	2b00      	cmp	r3, #0
 800f906:	dc39      	bgt.n	800f97c <__kernel_rem_pio2+0x554>
 800f908:	d05d      	beq.n	800f9c6 <__kernel_rem_pio2+0x59e>
 800f90a:	9b02      	ldr	r3, [sp, #8]
 800f90c:	f003 0007 	and.w	r0, r3, #7
 800f910:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f914:	ecbd 8b02 	vpop	{d8}
 800f918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f91c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f91e:	2b03      	cmp	r3, #3
 800f920:	d1f3      	bne.n	800f90a <__kernel_rem_pio2+0x4e2>
 800f922:	9b05      	ldr	r3, [sp, #20]
 800f924:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f928:	eb0d 0403 	add.w	r4, sp, r3
 800f92c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800f930:	4625      	mov	r5, r4
 800f932:	46c2      	mov	sl, r8
 800f934:	f1ba 0f00 	cmp.w	sl, #0
 800f938:	f1a5 0508 	sub.w	r5, r5, #8
 800f93c:	dc6b      	bgt.n	800fa16 <__kernel_rem_pio2+0x5ee>
 800f93e:	4645      	mov	r5, r8
 800f940:	2d01      	cmp	r5, #1
 800f942:	f1a4 0408 	sub.w	r4, r4, #8
 800f946:	f300 8087 	bgt.w	800fa58 <__kernel_rem_pio2+0x630>
 800f94a:	9c05      	ldr	r4, [sp, #20]
 800f94c:	ab48      	add	r3, sp, #288	@ 0x120
 800f94e:	441c      	add	r4, r3
 800f950:	2000      	movs	r0, #0
 800f952:	2100      	movs	r1, #0
 800f954:	f1b8 0f01 	cmp.w	r8, #1
 800f958:	f300 809c 	bgt.w	800fa94 <__kernel_rem_pio2+0x66c>
 800f95c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800f960:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800f964:	f1b9 0f00 	cmp.w	r9, #0
 800f968:	f040 80a6 	bne.w	800fab8 <__kernel_rem_pio2+0x690>
 800f96c:	9b04      	ldr	r3, [sp, #16]
 800f96e:	e9c3 7800 	strd	r7, r8, [r3]
 800f972:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f976:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f97a:	e7c6      	b.n	800f90a <__kernel_rem_pio2+0x4e2>
 800f97c:	9d05      	ldr	r5, [sp, #20]
 800f97e:	ab48      	add	r3, sp, #288	@ 0x120
 800f980:	441d      	add	r5, r3
 800f982:	4644      	mov	r4, r8
 800f984:	2000      	movs	r0, #0
 800f986:	2100      	movs	r1, #0
 800f988:	2c00      	cmp	r4, #0
 800f98a:	da35      	bge.n	800f9f8 <__kernel_rem_pio2+0x5d0>
 800f98c:	f1b9 0f00 	cmp.w	r9, #0
 800f990:	d038      	beq.n	800fa04 <__kernel_rem_pio2+0x5dc>
 800f992:	4602      	mov	r2, r0
 800f994:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f998:	9c04      	ldr	r4, [sp, #16]
 800f99a:	e9c4 2300 	strd	r2, r3, [r4]
 800f99e:	4602      	mov	r2, r0
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800f9a6:	f7f0 fc13 	bl	80001d0 <__aeabi_dsub>
 800f9aa:	ad4a      	add	r5, sp, #296	@ 0x128
 800f9ac:	2401      	movs	r4, #1
 800f9ae:	45a0      	cmp	r8, r4
 800f9b0:	da2b      	bge.n	800fa0a <__kernel_rem_pio2+0x5e2>
 800f9b2:	f1b9 0f00 	cmp.w	r9, #0
 800f9b6:	d002      	beq.n	800f9be <__kernel_rem_pio2+0x596>
 800f9b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f9bc:	4619      	mov	r1, r3
 800f9be:	9b04      	ldr	r3, [sp, #16]
 800f9c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f9c4:	e7a1      	b.n	800f90a <__kernel_rem_pio2+0x4e2>
 800f9c6:	9c05      	ldr	r4, [sp, #20]
 800f9c8:	ab48      	add	r3, sp, #288	@ 0x120
 800f9ca:	441c      	add	r4, r3
 800f9cc:	2000      	movs	r0, #0
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	f1b8 0f00 	cmp.w	r8, #0
 800f9d4:	da09      	bge.n	800f9ea <__kernel_rem_pio2+0x5c2>
 800f9d6:	f1b9 0f00 	cmp.w	r9, #0
 800f9da:	d002      	beq.n	800f9e2 <__kernel_rem_pio2+0x5ba>
 800f9dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	9b04      	ldr	r3, [sp, #16]
 800f9e4:	e9c3 0100 	strd	r0, r1, [r3]
 800f9e8:	e78f      	b.n	800f90a <__kernel_rem_pio2+0x4e2>
 800f9ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f9ee:	f7f0 fbf1 	bl	80001d4 <__adddf3>
 800f9f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800f9f6:	e7eb      	b.n	800f9d0 <__kernel_rem_pio2+0x5a8>
 800f9f8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f9fc:	f7f0 fbea 	bl	80001d4 <__adddf3>
 800fa00:	3c01      	subs	r4, #1
 800fa02:	e7c1      	b.n	800f988 <__kernel_rem_pio2+0x560>
 800fa04:	4602      	mov	r2, r0
 800fa06:	460b      	mov	r3, r1
 800fa08:	e7c6      	b.n	800f998 <__kernel_rem_pio2+0x570>
 800fa0a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800fa0e:	f7f0 fbe1 	bl	80001d4 <__adddf3>
 800fa12:	3401      	adds	r4, #1
 800fa14:	e7cb      	b.n	800f9ae <__kernel_rem_pio2+0x586>
 800fa16:	ed95 7b00 	vldr	d7, [r5]
 800fa1a:	ed8d 7b00 	vstr	d7, [sp]
 800fa1e:	ed95 7b02 	vldr	d7, [r5, #8]
 800fa22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa26:	ec53 2b17 	vmov	r2, r3, d7
 800fa2a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fa2e:	f7f0 fbd1 	bl	80001d4 <__adddf3>
 800fa32:	4602      	mov	r2, r0
 800fa34:	460b      	mov	r3, r1
 800fa36:	4606      	mov	r6, r0
 800fa38:	460f      	mov	r7, r1
 800fa3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa3e:	f7f0 fbc7 	bl	80001d0 <__aeabi_dsub>
 800fa42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fa46:	f7f0 fbc5 	bl	80001d4 <__adddf3>
 800fa4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fa4e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800fa52:	e9c5 6700 	strd	r6, r7, [r5]
 800fa56:	e76d      	b.n	800f934 <__kernel_rem_pio2+0x50c>
 800fa58:	ed94 7b00 	vldr	d7, [r4]
 800fa5c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800fa60:	ec51 0b17 	vmov	r0, r1, d7
 800fa64:	4652      	mov	r2, sl
 800fa66:	465b      	mov	r3, fp
 800fa68:	ed8d 7b00 	vstr	d7, [sp]
 800fa6c:	f7f0 fbb2 	bl	80001d4 <__adddf3>
 800fa70:	4602      	mov	r2, r0
 800fa72:	460b      	mov	r3, r1
 800fa74:	4606      	mov	r6, r0
 800fa76:	460f      	mov	r7, r1
 800fa78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa7c:	f7f0 fba8 	bl	80001d0 <__aeabi_dsub>
 800fa80:	4652      	mov	r2, sl
 800fa82:	465b      	mov	r3, fp
 800fa84:	f7f0 fba6 	bl	80001d4 <__adddf3>
 800fa88:	3d01      	subs	r5, #1
 800fa8a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fa8e:	e9c4 6700 	strd	r6, r7, [r4]
 800fa92:	e755      	b.n	800f940 <__kernel_rem_pio2+0x518>
 800fa94:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fa98:	f7f0 fb9c 	bl	80001d4 <__adddf3>
 800fa9c:	f108 38ff 	add.w	r8, r8, #4294967295
 800faa0:	e758      	b.n	800f954 <__kernel_rem_pio2+0x52c>
 800faa2:	bf00      	nop
 800faa4:	f3af 8000 	nop.w
	...
 800fab0:	41700000 	.word	0x41700000
 800fab4:	3e700000 	.word	0x3e700000
 800fab8:	9b04      	ldr	r3, [sp, #16]
 800faba:	9a04      	ldr	r2, [sp, #16]
 800fabc:	601f      	str	r7, [r3, #0]
 800fabe:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800fac2:	605c      	str	r4, [r3, #4]
 800fac4:	609d      	str	r5, [r3, #8]
 800fac6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800faca:	60d3      	str	r3, [r2, #12]
 800facc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fad0:	6110      	str	r0, [r2, #16]
 800fad2:	6153      	str	r3, [r2, #20]
 800fad4:	e719      	b.n	800f90a <__kernel_rem_pio2+0x4e2>
 800fad6:	bf00      	nop

0800fad8 <scalbn>:
 800fad8:	b570      	push	{r4, r5, r6, lr}
 800fada:	ec55 4b10 	vmov	r4, r5, d0
 800fade:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800fae2:	4606      	mov	r6, r0
 800fae4:	462b      	mov	r3, r5
 800fae6:	b991      	cbnz	r1, 800fb0e <scalbn+0x36>
 800fae8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800faec:	4323      	orrs	r3, r4
 800faee:	d03d      	beq.n	800fb6c <scalbn+0x94>
 800faf0:	4b35      	ldr	r3, [pc, #212]	@ (800fbc8 <scalbn+0xf0>)
 800faf2:	4620      	mov	r0, r4
 800faf4:	4629      	mov	r1, r5
 800faf6:	2200      	movs	r2, #0
 800faf8:	f7f0 fd22 	bl	8000540 <__aeabi_dmul>
 800fafc:	4b33      	ldr	r3, [pc, #204]	@ (800fbcc <scalbn+0xf4>)
 800fafe:	429e      	cmp	r6, r3
 800fb00:	4604      	mov	r4, r0
 800fb02:	460d      	mov	r5, r1
 800fb04:	da0f      	bge.n	800fb26 <scalbn+0x4e>
 800fb06:	a328      	add	r3, pc, #160	@ (adr r3, 800fba8 <scalbn+0xd0>)
 800fb08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0c:	e01e      	b.n	800fb4c <scalbn+0x74>
 800fb0e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800fb12:	4291      	cmp	r1, r2
 800fb14:	d10b      	bne.n	800fb2e <scalbn+0x56>
 800fb16:	4622      	mov	r2, r4
 800fb18:	4620      	mov	r0, r4
 800fb1a:	4629      	mov	r1, r5
 800fb1c:	f7f0 fb5a 	bl	80001d4 <__adddf3>
 800fb20:	4604      	mov	r4, r0
 800fb22:	460d      	mov	r5, r1
 800fb24:	e022      	b.n	800fb6c <scalbn+0x94>
 800fb26:	460b      	mov	r3, r1
 800fb28:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fb2c:	3936      	subs	r1, #54	@ 0x36
 800fb2e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800fb32:	4296      	cmp	r6, r2
 800fb34:	dd0d      	ble.n	800fb52 <scalbn+0x7a>
 800fb36:	2d00      	cmp	r5, #0
 800fb38:	a11d      	add	r1, pc, #116	@ (adr r1, 800fbb0 <scalbn+0xd8>)
 800fb3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb3e:	da02      	bge.n	800fb46 <scalbn+0x6e>
 800fb40:	a11d      	add	r1, pc, #116	@ (adr r1, 800fbb8 <scalbn+0xe0>)
 800fb42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb46:	a31a      	add	r3, pc, #104	@ (adr r3, 800fbb0 <scalbn+0xd8>)
 800fb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4c:	f7f0 fcf8 	bl	8000540 <__aeabi_dmul>
 800fb50:	e7e6      	b.n	800fb20 <scalbn+0x48>
 800fb52:	1872      	adds	r2, r6, r1
 800fb54:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800fb58:	428a      	cmp	r2, r1
 800fb5a:	dcec      	bgt.n	800fb36 <scalbn+0x5e>
 800fb5c:	2a00      	cmp	r2, #0
 800fb5e:	dd08      	ble.n	800fb72 <scalbn+0x9a>
 800fb60:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fb64:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fb68:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fb6c:	ec45 4b10 	vmov	d0, r4, r5
 800fb70:	bd70      	pop	{r4, r5, r6, pc}
 800fb72:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800fb76:	da08      	bge.n	800fb8a <scalbn+0xb2>
 800fb78:	2d00      	cmp	r5, #0
 800fb7a:	a10b      	add	r1, pc, #44	@ (adr r1, 800fba8 <scalbn+0xd0>)
 800fb7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb80:	dac1      	bge.n	800fb06 <scalbn+0x2e>
 800fb82:	a10f      	add	r1, pc, #60	@ (adr r1, 800fbc0 <scalbn+0xe8>)
 800fb84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fb88:	e7bd      	b.n	800fb06 <scalbn+0x2e>
 800fb8a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fb8e:	3236      	adds	r2, #54	@ 0x36
 800fb90:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fb94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fb98:	4620      	mov	r0, r4
 800fb9a:	4b0d      	ldr	r3, [pc, #52]	@ (800fbd0 <scalbn+0xf8>)
 800fb9c:	4629      	mov	r1, r5
 800fb9e:	2200      	movs	r2, #0
 800fba0:	e7d4      	b.n	800fb4c <scalbn+0x74>
 800fba2:	bf00      	nop
 800fba4:	f3af 8000 	nop.w
 800fba8:	c2f8f359 	.word	0xc2f8f359
 800fbac:	01a56e1f 	.word	0x01a56e1f
 800fbb0:	8800759c 	.word	0x8800759c
 800fbb4:	7e37e43c 	.word	0x7e37e43c
 800fbb8:	8800759c 	.word	0x8800759c
 800fbbc:	fe37e43c 	.word	0xfe37e43c
 800fbc0:	c2f8f359 	.word	0xc2f8f359
 800fbc4:	81a56e1f 	.word	0x81a56e1f
 800fbc8:	43500000 	.word	0x43500000
 800fbcc:	ffff3cb0 	.word	0xffff3cb0
 800fbd0:	3c900000 	.word	0x3c900000
 800fbd4:	00000000 	.word	0x00000000

0800fbd8 <floor>:
 800fbd8:	ec51 0b10 	vmov	r0, r1, d0
 800fbdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800fbe8:	2e13      	cmp	r6, #19
 800fbea:	460c      	mov	r4, r1
 800fbec:	4605      	mov	r5, r0
 800fbee:	4680      	mov	r8, r0
 800fbf0:	dc34      	bgt.n	800fc5c <floor+0x84>
 800fbf2:	2e00      	cmp	r6, #0
 800fbf4:	da17      	bge.n	800fc26 <floor+0x4e>
 800fbf6:	a332      	add	r3, pc, #200	@ (adr r3, 800fcc0 <floor+0xe8>)
 800fbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfc:	f7f0 faea 	bl	80001d4 <__adddf3>
 800fc00:	2200      	movs	r2, #0
 800fc02:	2300      	movs	r3, #0
 800fc04:	f7f0 ff2c 	bl	8000a60 <__aeabi_dcmpgt>
 800fc08:	b150      	cbz	r0, 800fc20 <floor+0x48>
 800fc0a:	2c00      	cmp	r4, #0
 800fc0c:	da55      	bge.n	800fcba <floor+0xe2>
 800fc0e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800fc12:	432c      	orrs	r4, r5
 800fc14:	2500      	movs	r5, #0
 800fc16:	42ac      	cmp	r4, r5
 800fc18:	4c2b      	ldr	r4, [pc, #172]	@ (800fcc8 <floor+0xf0>)
 800fc1a:	bf08      	it	eq
 800fc1c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800fc20:	4621      	mov	r1, r4
 800fc22:	4628      	mov	r0, r5
 800fc24:	e023      	b.n	800fc6e <floor+0x96>
 800fc26:	4f29      	ldr	r7, [pc, #164]	@ (800fccc <floor+0xf4>)
 800fc28:	4137      	asrs	r7, r6
 800fc2a:	ea01 0307 	and.w	r3, r1, r7
 800fc2e:	4303      	orrs	r3, r0
 800fc30:	d01d      	beq.n	800fc6e <floor+0x96>
 800fc32:	a323      	add	r3, pc, #140	@ (adr r3, 800fcc0 <floor+0xe8>)
 800fc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc38:	f7f0 facc 	bl	80001d4 <__adddf3>
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	2300      	movs	r3, #0
 800fc40:	f7f0 ff0e 	bl	8000a60 <__aeabi_dcmpgt>
 800fc44:	2800      	cmp	r0, #0
 800fc46:	d0eb      	beq.n	800fc20 <floor+0x48>
 800fc48:	2c00      	cmp	r4, #0
 800fc4a:	bfbe      	ittt	lt
 800fc4c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800fc50:	4133      	asrlt	r3, r6
 800fc52:	18e4      	addlt	r4, r4, r3
 800fc54:	ea24 0407 	bic.w	r4, r4, r7
 800fc58:	2500      	movs	r5, #0
 800fc5a:	e7e1      	b.n	800fc20 <floor+0x48>
 800fc5c:	2e33      	cmp	r6, #51	@ 0x33
 800fc5e:	dd0a      	ble.n	800fc76 <floor+0x9e>
 800fc60:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800fc64:	d103      	bne.n	800fc6e <floor+0x96>
 800fc66:	4602      	mov	r2, r0
 800fc68:	460b      	mov	r3, r1
 800fc6a:	f7f0 fab3 	bl	80001d4 <__adddf3>
 800fc6e:	ec41 0b10 	vmov	d0, r0, r1
 800fc72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc76:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800fc7a:	f04f 37ff 	mov.w	r7, #4294967295
 800fc7e:	40df      	lsrs	r7, r3
 800fc80:	4207      	tst	r7, r0
 800fc82:	d0f4      	beq.n	800fc6e <floor+0x96>
 800fc84:	a30e      	add	r3, pc, #56	@ (adr r3, 800fcc0 <floor+0xe8>)
 800fc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc8a:	f7f0 faa3 	bl	80001d4 <__adddf3>
 800fc8e:	2200      	movs	r2, #0
 800fc90:	2300      	movs	r3, #0
 800fc92:	f7f0 fee5 	bl	8000a60 <__aeabi_dcmpgt>
 800fc96:	2800      	cmp	r0, #0
 800fc98:	d0c2      	beq.n	800fc20 <floor+0x48>
 800fc9a:	2c00      	cmp	r4, #0
 800fc9c:	da0a      	bge.n	800fcb4 <floor+0xdc>
 800fc9e:	2e14      	cmp	r6, #20
 800fca0:	d101      	bne.n	800fca6 <floor+0xce>
 800fca2:	3401      	adds	r4, #1
 800fca4:	e006      	b.n	800fcb4 <floor+0xdc>
 800fca6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800fcaa:	2301      	movs	r3, #1
 800fcac:	40b3      	lsls	r3, r6
 800fcae:	441d      	add	r5, r3
 800fcb0:	4545      	cmp	r5, r8
 800fcb2:	d3f6      	bcc.n	800fca2 <floor+0xca>
 800fcb4:	ea25 0507 	bic.w	r5, r5, r7
 800fcb8:	e7b2      	b.n	800fc20 <floor+0x48>
 800fcba:	2500      	movs	r5, #0
 800fcbc:	462c      	mov	r4, r5
 800fcbe:	e7af      	b.n	800fc20 <floor+0x48>
 800fcc0:	8800759c 	.word	0x8800759c
 800fcc4:	7e37e43c 	.word	0x7e37e43c
 800fcc8:	bff00000 	.word	0xbff00000
 800fccc:	000fffff 	.word	0x000fffff

0800fcd0 <_init>:
 800fcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcd2:	bf00      	nop
 800fcd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcd6:	bc08      	pop	{r3}
 800fcd8:	469e      	mov	lr, r3
 800fcda:	4770      	bx	lr

0800fcdc <_fini>:
 800fcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcde:	bf00      	nop
 800fce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fce2:	bc08      	pop	{r3}
 800fce4:	469e      	mov	lr, r3
 800fce6:	4770      	bx	lr
